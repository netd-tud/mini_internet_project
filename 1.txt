+ (( 0 != 0 ))
+ command -v apt
+ apt update

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Hit:1 http://ftp.de.debian.org/debian bookworm InRelease
Hit:2 http://ftp.de.debian.org/debian bookworm-updates InRelease
Hit:3 http://ftp.de.debian.org/debian-security bookworm-security InRelease
Hit:4 https://debian.zih.tu-dresden.de bookworm InRelease
Hit:5 https://download.docker.com/linux/debian bookworm InRelease
Reading package lists...
Building dependency tree...
Reading state information...
10 packages can be upgraded. Run 'apt list --upgradable' to see them.
+ apt -y install openvswitch-switch bc uuid-runtime openvpn

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Reading package lists...
Building dependency tree...
Reading state information...
openvswitch-switch is already the newest version (3.1.0-2+deb12u1).
bc is already the newest version (1.07.1-3+b1).
uuid-runtime is already the newest version (2.38.1-5+deb12u2).
openvpn is already the newest version (2.6.3-1+deb12u2).
The following packages were automatically installed and are no longer required:
  libmodule-scandeps-perl linux-image-6.1.0-25-amd64
Use 'sudo apt autoremove' to remove them.
0 upgraded, 0 newly installed, 0 to remove and 10 not upgraded.
+ command -v docker
+ search_path ovs-vsctl
+ type -p ovs-vsctl
+ return 0
+ search_path docker
+ type -p docker
+ return 0
+ search_path uuidgen
+ type -p uuidgen
+ return 0
+ :
+++ dirname ./platform/startup.sh
++ cd ./platform
++ pwd
+ DIRECTORY=/home/service/tud/mini_internet_project/platform
+ echo /home/service/tud/mini_internet_project/platform
/home/service/tud/mini_internet_project/platform
+ CONFIG_DIRECTORY=/home/service/tud/mini_internet_project/platform/config
+ '[' -n '' ']'
+ echo /home/service/tud/mini_internet_project/platform/config
/home/service/tud/mini_internet_project/platform/config
++ date +%Y-%m-%d_%H-%M-%S
+ echo 2024-12-27_18-59-51
2024-12-27_18-59-51
+ echo hard_reset.sh
hard_reset.sh
+ /home/service/tud/mini_internet_project/platform/cleanup/hard_reset.sh
No containers to remove.
Total reclaimed space: 0B

real	0m1.701s
user	0m0.048s
sys	0m0.052s
+ echo ''

+ echo ''

+ sysctl fs.inotify.max_user_instances=1024
fs.inotify.max_user_instances = 1024
+ sysctl net.ipv4.neigh.default.gc_thresh1=16384
net.ipv4.neigh.default.gc_thresh1 = 16384
+ sysctl net.ipv4.neigh.default.gc_thresh2=32768
net.ipv4.neigh.default.gc_thresh2 = 32768
+ sysctl net.ipv4.neigh.default.gc_thresh3=131072
net.ipv4.neigh.default.gc_thresh3 = 131072
+ sysctl -p
+ sysctl kernel.pid_max=4194304
kernel.pid_max = 4194304
+ modprobe mpls_router
+ modprobe mpls_gso
+ modprobe mpls_iptunnel
++ date +%s%N
+ echo 'folder_setup.sh 1735322393186'
+ echo 'folder_setup.sh: '
folder_setup.sh: 
+ /home/service/tud/mini_internet_project/platform/setup/folder_setup.sh /home/service/tud/mini_internet_project/platform /home/service/tud/mini_internet_project/platform/config

real	0m0.460s
user	0m0.289s
sys	0m0.198s
+ echo ''

+ echo ''

++ date +%s%N
+ echo 'dns_config.sh 1735322393649'
+ echo 'dns_config.sh: '
dns_config.sh: 
+ /home/service/tud/mini_internet_project/platform/setup/dns_config.sh /home/service/tud/mini_internet_project/platform /home/service/tud/mini_internet_project/platform/config
+ DIRECTORY=/home/service/tud/mini_internet_project/platform
+ CONFIG_DIRECTORY=/home/service/tud/mini_internet_project/platform/config
+ source /home/service/tud/mini_internet_project/platform/config/subnet_config.sh
++ set -o errexit
++ set -o pipefail
++ set -o nounset
+ source /home/service/tud/mini_internet_project/platform/setup/_parallel_helper.sh
++ trap 'exit 1' ERR
++ set -o errexit
++ set -o pipefail
++ set -o nounset
+++ grep -c '^processor' /proc/cpuinfo
++ N_CORES=8
+++ lscpu
+++ grep -E '^Thread\(s\) per core:'
+++ awk '{print $4}'
++ N_THREADS_PER_CORE=1
++ N_TASKS=8
+ readarray groups
+ n_groups=15
+ mkdir /home/service/tud/mini_internet_project/platform/groups/dns
+ mkdir /home/service/tud/mini_internet_project/platform/groups/dns/group_config
+ mkdir /home/service/tud/mini_internet_project/platform/groups/dns/zones
+ location_options=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.options
+ echo 'options {'
+ echo '    directory "/var/cache/bind";'
+ echo ''
+ echo '    recursion no;'
+ echo -n '    listen-on { '
+ (( i=0 ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=1
++ subnet_router_DNS 1 dns-group
++ local n_grp=1 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.1.0.2/24
+ dns_subnet=198.1.0.2/24
+ echo -n '198.1.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=2
++ subnet_router_DNS 2 dns-group
++ local n_grp=2 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.2.0.2/24
+ dns_subnet=198.2.0.2/24
+ echo -n '198.2.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=3
++ subnet_router_DNS 3 dns-group
++ local n_grp=3 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.3.0.2/24
+ dns_subnet=198.3.0.2/24
+ echo -n '198.3.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=4
++ subnet_router_DNS 4 dns-group
++ local n_grp=4 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.4.0.2/24
+ dns_subnet=198.4.0.2/24
+ echo -n '198.4.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=5
++ subnet_router_DNS 5 dns-group
++ local n_grp=5 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.5.0.2/24
+ dns_subnet=198.5.0.2/24
+ echo -n '198.5.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=6
++ subnet_router_DNS 6 dns-group
++ local n_grp=6 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.6.0.2/24
+ dns_subnet=198.6.0.2/24
+ echo -n '198.6.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=11
++ subnet_router_DNS 11 dns-group
++ local n_grp=11 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.11.0.2/24
+ dns_subnet=198.11.0.2/24
+ echo -n '198.11.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=12
++ subnet_router_DNS 12 dns-group
++ local n_grp=12 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.12.0.2/24
+ dns_subnet=198.12.0.2/24
+ echo -n '198.12.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=13
++ subnet_router_DNS 13 dns-group
++ local n_grp=13 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.13.0.2/24
+ dns_subnet=198.13.0.2/24
+ echo -n '198.13.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=14
++ subnet_router_DNS 14 dns-group
++ local n_grp=14 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.14.0.2/24
+ dns_subnet=198.14.0.2/24
+ echo -n '198.14.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=15
++ subnet_router_DNS 15 dns-group
++ local n_grp=15 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.15.0.2/24
+ dns_subnet=198.15.0.2/24
+ echo -n '198.15.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=16
++ subnet_router_DNS 16 dns-group
++ local n_grp=16 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.16.0.2/24
+ dns_subnet=198.16.0.2/24
+ echo -n '198.16.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=80
++ subnet_router_DNS 80 dns-group
++ local n_grp=80 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.80.0.2/24
+ dns_subnet=198.80.0.2/24
+ echo -n '198.80.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=81
++ subnet_router_DNS 81 dns-group
++ local n_grp=81 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.81.0.2/24
+ dns_subnet=198.81.0.2/24
+ echo -n '198.81.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=82
++ subnet_router_DNS 82 dns-group
++ local n_grp=82 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.82.0.2/24
+ dns_subnet=198.82.0.2/24
+ echo -n '198.82.0.2; '
+ (( i++ ))
+ (( i<n_groups ))
++ subnet_router_DNS -1 dns-measurement
++ local n_grp=-1 device=dns-measurement
++ '[' dns-measurement = group ']'
++ '[' dns-measurement = measurement ']'
++ '[' dns-measurement = dns-group ']'
++ '[' dns-measurement = dns ']'
++ '[' dns-measurement = dns-measurement ']'
++ echo 198.255.0.2/24
+ subnet_measurement=198.255.0.2/24
+ echo -n '198.255.0.2; '
+ echo '};'
+ echo '    allow-transfer { none; };'
+ echo ''
+ echo '    dnssec-validation auto; '
+ echo '    auth-nxdomain no;    # conform to RFC1035'
+ echo '};'
+ (( i=0 ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=1
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_krill.txt
+ group_internal_links=l3_links_krill.txt
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group1
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo 'include "/etc/bind/group_config/named.conf.local.group1";'
+ echo 'zone "group1" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.group1";'
+ echo '};'
+ echo 'zone "1.in-addr.arpa" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.1";'
+ echo '};'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=2
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group2
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo 'include "/etc/bind/group_config/named.conf.local.group2";'
+ echo 'zone "group2" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.group2";'
+ echo '};'
+ echo 'zone "2.in-addr.arpa" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.2";'
+ echo '};'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=3
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group3
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=8
+ n_intern_links=12
+ echo 'include "/etc/bind/group_config/named.conf.local.group3";'
+ echo 'zone "group3" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.group3";'
+ echo '};'
+ echo 'zone "3.in-addr.arpa" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.3";'
+ echo '};'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=4
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group4
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=8
+ n_intern_links=12
+ echo 'include "/etc/bind/group_config/named.conf.local.group4";'
+ echo 'zone "group4" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.group4";'
+ echo '};'
+ echo 'zone "4.in-addr.arpa" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.4";'
+ echo '};'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=5
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group5
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo 'include "/etc/bind/group_config/named.conf.local.group5";'
+ echo 'zone "group5" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.group5";'
+ echo '};'
+ echo 'zone "5.in-addr.arpa" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.5";'
+ echo '};'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=6
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group6
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo 'include "/etc/bind/group_config/named.conf.local.group6";'
+ echo 'zone "group6" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.group6";'
+ echo '};'
+ echo 'zone "6.in-addr.arpa" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.6";'
+ echo '};'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=11
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group11
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo 'include "/etc/bind/group_config/named.conf.local.group11";'
+ echo 'zone "group11" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.group11";'
+ echo '};'
+ echo 'zone "11.in-addr.arpa" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.11";'
+ echo '};'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=12
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group12
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo 'include "/etc/bind/group_config/named.conf.local.group12";'
+ echo 'zone "group12" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.group12";'
+ echo '};'
+ echo 'zone "12.in-addr.arpa" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.12";'
+ echo '};'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=13
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group13
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=8
+ n_intern_links=12
+ echo 'include "/etc/bind/group_config/named.conf.local.group13";'
+ echo 'zone "group13" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.group13";'
+ echo '};'
+ echo 'zone "13.in-addr.arpa" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.13";'
+ echo '};'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=14
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group14
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=8
+ n_intern_links=12
+ echo 'include "/etc/bind/group_config/named.conf.local.group14";'
+ echo 'zone "group14" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.group14";'
+ echo '};'
+ echo 'zone "14.in-addr.arpa" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.14";'
+ echo '};'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=15
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group15
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo 'include "/etc/bind/group_config/named.conf.local.group15";'
+ echo 'zone "group15" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.group15";'
+ echo '};'
+ echo 'zone "15.in-addr.arpa" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.15";'
+ echo '};'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=16
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group16
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo 'include "/etc/bind/group_config/named.conf.local.group16";'
+ echo 'zone "group16" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.group16";'
+ echo '};'
+ echo 'zone "16.in-addr.arpa" {'
+ echo ' type master;'
+ echo ' file "/etc/bind/zones/db.16";'
+ echo '};'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=80
+ group_as=IXP
+ group_config=Config
+ group_router_config=N/A
+ group_internal_links=N/A
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group80
+ '[' IXP '!=' IXP ']'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=81
+ group_as=IXP
+ group_config=Config
+ group_router_config=N/A
+ group_internal_links=N/A
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group81
+ '[' IXP '!=' IXP ']'
+ (( i++ ))
+ (( i<n_groups ))
+ group_i=(${groups[$i]})
+ group_number=82
+ group_as=IXP
+ group_config=Config
+ group_router_config=N/A
+ group_internal_links=N/A
+ location_local=/home/service/tud/mini_internet_project/platform/groups/dns/named.conf.local
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/group_config/named.conf.local.group82
+ '[' IXP '!=' IXP ']'
+ (( i++ ))
+ (( i<n_groups ))
+ wait
+ (( j=0 ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=1
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_krill.txt
+ group_internal_links=l3_links_krill.txt
+ domain=group1
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group1
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.1
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo ';'
+ echo '; BIND reverse data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@   IN  SOA ns.group1. ns.group1. ('
+ echo '                  1     ; Serial'
+ echo '             604800     ; Refresh'
+ echo '              86400     ; Retry'
+ echo '            2419200     ; Expire'
+ echo '             604800 )   ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '    IN  NS  ns.group1.'
+ echo ''
+ echo ''
+ echo ';'
+ echo '; BIND data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@       IN      SOA     ns.group1. admin.group1. ('
+ echo '                              1         ; Serial'
+ echo '                         604800         ; Refresh'
+ echo '                          86400         ; Retry'
+ echo '                        2419200         ; Expire'
+ echo '                         604800 )       ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '        IN      NS      ns.group1.'
+ echo ''
++ subnet_router_DNS 1 dns-group
++ local n_grp=1 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.1.0.2/24
+ subnet=198.1.0.2/24
+ forward_entry ns.group1 198.1.0.2/24
+ local name=ns.group1
+ local subnet=198.1.0.2/24
+ echo 'ns.group1. IN A 198.1.0.2'
+ echo ''
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 0 == \0 ]]
++ subnet_router 1 0
++ local n_grp=1 n_router=0
++ echo 1.151.0.1/24
+ subnet=1.151.0.1/24
+ forward_entry zuri.group1 1.151.0.1/24
+ local name=zuri.group1
+ local subnet=1.151.0.1/24
+ echo 'zuri.group1. IN A 1.151.0.1'
+ reverse_entry zuri.group1 1.151.0.1/24
+ local name=zuri.group1
+ local subnet=1.151.0.1/24
+ local first_sub=151.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.151 IN  PTR zuri.group1.'
+ [[ ! -z miniinterneteth/d_routinator ]]
++ subnet_host_router 1 0 host
++ local n_grp=1 n_router=0 device=host
++ '[' host = host ']'
++ echo 1.101.0.1/24
+ subnet1=1.101.0.1/24
++ subnet_host_router 1 0 router
++ local n_grp=1 n_router=0 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 1.101.0.2/24
+ subnet2=1.101.0.2/24
+ [[ routinator:miniinterneteth/d_routinator == *\k\r\i\l\l* ]]
+ forward_entry host.zuri.group1 1.101.0.1/24
+ local name=host.zuri.group1
+ local subnet=1.101.0.1/24
+ echo 'host.zuri.group1. IN A 1.101.0.1'
+ forward_entry zuri.group1 1.101.0.2/24
+ local name=zuri.group1
+ local subnet=1.101.0.2/24
+ echo 'zuri.group1. IN A 1.101.0.2'
+ reverse_entry host.zuri.group1 1.101.0.1/24
+ local name=host.zuri.group1
+ local subnet=1.101.0.1/24
+ local first_sub=101.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.101 IN  PTR host.zuri.group1.'
+ reverse_entry zuri.group1 1.101.0.2/24
+ local name=zuri.group1
+ local subnet=1.101.0.2/24
+ local first_sub=101.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.101 IN  PTR zuri.group1.'
+ [[ MATRIX_TARGET == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=krill:miniinterneteth/d_krill
++ echo krill:miniinterneteth/d_krill
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_krill
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 1 == \0 ]]
+ [[ ! -z miniinterneteth/d_krill ]]
++ subnet_host_router 1 1 host
++ local n_grp=1 n_router=1 device=host
++ '[' host = host ']'
++ echo 1.102.0.1/24
+ subnet1=1.102.0.1/24
++ subnet_host_router 1 1 router
++ local n_grp=1 n_router=1 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 1.102.0.2/24
+ subnet2=1.102.0.2/24
+ [[ krill:miniinterneteth/d_krill == *\k\r\i\l\l* ]]
+ forward_entry rpki-server.group1 1.102.0.1/24
+ local name=rpki-server.group1
+ local subnet=1.102.0.1/24
+ echo 'rpki-server.group1. IN A 1.102.0.1'
+ forward_entry host.zuri.group1 1.102.0.1/24
+ local name=host.zuri.group1
+ local subnet=1.102.0.1/24
+ echo 'host.zuri.group1. IN A 1.102.0.1'
+ forward_entry zuri.group1 1.102.0.2/24
+ local name=zuri.group1
+ local subnet=1.102.0.2/24
+ echo 'zuri.group1. IN A 1.102.0.2'
+ reverse_entry host.zuri.group1 1.102.0.1/24
+ local name=host.zuri.group1
+ local subnet=1.102.0.1/24
+ local first_sub=102.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.102 IN  PTR host.zuri.group1.'
+ reverse_entry zuri.group1 1.102.0.2/24
+ local name=zuri.group1
+ local subnet=1.102.0.2/24
+ local first_sub=102.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.102 IN  PTR zuri.group1.'
+ [[ DNS == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 2 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MATRIX == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 3 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MEASUREMENT == \M\E\A\S\U\R\E\M\E\N\T ]]
++ subnet_router_MEASUREMENT 1 group
++ local n_grp=1 device=group
++ '[' group = group ']'
++ echo 1.0.199.1/24
+ m_subnet=1.0.199.1/24
+ forward_entry measurement.zuri.group1 1.0.199.1/24
+ local name=measurement.zuri.group1
+ local subnet=1.0.199.1/24
+ echo 'measurement.zuri.group1. IN A 1.0.199.1'
+ reverse_entry measurement.zuri.group1 1.0.199.1/24
+ local name=measurement.zuri.group1
+ local subnet=1.0.199.1/24
+ local first_sub=0.199.1/24
+ local second_sub=199.1/24
+ local third_sub=1/24
+ echo '1.199.0 IN  PTR measurement.zuri.group1.'
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_intern_links ))
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=2
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ domain=group2
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group2
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.2
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo ';'
+ echo '; BIND reverse data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@   IN  SOA ns.group2. ns.group2. ('
+ echo '                  2     ; Serial'
+ echo '             604800     ; Refresh'
+ echo '              86400     ; Retry'
+ echo '            2419200     ; Expire'
+ echo '             604800 )   ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '    IN  NS  ns.group2.'
+ echo ''
+ echo ''
+ echo ';'
+ echo '; BIND data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@       IN      SOA     ns.group2. admin.group2. ('
+ echo '                              2         ; Serial'
+ echo '                         604800         ; Refresh'
+ echo '                          86400         ; Retry'
+ echo '                        2419200         ; Expire'
+ echo '                         604800 )       ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '        IN      NS      ns.group2.'
+ echo ''
++ subnet_router_DNS 2 dns-group
++ local n_grp=2 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.2.0.2/24
+ subnet=198.2.0.2/24
+ forward_entry ns.group2 198.2.0.2/24
+ local name=ns.group2
+ local subnet=198.2.0.2/24
+ echo 'ns.group2. IN A 198.2.0.2'
+ echo ''
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 0 == \0 ]]
++ subnet_router 2 0
++ local n_grp=2 n_router=0
++ echo 2.151.0.1/24
+ subnet=2.151.0.1/24
+ forward_entry zuri.group2 2.151.0.1/24
+ local name=zuri.group2
+ local subnet=2.151.0.1/24
+ echo 'zuri.group2. IN A 2.151.0.1'
+ reverse_entry zuri.group2 2.151.0.1/24
+ local name=zuri.group2
+ local subnet=2.151.0.1/24
+ local first_sub=151.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.151 IN  PTR zuri.group2.'
+ [[ ! -z miniinterneteth/d_routinator ]]
++ subnet_host_router 2 0 host
++ local n_grp=2 n_router=0 device=host
++ '[' host = host ']'
++ echo 2.101.0.1/24
+ subnet1=2.101.0.1/24
++ subnet_host_router 2 0 router
++ local n_grp=2 n_router=0 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 2.101.0.2/24
+ subnet2=2.101.0.2/24
+ [[ routinator:miniinterneteth/d_routinator == *\k\r\i\l\l* ]]
+ forward_entry host.zuri.group2 2.101.0.1/24
+ local name=host.zuri.group2
+ local subnet=2.101.0.1/24
+ echo 'host.zuri.group2. IN A 2.101.0.1'
+ forward_entry zuri.group2 2.101.0.2/24
+ local name=zuri.group2
+ local subnet=2.101.0.2/24
+ echo 'zuri.group2. IN A 2.101.0.2'
+ reverse_entry host.zuri.group2 2.101.0.1/24
+ local name=host.zuri.group2
+ local subnet=2.101.0.1/24
+ local first_sub=101.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.101 IN  PTR host.zuri.group2.'
+ reverse_entry zuri.group2 2.101.0.2/24
+ local name=zuri.group2
+ local subnet=2.101.0.2/24
+ local first_sub=101.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.101 IN  PTR zuri.group2.'
+ [[ MATRIX_TARGET == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 1 == \0 ]]
+ [[ ! -z '' ]]
+ [[ DNS == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 2 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MATRIX == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 3 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MEASUREMENT == \M\E\A\S\U\R\E\M\E\N\T ]]
++ subnet_router_MEASUREMENT 2 group
++ local n_grp=2 device=group
++ '[' group = group ']'
++ echo 2.0.199.1/24
+ m_subnet=2.0.199.1/24
+ forward_entry measurement.zuri.group2 2.0.199.1/24
+ local name=measurement.zuri.group2
+ local subnet=2.0.199.1/24
+ echo 'measurement.zuri.group2. IN A 2.0.199.1'
+ reverse_entry measurement.zuri.group2 2.0.199.1/24
+ local name=measurement.zuri.group2
+ local subnet=2.0.199.1/24
+ local first_sub=0.199.1/24
+ local second_sub=199.1/24
+ local third_sub=1/24
+ echo '1.199.0 IN  PTR measurement.zuri.group2.'
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_intern_links ))
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=3
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ domain=group3
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group3
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.3
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=8
+ n_intern_links=12
+ echo ';'
+ echo '; BIND reverse data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@   IN  SOA ns.group3. ns.group3. ('
+ echo '                  3     ; Serial'
+ echo '             604800     ; Refresh'
+ echo '              86400     ; Retry'
+ echo '            2419200     ; Expire'
+ echo '             604800 )   ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '    IN  NS  ns.group3.'
+ echo ''
+ echo ''
+ echo ';'
+ echo '; BIND data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@       IN      SOA     ns.group3. admin.group3. ('
+ echo '                              3         ; Serial'
+ echo '                         604800         ; Refresh'
+ echo '                          86400         ; Retry'
+ echo '                        2419200         ; Expire'
+ echo '                         604800 )       ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '        IN      NS      ns.group3.'
+ echo ''
++ subnet_router_DNS 3 dns-group
++ local n_grp=3 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.3.0.2/24
+ subnet=198.3.0.2/24
+ forward_entry ns.group3 198.3.0.2/24
+ local name=ns.group3
+ local subnet=198.3.0.2/24
+ echo 'ns.group3. IN A 198.3.0.2'
+ echo ''
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 3 0
++ local n_grp=3 n_router=0
++ echo 3.151.0.1/24
+ subnet=3.151.0.1/24
+ forward_entry zuri.group3 3.151.0.1/24
+ local name=zuri.group3
+ local subnet=3.151.0.1/24
+ echo 'zuri.group3. IN A 3.151.0.1'
+ reverse_entry zuri.group3 3.151.0.1/24
+ local name=zuri.group3
+ local subnet=3.151.0.1/24
+ local first_sub=151.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.151 IN  PTR zuri.group3.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 3 0 host
++ local n_grp=3 n_router=0 device=host
++ '[' host = host ']'
++ echo 3.101.0.1/24
+ subnet1=3.101.0.1/24
++ subnet_host_router 3 0 router
++ local n_grp=3 n_router=0 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 3.101.0.2/24
+ subnet2=3.101.0.2/24
+ [[ L2-DCN:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.zuri.group3 3.101.0.1/24
+ local name=host.zuri.group3
+ local subnet=3.101.0.1/24
+ echo 'host.zuri.group3. IN A 3.101.0.1'
+ forward_entry zuri.group3 3.101.0.2/24
+ local name=zuri.group3
+ local subnet=3.101.0.2/24
+ echo 'zuri.group3. IN A 3.101.0.2'
+ reverse_entry host.zuri.group3 3.101.0.1/24
+ local name=host.zuri.group3
+ local subnet=3.101.0.1/24
+ local first_sub=101.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.101 IN  PTR host.zuri.group3.'
+ reverse_entry zuri.group3 3.101.0.2/24
+ local name=zuri.group3
+ local subnet=3.101.0.2/24
+ local first_sub=101.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.101 IN  PTR zuri.group3.'
+ [[ DNS == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=base
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 3 1
++ local n_grp=3 n_router=1
++ echo 3.152.0.1/24
+ subnet=3.152.0.1/24
+ forward_entry base.group3 3.152.0.1/24
+ local name=base.group3
+ local subnet=3.152.0.1/24
+ echo 'base.group3. IN A 3.152.0.1'
+ reverse_entry base.group3 3.152.0.1/24
+ local name=base.group3
+ local subnet=3.152.0.1/24
+ local first_sub=152.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.152 IN  PTR base.group3.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 3 1 host
++ local n_grp=3 n_router=1 device=host
++ '[' host = host ']'
++ echo 3.102.0.1/24
+ subnet1=3.102.0.1/24
++ subnet_host_router 3 1 router
++ local n_grp=3 n_router=1 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 3.102.0.2/24
+ subnet2=3.102.0.2/24
+ [[ L2-DCN:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.base.group3 3.102.0.1/24
+ local name=host.base.group3
+ local subnet=3.102.0.1/24
+ echo 'host.base.group3. IN A 3.102.0.1'
+ forward_entry base.group3 3.102.0.2/24
+ local name=base.group3
+ local subnet=3.102.0.2/24
+ echo 'base.group3. IN A 3.102.0.2'
+ reverse_entry host.base.group3 3.102.0.1/24
+ local name=host.base.group3
+ local subnet=3.102.0.1/24
+ local first_sub=102.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.102 IN  PTR host.base.group3.'
+ reverse_entry base.group3 3.102.0.2/24
+ local name=base.group3
+ local subnet=3.102.0.2/24
+ local first_sub=102.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.102 IN  PTR base.group3.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=gene
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 3 2
++ local n_grp=3 n_router=2
++ echo 3.153.0.1/24
+ subnet=3.153.0.1/24
+ forward_entry gene.group3 3.153.0.1/24
+ local name=gene.group3
+ local subnet=3.153.0.1/24
+ echo 'gene.group3. IN A 3.153.0.1'
+ reverse_entry gene.group3 3.153.0.1/24
+ local name=gene.group3
+ local subnet=3.153.0.1/24
+ local first_sub=153.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.153 IN  PTR gene.group3.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 3 2 host
++ local n_grp=3 n_router=2 device=host
++ '[' host = host ']'
++ echo 3.103.0.1/24
+ subnet1=3.103.0.1/24
++ subnet_host_router 3 2 router
++ local n_grp=3 n_router=2 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 3.103.0.2/24
+ subnet2=3.103.0.2/24
+ [[ L2-DCS:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.gene.group3 3.103.0.1/24
+ local name=host.gene.group3
+ local subnet=3.103.0.1/24
+ echo 'host.gene.group3. IN A 3.103.0.1'
+ forward_entry gene.group3 3.103.0.2/24
+ local name=gene.group3
+ local subnet=3.103.0.2/24
+ echo 'gene.group3. IN A 3.103.0.2'
+ reverse_entry host.gene.group3 3.103.0.1/24
+ local name=host.gene.group3
+ local subnet=3.103.0.1/24
+ local first_sub=103.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.103 IN  PTR host.gene.group3.'
+ reverse_entry gene.group3 3.103.0.2/24
+ local name=gene.group3
+ local subnet=3.103.0.2/24
+ local first_sub=103.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.103 IN  PTR gene.group3.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=luga
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
+ single_router=
+ [[ -z '' ]]
++ subnet_router 3 3
++ local n_grp=3 n_router=3
++ echo 3.154.0.1/24
+ subnet=3.154.0.1/24
+ forward_entry luga.group3 3.154.0.1/24
+ local name=luga.group3
+ local subnet=3.154.0.1/24
+ echo 'luga.group3. IN A 3.154.0.1'
+ reverse_entry luga.group3 3.154.0.1/24
+ local name=luga.group3
+ local subnet=3.154.0.1/24
+ local first_sub=154.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.154 IN  PTR luga.group3.'
+ [[ ! -z miniinterneteth/d_routinator ]]
++ subnet_host_router 3 3 host
++ local n_grp=3 n_router=3 device=host
++ '[' host = host ']'
++ echo 3.104.0.1/24
+ subnet1=3.104.0.1/24
++ subnet_host_router 3 3 router
++ local n_grp=3 n_router=3 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 3.104.0.2/24
+ subnet2=3.104.0.2/24
+ [[ routinator:miniinterneteth/d_routinator == *\k\r\i\l\l* ]]
+ forward_entry host.luga.group3 3.104.0.1/24
+ local name=host.luga.group3
+ local subnet=3.104.0.1/24
+ echo 'host.luga.group3. IN A 3.104.0.1'
+ forward_entry luga.group3 3.104.0.2/24
+ local name=luga.group3
+ local subnet=3.104.0.2/24
+ echo 'luga.group3. IN A 3.104.0.2'
+ reverse_entry host.luga.group3 3.104.0.1/24
+ local name=host.luga.group3
+ local subnet=3.104.0.1/24
+ local first_sub=104.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.104 IN  PTR host.luga.group3.'
+ reverse_entry luga.group3 3.104.0.2/24
+ local name=luga.group3
+ local subnet=3.104.0.2/24
+ local first_sub=104.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.104 IN  PTR luga.group3.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=muni
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 3 4
++ local n_grp=3 n_router=4
++ echo 3.155.0.1/24
+ subnet=3.155.0.1/24
+ forward_entry muni.group3 3.155.0.1/24
+ local name=muni.group3
+ local subnet=3.155.0.1/24
+ echo 'muni.group3. IN A 3.155.0.1'
+ reverse_entry muni.group3 3.155.0.1/24
+ local name=muni.group3
+ local subnet=3.155.0.1/24
+ local first_sub=155.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.155 IN  PTR muni.group3.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 3 4 host
++ local n_grp=3 n_router=4 device=host
++ '[' host = host ']'
++ echo 3.105.0.1/24
+ subnet1=3.105.0.1/24
++ subnet_host_router 3 4 router
++ local n_grp=3 n_router=4 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 3.105.0.2/24
+ subnet2=3.105.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.muni.group3 3.105.0.1/24
+ local name=host.muni.group3
+ local subnet=3.105.0.1/24
+ echo 'host.muni.group3. IN A 3.105.0.1'
+ forward_entry muni.group3 3.105.0.2/24
+ local name=muni.group3
+ local subnet=3.105.0.2/24
+ echo 'muni.group3. IN A 3.105.0.2'
+ reverse_entry host.muni.group3 3.105.0.1/24
+ local name=host.muni.group3
+ local subnet=3.105.0.1/24
+ local first_sub=105.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.105 IN  PTR host.muni.group3.'
+ reverse_entry muni.group3 3.105.0.2/24
+ local name=muni.group3
+ local subnet=3.105.0.2/24
+ local first_sub=105.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.105 IN  PTR muni.group3.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=lyon
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 3 5
++ local n_grp=3 n_router=5
++ echo 3.156.0.1/24
+ subnet=3.156.0.1/24
+ forward_entry lyon.group3 3.156.0.1/24
+ local name=lyon.group3
+ local subnet=3.156.0.1/24
+ echo 'lyon.group3. IN A 3.156.0.1'
+ reverse_entry lyon.group3 3.156.0.1/24
+ local name=lyon.group3
+ local subnet=3.156.0.1/24
+ local first_sub=156.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.156 IN  PTR lyon.group3.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 3 5 host
++ local n_grp=3 n_router=5 device=host
++ '[' host = host ']'
++ echo 3.106.0.1/24
+ subnet1=3.106.0.1/24
++ subnet_host_router 3 5 router
++ local n_grp=3 n_router=5 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 3.106.0.2/24
+ subnet2=3.106.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.lyon.group3 3.106.0.1/24
+ local name=host.lyon.group3
+ local subnet=3.106.0.1/24
+ echo 'host.lyon.group3. IN A 3.106.0.1'
+ forward_entry lyon.group3 3.106.0.2/24
+ local name=lyon.group3
+ local subnet=3.106.0.2/24
+ echo 'lyon.group3. IN A 3.106.0.2'
+ reverse_entry host.lyon.group3 3.106.0.1/24
+ local name=host.lyon.group3
+ local subnet=3.106.0.1/24
+ local first_sub=106.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.106 IN  PTR host.lyon.group3.'
+ reverse_entry lyon.group3 3.106.0.2/24
+ local name=lyon.group3
+ local subnet=3.106.0.2/24
+ local first_sub=106.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.106 IN  PTR lyon.group3.'
+ [[ MATRIX == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=vien
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 3 6
++ local n_grp=3 n_router=6
++ echo 3.157.0.1/24
+ subnet=3.157.0.1/24
+ forward_entry vien.group3 3.157.0.1/24
+ local name=vien.group3
+ local subnet=3.157.0.1/24
+ echo 'vien.group3. IN A 3.157.0.1'
+ reverse_entry vien.group3 3.157.0.1/24
+ local name=vien.group3
+ local subnet=3.157.0.1/24
+ local first_sub=157.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.157 IN  PTR vien.group3.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 3 6 host
++ local n_grp=3 n_router=6 device=host
++ '[' host = host ']'
++ echo 3.107.0.1/24
+ subnet1=3.107.0.1/24
++ subnet_host_router 3 6 router
++ local n_grp=3 n_router=6 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 3.107.0.2/24
+ subnet2=3.107.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.vien.group3 3.107.0.1/24
+ local name=host.vien.group3
+ local subnet=3.107.0.1/24
+ echo 'host.vien.group3. IN A 3.107.0.1'
+ forward_entry vien.group3 3.107.0.2/24
+ local name=vien.group3
+ local subnet=3.107.0.2/24
+ echo 'vien.group3. IN A 3.107.0.2'
+ reverse_entry host.vien.group3 3.107.0.1/24
+ local name=host.vien.group3
+ local subnet=3.107.0.1/24
+ local first_sub=107.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.107 IN  PTR host.vien.group3.'
+ reverse_entry vien.group3 3.107.0.2/24
+ local name=vien.group3
+ local subnet=3.107.0.2/24
+ local first_sub=107.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.107 IN  PTR vien.group3.'
+ [[ MATRIX_TARGET == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=mila
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 3 7
++ local n_grp=3 n_router=7
++ echo 3.158.0.1/24
+ subnet=3.158.0.1/24
+ forward_entry mila.group3 3.158.0.1/24
+ local name=mila.group3
+ local subnet=3.158.0.1/24
+ echo 'mila.group3. IN A 3.158.0.1'
+ reverse_entry mila.group3 3.158.0.1/24
+ local name=mila.group3
+ local subnet=3.158.0.1/24
+ local first_sub=158.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.158 IN  PTR mila.group3.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 3 7 host
++ local n_grp=3 n_router=7 device=host
++ '[' host = host ']'
++ echo 3.108.0.1/24
+ subnet1=3.108.0.1/24
++ subnet_host_router 3 7 router
++ local n_grp=3 n_router=7 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 3.108.0.2/24
+ subnet2=3.108.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.mila.group3 3.108.0.1/24
+ local name=host.mila.group3
+ local subnet=3.108.0.1/24
+ echo 'host.mila.group3. IN A 3.108.0.1'
+ forward_entry mila.group3 3.108.0.2/24
+ local name=mila.group3
+ local subnet=3.108.0.2/24
+ echo 'mila.group3. IN A 3.108.0.2'
+ reverse_entry host.mila.group3 3.108.0.1/24
+ local name=host.mila.group3
+ local subnet=3.108.0.1/24
+ local first_sub=108.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.108 IN  PTR host.mila.group3.'
+ reverse_entry mila.group3 3.108.0.2/24
+ local name=mila.group3
+ local subnet=3.108.0.2/24
+ local first_sub=108.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.108 IN  PTR mila.group3.'
+ [[ MEASUREMENT == \M\E\A\S\U\R\E\M\E\N\T ]]
++ subnet_router_MEASUREMENT 3 group
++ local n_grp=3 device=group
++ '[' group = group ']'
++ echo 3.0.199.1/24
+ m_subnet=3.0.199.1/24
+ forward_entry measurement.mila.group3 3.0.199.1/24
+ local name=measurement.mila.group3
+ local subnet=3.0.199.1/24
+ echo 'measurement.mila.group3. IN A 3.0.199.1'
+ reverse_entry measurement.mila.group3 3.0.199.1/24
+ local name=measurement.mila.group3
+ local subnet=3.0.199.1/24
+ local first_sub=0.199.1/24
+ local second_sub=199.1/24
+ local third_sub=1/24
+ echo '1.199.0 IN  PTR measurement.mila.group3.'
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=base
++ subnet_router_router_intern 3 0 1
++ local n_grp=3 n_net=0 device=1
++ '[' 1 = 1 ']'
++ echo 3.0.1.1/24
+ subnet1=3.0.1.1/24
++ subnet_router_router_intern 3 0 2
++ local n_grp=3 n_net=0 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 3.0.1.2/24
+ subnet2=3.0.1.2/24
+ reverse_entry zuri.group3 3.0.1.1/24
+ local name=zuri.group3
+ local subnet=3.0.1.1/24
+ local first_sub=0.1.1/24
+ local second_sub=1.1/24
+ local third_sub=1/24
+ echo '1.1.0 IN  PTR zuri.group3.'
+ reverse_entry base.group3 3.0.1.2/24
+ local name=base.group3
+ local subnet=3.0.1.2/24
+ local first_sub=0.1.2/24
+ local second_sub=1.2/24
+ local third_sub=2/24
+ echo '2.1.0 IN  PTR base.group3.'
+ forward_entry zuri.group3 3.0.1.1/24
+ local name=zuri.group3
+ local subnet=3.0.1.1/24
+ echo 'zuri.group3. IN A 3.0.1.1'
+ forward_entry base.group3 3.0.1.2/24
+ local name=base.group3
+ local subnet=3.0.1.2/24
+ echo 'base.group3. IN A 3.0.1.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=gene
++ subnet_router_router_intern 3 1 1
++ local n_grp=3 n_net=1 device=1
++ '[' 1 = 1 ']'
++ echo 3.0.2.1/24
+ subnet1=3.0.2.1/24
++ subnet_router_router_intern 3 1 2
++ local n_grp=3 n_net=1 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 3.0.2.2/24
+ subnet2=3.0.2.2/24
+ reverse_entry zuri.group3 3.0.2.1/24
+ local name=zuri.group3
+ local subnet=3.0.2.1/24
+ local first_sub=0.2.1/24
+ local second_sub=2.1/24
+ local third_sub=1/24
+ echo '1.2.0 IN  PTR zuri.group3.'
+ reverse_entry gene.group3 3.0.2.2/24
+ local name=gene.group3
+ local subnet=3.0.2.2/24
+ local first_sub=0.2.2/24
+ local second_sub=2.2/24
+ local third_sub=2/24
+ echo '2.2.0 IN  PTR gene.group3.'
+ forward_entry zuri.group3 3.0.2.1/24
+ local name=zuri.group3
+ local subnet=3.0.2.1/24
+ echo 'zuri.group3. IN A 3.0.2.1'
+ forward_entry gene.group3 3.0.2.2/24
+ local name=gene.group3
+ local subnet=3.0.2.2/24
+ echo 'gene.group3. IN A 3.0.2.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=luga
++ subnet_router_router_intern 3 2 1
++ local n_grp=3 n_net=2 device=1
++ '[' 1 = 1 ']'
++ echo 3.0.3.1/24
+ subnet1=3.0.3.1/24
++ subnet_router_router_intern 3 2 2
++ local n_grp=3 n_net=2 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 3.0.3.2/24
+ subnet2=3.0.3.2/24
+ reverse_entry zuri.group3 3.0.3.1/24
+ local name=zuri.group3
+ local subnet=3.0.3.1/24
+ local first_sub=0.3.1/24
+ local second_sub=3.1/24
+ local third_sub=1/24
+ echo '1.3.0 IN  PTR zuri.group3.'
+ reverse_entry luga.group3 3.0.3.2/24
+ local name=luga.group3
+ local subnet=3.0.3.2/24
+ local first_sub=0.3.2/24
+ local second_sub=3.2/24
+ local third_sub=2/24
+ echo '2.3.0 IN  PTR luga.group3.'
+ forward_entry zuri.group3 3.0.3.1/24
+ local name=zuri.group3
+ local subnet=3.0.3.1/24
+ echo 'zuri.group3. IN A 3.0.3.1'
+ forward_entry luga.group3 3.0.3.2/24
+ local name=luga.group3
+ local subnet=3.0.3.2/24
+ echo 'luga.group3. IN A 3.0.3.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=muni
++ subnet_router_router_intern 3 3 1
++ local n_grp=3 n_net=3 device=1
++ '[' 1 = 1 ']'
++ echo 3.0.4.1/24
+ subnet1=3.0.4.1/24
++ subnet_router_router_intern 3 3 2
++ local n_grp=3 n_net=3 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 3.0.4.2/24
+ subnet2=3.0.4.2/24
+ reverse_entry zuri.group3 3.0.4.1/24
+ local name=zuri.group3
+ local subnet=3.0.4.1/24
+ local first_sub=0.4.1/24
+ local second_sub=4.1/24
+ local third_sub=1/24
+ echo '1.4.0 IN  PTR zuri.group3.'
+ reverse_entry muni.group3 3.0.4.2/24
+ local name=muni.group3
+ local subnet=3.0.4.2/24
+ local first_sub=0.4.2/24
+ local second_sub=4.2/24
+ local third_sub=2/24
+ echo '2.4.0 IN  PTR muni.group3.'
+ forward_entry zuri.group3 3.0.4.1/24
+ local name=zuri.group3
+ local subnet=3.0.4.1/24
+ echo 'zuri.group3. IN A 3.0.4.1'
+ forward_entry muni.group3 3.0.4.2/24
+ local name=muni.group3
+ local subnet=3.0.4.2/24
+ echo 'muni.group3. IN A 3.0.4.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=vien
++ subnet_router_router_intern 3 4 1
++ local n_grp=3 n_net=4 device=1
++ '[' 1 = 1 ']'
++ echo 3.0.5.1/24
+ subnet1=3.0.5.1/24
++ subnet_router_router_intern 3 4 2
++ local n_grp=3 n_net=4 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 3.0.5.2/24
+ subnet2=3.0.5.2/24
+ reverse_entry zuri.group3 3.0.5.1/24
+ local name=zuri.group3
+ local subnet=3.0.5.1/24
+ local first_sub=0.5.1/24
+ local second_sub=5.1/24
+ local third_sub=1/24
+ echo '1.5.0 IN  PTR zuri.group3.'
+ reverse_entry vien.group3 3.0.5.2/24
+ local name=vien.group3
+ local subnet=3.0.5.2/24
+ local first_sub=0.5.2/24
+ local second_sub=5.2/24
+ local third_sub=2/24
+ echo '2.5.0 IN  PTR vien.group3.'
+ forward_entry zuri.group3 3.0.5.1/24
+ local name=zuri.group3
+ local subnet=3.0.5.1/24
+ echo 'zuri.group3. IN A 3.0.5.1'
+ forward_entry vien.group3 3.0.5.2/24
+ local name=vien.group3
+ local subnet=3.0.5.2/24
+ echo 'vien.group3. IN A 3.0.5.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=base
+ router2=gene
++ subnet_router_router_intern 3 5 1
++ local n_grp=3 n_net=5 device=1
++ '[' 1 = 1 ']'
++ echo 3.0.6.1/24
+ subnet1=3.0.6.1/24
++ subnet_router_router_intern 3 5 2
++ local n_grp=3 n_net=5 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 3.0.6.2/24
+ subnet2=3.0.6.2/24
+ reverse_entry base.group3 3.0.6.1/24
+ local name=base.group3
+ local subnet=3.0.6.1/24
+ local first_sub=0.6.1/24
+ local second_sub=6.1/24
+ local third_sub=1/24
+ echo '1.6.0 IN  PTR base.group3.'
+ reverse_entry gene.group3 3.0.6.2/24
+ local name=gene.group3
+ local subnet=3.0.6.2/24
+ local first_sub=0.6.2/24
+ local second_sub=6.2/24
+ local third_sub=2/24
+ echo '2.6.0 IN  PTR gene.group3.'
+ forward_entry base.group3 3.0.6.1/24
+ local name=base.group3
+ local subnet=3.0.6.1/24
+ echo 'base.group3. IN A 3.0.6.1'
+ forward_entry gene.group3 3.0.6.2/24
+ local name=gene.group3
+ local subnet=3.0.6.2/24
+ echo 'gene.group3. IN A 3.0.6.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=base
+ router2=muni
++ subnet_router_router_intern 3 6 1
++ local n_grp=3 n_net=6 device=1
++ '[' 1 = 1 ']'
++ echo 3.0.7.1/24
+ subnet1=3.0.7.1/24
++ subnet_router_router_intern 3 6 2
++ local n_grp=3 n_net=6 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 3.0.7.2/24
+ subnet2=3.0.7.2/24
+ reverse_entry base.group3 3.0.7.1/24
+ local name=base.group3
+ local subnet=3.0.7.1/24
+ local first_sub=0.7.1/24
+ local second_sub=7.1/24
+ local third_sub=1/24
+ echo '1.7.0 IN  PTR base.group3.'
+ reverse_entry muni.group3 3.0.7.2/24
+ local name=muni.group3
+ local subnet=3.0.7.2/24
+ local first_sub=0.7.2/24
+ local second_sub=7.2/24
+ local third_sub=2/24
+ echo '2.7.0 IN  PTR muni.group3.'
+ forward_entry base.group3 3.0.7.1/24
+ local name=base.group3
+ local subnet=3.0.7.1/24
+ echo 'base.group3. IN A 3.0.7.1'
+ forward_entry muni.group3 3.0.7.2/24
+ local name=muni.group3
+ local subnet=3.0.7.2/24
+ echo 'muni.group3. IN A 3.0.7.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=base
+ router2=lyon
++ subnet_router_router_intern 3 7 1
++ local n_grp=3 n_net=7 device=1
++ '[' 1 = 1 ']'
++ echo 3.0.8.1/24
+ subnet1=3.0.8.1/24
++ subnet_router_router_intern 3 7 2
++ local n_grp=3 n_net=7 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 3.0.8.2/24
+ subnet2=3.0.8.2/24
+ reverse_entry base.group3 3.0.8.1/24
+ local name=base.group3
+ local subnet=3.0.8.1/24
+ local first_sub=0.8.1/24
+ local second_sub=8.1/24
+ local third_sub=1/24
+ echo '1.8.0 IN  PTR base.group3.'
+ reverse_entry lyon.group3 3.0.8.2/24
+ local name=lyon.group3
+ local subnet=3.0.8.2/24
+ local first_sub=0.8.2/24
+ local second_sub=8.2/24
+ local third_sub=2/24
+ echo '2.8.0 IN  PTR lyon.group3.'
+ forward_entry base.group3 3.0.8.1/24
+ local name=base.group3
+ local subnet=3.0.8.1/24
+ echo 'base.group3. IN A 3.0.8.1'
+ forward_entry lyon.group3 3.0.8.2/24
+ local name=lyon.group3
+ local subnet=3.0.8.2/24
+ echo 'lyon.group3. IN A 3.0.8.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=gene
+ router2=luga
++ subnet_router_router_intern 3 8 1
++ local n_grp=3 n_net=8 device=1
++ '[' 1 = 1 ']'
++ echo 3.0.9.1/24
+ subnet1=3.0.9.1/24
++ subnet_router_router_intern 3 8 2
++ local n_grp=3 n_net=8 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 3.0.9.2/24
+ subnet2=3.0.9.2/24
+ reverse_entry gene.group3 3.0.9.1/24
+ local name=gene.group3
+ local subnet=3.0.9.1/24
+ local first_sub=0.9.1/24
+ local second_sub=9.1/24
+ local third_sub=1/24
+ echo '1.9.0 IN  PTR gene.group3.'
+ reverse_entry luga.group3 3.0.9.2/24
+ local name=luga.group3
+ local subnet=3.0.9.2/24
+ local first_sub=0.9.2/24
+ local second_sub=9.2/24
+ local third_sub=2/24
+ echo '2.9.0 IN  PTR luga.group3.'
+ forward_entry gene.group3 3.0.9.1/24
+ local name=gene.group3
+ local subnet=3.0.9.1/24
+ echo 'gene.group3. IN A 3.0.9.1'
+ forward_entry luga.group3 3.0.9.2/24
+ local name=luga.group3
+ local subnet=3.0.9.2/24
+ echo 'luga.group3. IN A 3.0.9.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=gene
+ router2=lyon
++ subnet_router_router_intern 3 9 1
++ local n_grp=3 n_net=9 device=1
++ '[' 1 = 1 ']'
++ echo 3.0.10.1/24
+ subnet1=3.0.10.1/24
++ subnet_router_router_intern 3 9 2
++ local n_grp=3 n_net=9 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 3.0.10.2/24
+ subnet2=3.0.10.2/24
+ reverse_entry gene.group3 3.0.10.1/24
+ local name=gene.group3
+ local subnet=3.0.10.1/24
+ local first_sub=0.10.1/24
+ local second_sub=10.1/24
+ local third_sub=1/24
+ echo '1.10.0 IN  PTR gene.group3.'
+ reverse_entry lyon.group3 3.0.10.2/24
+ local name=lyon.group3
+ local subnet=3.0.10.2/24
+ local first_sub=0.10.2/24
+ local second_sub=10.2/24
+ local third_sub=2/24
+ echo '2.10.0 IN  PTR lyon.group3.'
+ forward_entry gene.group3 3.0.10.1/24
+ local name=gene.group3
+ local subnet=3.0.10.1/24
+ echo 'gene.group3. IN A 3.0.10.1'
+ forward_entry lyon.group3 3.0.10.2/24
+ local name=lyon.group3
+ local subnet=3.0.10.2/24
+ echo 'lyon.group3. IN A 3.0.10.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=luga
+ router2=mila
++ subnet_router_router_intern 3 10 1
++ local n_grp=3 n_net=10 device=1
++ '[' 1 = 1 ']'
++ echo 3.0.11.1/24
+ subnet1=3.0.11.1/24
++ subnet_router_router_intern 3 10 2
++ local n_grp=3 n_net=10 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 3.0.11.2/24
+ subnet2=3.0.11.2/24
+ reverse_entry luga.group3 3.0.11.1/24
+ local name=luga.group3
+ local subnet=3.0.11.1/24
+ local first_sub=0.11.1/24
+ local second_sub=11.1/24
+ local third_sub=1/24
+ echo '1.11.0 IN  PTR luga.group3.'
+ reverse_entry mila.group3 3.0.11.2/24
+ local name=mila.group3
+ local subnet=3.0.11.2/24
+ local first_sub=0.11.2/24
+ local second_sub=11.2/24
+ local third_sub=2/24
+ echo '2.11.0 IN  PTR mila.group3.'
+ forward_entry luga.group3 3.0.11.1/24
+ local name=luga.group3
+ local subnet=3.0.11.1/24
+ echo 'luga.group3. IN A 3.0.11.1'
+ forward_entry mila.group3 3.0.11.2/24
+ local name=mila.group3
+ local subnet=3.0.11.2/24
+ echo 'mila.group3. IN A 3.0.11.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=luga
+ router2=vien
++ subnet_router_router_intern 3 11 1
++ local n_grp=3 n_net=11 device=1
++ '[' 1 = 1 ']'
++ echo 3.0.12.1/24
+ subnet1=3.0.12.1/24
++ subnet_router_router_intern 3 11 2
++ local n_grp=3 n_net=11 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 3.0.12.2/24
+ subnet2=3.0.12.2/24
+ reverse_entry luga.group3 3.0.12.1/24
+ local name=luga.group3
+ local subnet=3.0.12.1/24
+ local first_sub=0.12.1/24
+ local second_sub=12.1/24
+ local third_sub=1/24
+ echo '1.12.0 IN  PTR luga.group3.'
+ reverse_entry vien.group3 3.0.12.2/24
+ local name=vien.group3
+ local subnet=3.0.12.2/24
+ local first_sub=0.12.2/24
+ local second_sub=12.2/24
+ local third_sub=2/24
+ echo '2.12.0 IN  PTR vien.group3.'
+ forward_entry luga.group3 3.0.12.1/24
+ local name=luga.group3
+ local subnet=3.0.12.1/24
+ echo 'luga.group3. IN A 3.0.12.1'
+ forward_entry vien.group3 3.0.12.2/24
+ local name=vien.group3
+ local subnet=3.0.12.2/24
+ echo 'vien.group3. IN A 3.0.12.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=4
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ domain=group4
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group4
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.4
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=8
+ n_intern_links=12
+ echo ';'
+ echo '; BIND reverse data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@   IN  SOA ns.group4. ns.group4. ('
+ echo '                  4     ; Serial'
+ echo '             604800     ; Refresh'
+ echo '              86400     ; Retry'
+ echo '            2419200     ; Expire'
+ echo '             604800 )   ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '    IN  NS  ns.group4.'
+ echo ''
+ echo ''
+ echo ';'
+ echo '; BIND data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@       IN      SOA     ns.group4. admin.group4. ('
+ echo '                              4         ; Serial'
+ echo '                         604800         ; Refresh'
+ echo '                          86400         ; Retry'
+ echo '                        2419200         ; Expire'
+ echo '                         604800 )       ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '        IN      NS      ns.group4.'
+ echo ''
++ subnet_router_DNS 4 dns-group
++ local n_grp=4 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.4.0.2/24
+ subnet=198.4.0.2/24
+ forward_entry ns.group4 198.4.0.2/24
+ local name=ns.group4
+ local subnet=198.4.0.2/24
+ echo 'ns.group4. IN A 198.4.0.2'
+ echo ''
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 4 0
++ local n_grp=4 n_router=0
++ echo 4.151.0.1/24
+ subnet=4.151.0.1/24
+ forward_entry zuri.group4 4.151.0.1/24
+ local name=zuri.group4
+ local subnet=4.151.0.1/24
+ echo 'zuri.group4. IN A 4.151.0.1'
+ reverse_entry zuri.group4 4.151.0.1/24
+ local name=zuri.group4
+ local subnet=4.151.0.1/24
+ local first_sub=151.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.151 IN  PTR zuri.group4.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 4 0 host
++ local n_grp=4 n_router=0 device=host
++ '[' host = host ']'
++ echo 4.101.0.1/24
+ subnet1=4.101.0.1/24
++ subnet_host_router 4 0 router
++ local n_grp=4 n_router=0 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 4.101.0.2/24
+ subnet2=4.101.0.2/24
+ [[ L2-DCN:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.zuri.group4 4.101.0.1/24
+ local name=host.zuri.group4
+ local subnet=4.101.0.1/24
+ echo 'host.zuri.group4. IN A 4.101.0.1'
+ forward_entry zuri.group4 4.101.0.2/24
+ local name=zuri.group4
+ local subnet=4.101.0.2/24
+ echo 'zuri.group4. IN A 4.101.0.2'
+ reverse_entry host.zuri.group4 4.101.0.1/24
+ local name=host.zuri.group4
+ local subnet=4.101.0.1/24
+ local first_sub=101.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.101 IN  PTR host.zuri.group4.'
+ reverse_entry zuri.group4 4.101.0.2/24
+ local name=zuri.group4
+ local subnet=4.101.0.2/24
+ local first_sub=101.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.101 IN  PTR zuri.group4.'
+ [[ DNS == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=base
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 4 1
++ local n_grp=4 n_router=1
++ echo 4.152.0.1/24
+ subnet=4.152.0.1/24
+ forward_entry base.group4 4.152.0.1/24
+ local name=base.group4
+ local subnet=4.152.0.1/24
+ echo 'base.group4. IN A 4.152.0.1'
+ reverse_entry base.group4 4.152.0.1/24
+ local name=base.group4
+ local subnet=4.152.0.1/24
+ local first_sub=152.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.152 IN  PTR base.group4.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 4 1 host
++ local n_grp=4 n_router=1 device=host
++ '[' host = host ']'
++ echo 4.102.0.1/24
+ subnet1=4.102.0.1/24
++ subnet_host_router 4 1 router
++ local n_grp=4 n_router=1 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 4.102.0.2/24
+ subnet2=4.102.0.2/24
+ [[ L2-DCN:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.base.group4 4.102.0.1/24
+ local name=host.base.group4
+ local subnet=4.102.0.1/24
+ echo 'host.base.group4. IN A 4.102.0.1'
+ forward_entry base.group4 4.102.0.2/24
+ local name=base.group4
+ local subnet=4.102.0.2/24
+ echo 'base.group4. IN A 4.102.0.2'
+ reverse_entry host.base.group4 4.102.0.1/24
+ local name=host.base.group4
+ local subnet=4.102.0.1/24
+ local first_sub=102.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.102 IN  PTR host.base.group4.'
+ reverse_entry base.group4 4.102.0.2/24
+ local name=base.group4
+ local subnet=4.102.0.2/24
+ local first_sub=102.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.102 IN  PTR base.group4.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=gene
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 4 2
++ local n_grp=4 n_router=2
++ echo 4.153.0.1/24
+ subnet=4.153.0.1/24
+ forward_entry gene.group4 4.153.0.1/24
+ local name=gene.group4
+ local subnet=4.153.0.1/24
+ echo 'gene.group4. IN A 4.153.0.1'
+ reverse_entry gene.group4 4.153.0.1/24
+ local name=gene.group4
+ local subnet=4.153.0.1/24
+ local first_sub=153.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.153 IN  PTR gene.group4.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 4 2 host
++ local n_grp=4 n_router=2 device=host
++ '[' host = host ']'
++ echo 4.103.0.1/24
+ subnet1=4.103.0.1/24
++ subnet_host_router 4 2 router
++ local n_grp=4 n_router=2 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 4.103.0.2/24
+ subnet2=4.103.0.2/24
+ [[ L2-DCS:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.gene.group4 4.103.0.1/24
+ local name=host.gene.group4
+ local subnet=4.103.0.1/24
+ echo 'host.gene.group4. IN A 4.103.0.1'
+ forward_entry gene.group4 4.103.0.2/24
+ local name=gene.group4
+ local subnet=4.103.0.2/24
+ echo 'gene.group4. IN A 4.103.0.2'
+ reverse_entry host.gene.group4 4.103.0.1/24
+ local name=host.gene.group4
+ local subnet=4.103.0.1/24
+ local first_sub=103.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.103 IN  PTR host.gene.group4.'
+ reverse_entry gene.group4 4.103.0.2/24
+ local name=gene.group4
+ local subnet=4.103.0.2/24
+ local first_sub=103.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.103 IN  PTR gene.group4.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=luga
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
+ single_router=
+ [[ -z '' ]]
++ subnet_router 4 3
++ local n_grp=4 n_router=3
++ echo 4.154.0.1/24
+ subnet=4.154.0.1/24
+ forward_entry luga.group4 4.154.0.1/24
+ local name=luga.group4
+ local subnet=4.154.0.1/24
+ echo 'luga.group4. IN A 4.154.0.1'
+ reverse_entry luga.group4 4.154.0.1/24
+ local name=luga.group4
+ local subnet=4.154.0.1/24
+ local first_sub=154.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.154 IN  PTR luga.group4.'
+ [[ ! -z miniinterneteth/d_routinator ]]
++ subnet_host_router 4 3 host
++ local n_grp=4 n_router=3 device=host
++ '[' host = host ']'
++ echo 4.104.0.1/24
+ subnet1=4.104.0.1/24
++ subnet_host_router 4 3 router
++ local n_grp=4 n_router=3 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 4.104.0.2/24
+ subnet2=4.104.0.2/24
+ [[ routinator:miniinterneteth/d_routinator == *\k\r\i\l\l* ]]
+ forward_entry host.luga.group4 4.104.0.1/24
+ local name=host.luga.group4
+ local subnet=4.104.0.1/24
+ echo 'host.luga.group4. IN A 4.104.0.1'
+ forward_entry luga.group4 4.104.0.2/24
+ local name=luga.group4
+ local subnet=4.104.0.2/24
+ echo 'luga.group4. IN A 4.104.0.2'
+ reverse_entry host.luga.group4 4.104.0.1/24
+ local name=host.luga.group4
+ local subnet=4.104.0.1/24
+ local first_sub=104.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.104 IN  PTR host.luga.group4.'
+ reverse_entry luga.group4 4.104.0.2/24
+ local name=luga.group4
+ local subnet=4.104.0.2/24
+ local first_sub=104.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.104 IN  PTR luga.group4.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=muni
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 4 4
++ local n_grp=4 n_router=4
++ echo 4.155.0.1/24
+ subnet=4.155.0.1/24
+ forward_entry muni.group4 4.155.0.1/24
+ local name=muni.group4
+ local subnet=4.155.0.1/24
+ echo 'muni.group4. IN A 4.155.0.1'
+ reverse_entry muni.group4 4.155.0.1/24
+ local name=muni.group4
+ local subnet=4.155.0.1/24
+ local first_sub=155.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.155 IN  PTR muni.group4.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 4 4 host
++ local n_grp=4 n_router=4 device=host
++ '[' host = host ']'
++ echo 4.105.0.1/24
+ subnet1=4.105.0.1/24
++ subnet_host_router 4 4 router
++ local n_grp=4 n_router=4 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 4.105.0.2/24
+ subnet2=4.105.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.muni.group4 4.105.0.1/24
+ local name=host.muni.group4
+ local subnet=4.105.0.1/24
+ echo 'host.muni.group4. IN A 4.105.0.1'
+ forward_entry muni.group4 4.105.0.2/24
+ local name=muni.group4
+ local subnet=4.105.0.2/24
+ echo 'muni.group4. IN A 4.105.0.2'
+ reverse_entry host.muni.group4 4.105.0.1/24
+ local name=host.muni.group4
+ local subnet=4.105.0.1/24
+ local first_sub=105.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.105 IN  PTR host.muni.group4.'
+ reverse_entry muni.group4 4.105.0.2/24
+ local name=muni.group4
+ local subnet=4.105.0.2/24
+ local first_sub=105.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.105 IN  PTR muni.group4.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=lyon
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 4 5
++ local n_grp=4 n_router=5
++ echo 4.156.0.1/24
+ subnet=4.156.0.1/24
+ forward_entry lyon.group4 4.156.0.1/24
+ local name=lyon.group4
+ local subnet=4.156.0.1/24
+ echo 'lyon.group4. IN A 4.156.0.1'
+ reverse_entry lyon.group4 4.156.0.1/24
+ local name=lyon.group4
+ local subnet=4.156.0.1/24
+ local first_sub=156.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.156 IN  PTR lyon.group4.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 4 5 host
++ local n_grp=4 n_router=5 device=host
++ '[' host = host ']'
++ echo 4.106.0.1/24
+ subnet1=4.106.0.1/24
++ subnet_host_router 4 5 router
++ local n_grp=4 n_router=5 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 4.106.0.2/24
+ subnet2=4.106.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.lyon.group4 4.106.0.1/24
+ local name=host.lyon.group4
+ local subnet=4.106.0.1/24
+ echo 'host.lyon.group4. IN A 4.106.0.1'
+ forward_entry lyon.group4 4.106.0.2/24
+ local name=lyon.group4
+ local subnet=4.106.0.2/24
+ echo 'lyon.group4. IN A 4.106.0.2'
+ reverse_entry host.lyon.group4 4.106.0.1/24
+ local name=host.lyon.group4
+ local subnet=4.106.0.1/24
+ local first_sub=106.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.106 IN  PTR host.lyon.group4.'
+ reverse_entry lyon.group4 4.106.0.2/24
+ local name=lyon.group4
+ local subnet=4.106.0.2/24
+ local first_sub=106.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.106 IN  PTR lyon.group4.'
+ [[ MATRIX == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=vien
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 4 6
++ local n_grp=4 n_router=6
++ echo 4.157.0.1/24
+ subnet=4.157.0.1/24
+ forward_entry vien.group4 4.157.0.1/24
+ local name=vien.group4
+ local subnet=4.157.0.1/24
+ echo 'vien.group4. IN A 4.157.0.1'
+ reverse_entry vien.group4 4.157.0.1/24
+ local name=vien.group4
+ local subnet=4.157.0.1/24
+ local first_sub=157.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.157 IN  PTR vien.group4.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 4 6 host
++ local n_grp=4 n_router=6 device=host
++ '[' host = host ']'
++ echo 4.107.0.1/24
+ subnet1=4.107.0.1/24
++ subnet_host_router 4 6 router
++ local n_grp=4 n_router=6 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 4.107.0.2/24
+ subnet2=4.107.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.vien.group4 4.107.0.1/24
+ local name=host.vien.group4
+ local subnet=4.107.0.1/24
+ echo 'host.vien.group4. IN A 4.107.0.1'
+ forward_entry vien.group4 4.107.0.2/24
+ local name=vien.group4
+ local subnet=4.107.0.2/24
+ echo 'vien.group4. IN A 4.107.0.2'
+ reverse_entry host.vien.group4 4.107.0.1/24
+ local name=host.vien.group4
+ local subnet=4.107.0.1/24
+ local first_sub=107.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.107 IN  PTR host.vien.group4.'
+ reverse_entry vien.group4 4.107.0.2/24
+ local name=vien.group4
+ local subnet=4.107.0.2/24
+ local first_sub=107.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.107 IN  PTR vien.group4.'
+ [[ MATRIX_TARGET == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=mila
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 4 7
++ local n_grp=4 n_router=7
++ echo 4.158.0.1/24
+ subnet=4.158.0.1/24
+ forward_entry mila.group4 4.158.0.1/24
+ local name=mila.group4
+ local subnet=4.158.0.1/24
+ echo 'mila.group4. IN A 4.158.0.1'
+ reverse_entry mila.group4 4.158.0.1/24
+ local name=mila.group4
+ local subnet=4.158.0.1/24
+ local first_sub=158.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.158 IN  PTR mila.group4.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 4 7 host
++ local n_grp=4 n_router=7 device=host
++ '[' host = host ']'
++ echo 4.108.0.1/24
+ subnet1=4.108.0.1/24
++ subnet_host_router 4 7 router
++ local n_grp=4 n_router=7 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 4.108.0.2/24
+ subnet2=4.108.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.mila.group4 4.108.0.1/24
+ local name=host.mila.group4
+ local subnet=4.108.0.1/24
+ echo 'host.mila.group4. IN A 4.108.0.1'
+ forward_entry mila.group4 4.108.0.2/24
+ local name=mila.group4
+ local subnet=4.108.0.2/24
+ echo 'mila.group4. IN A 4.108.0.2'
+ reverse_entry host.mila.group4 4.108.0.1/24
+ local name=host.mila.group4
+ local subnet=4.108.0.1/24
+ local first_sub=108.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.108 IN  PTR host.mila.group4.'
+ reverse_entry mila.group4 4.108.0.2/24
+ local name=mila.group4
+ local subnet=4.108.0.2/24
+ local first_sub=108.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.108 IN  PTR mila.group4.'
+ [[ MEASUREMENT == \M\E\A\S\U\R\E\M\E\N\T ]]
++ subnet_router_MEASUREMENT 4 group
++ local n_grp=4 device=group
++ '[' group = group ']'
++ echo 4.0.199.1/24
+ m_subnet=4.0.199.1/24
+ forward_entry measurement.mila.group4 4.0.199.1/24
+ local name=measurement.mila.group4
+ local subnet=4.0.199.1/24
+ echo 'measurement.mila.group4. IN A 4.0.199.1'
+ reverse_entry measurement.mila.group4 4.0.199.1/24
+ local name=measurement.mila.group4
+ local subnet=4.0.199.1/24
+ local first_sub=0.199.1/24
+ local second_sub=199.1/24
+ local third_sub=1/24
+ echo '1.199.0 IN  PTR measurement.mila.group4.'
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=base
++ subnet_router_router_intern 4 0 1
++ local n_grp=4 n_net=0 device=1
++ '[' 1 = 1 ']'
++ echo 4.0.1.1/24
+ subnet1=4.0.1.1/24
++ subnet_router_router_intern 4 0 2
++ local n_grp=4 n_net=0 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 4.0.1.2/24
+ subnet2=4.0.1.2/24
+ reverse_entry zuri.group4 4.0.1.1/24
+ local name=zuri.group4
+ local subnet=4.0.1.1/24
+ local first_sub=0.1.1/24
+ local second_sub=1.1/24
+ local third_sub=1/24
+ echo '1.1.0 IN  PTR zuri.group4.'
+ reverse_entry base.group4 4.0.1.2/24
+ local name=base.group4
+ local subnet=4.0.1.2/24
+ local first_sub=0.1.2/24
+ local second_sub=1.2/24
+ local third_sub=2/24
+ echo '2.1.0 IN  PTR base.group4.'
+ forward_entry zuri.group4 4.0.1.1/24
+ local name=zuri.group4
+ local subnet=4.0.1.1/24
+ echo 'zuri.group4. IN A 4.0.1.1'
+ forward_entry base.group4 4.0.1.2/24
+ local name=base.group4
+ local subnet=4.0.1.2/24
+ echo 'base.group4. IN A 4.0.1.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=gene
++ subnet_router_router_intern 4 1 1
++ local n_grp=4 n_net=1 device=1
++ '[' 1 = 1 ']'
++ echo 4.0.2.1/24
+ subnet1=4.0.2.1/24
++ subnet_router_router_intern 4 1 2
++ local n_grp=4 n_net=1 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 4.0.2.2/24
+ subnet2=4.0.2.2/24
+ reverse_entry zuri.group4 4.0.2.1/24
+ local name=zuri.group4
+ local subnet=4.0.2.1/24
+ local first_sub=0.2.1/24
+ local second_sub=2.1/24
+ local third_sub=1/24
+ echo '1.2.0 IN  PTR zuri.group4.'
+ reverse_entry gene.group4 4.0.2.2/24
+ local name=gene.group4
+ local subnet=4.0.2.2/24
+ local first_sub=0.2.2/24
+ local second_sub=2.2/24
+ local third_sub=2/24
+ echo '2.2.0 IN  PTR gene.group4.'
+ forward_entry zuri.group4 4.0.2.1/24
+ local name=zuri.group4
+ local subnet=4.0.2.1/24
+ echo 'zuri.group4. IN A 4.0.2.1'
+ forward_entry gene.group4 4.0.2.2/24
+ local name=gene.group4
+ local subnet=4.0.2.2/24
+ echo 'gene.group4. IN A 4.0.2.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=luga
++ subnet_router_router_intern 4 2 1
++ local n_grp=4 n_net=2 device=1
++ '[' 1 = 1 ']'
++ echo 4.0.3.1/24
+ subnet1=4.0.3.1/24
++ subnet_router_router_intern 4 2 2
++ local n_grp=4 n_net=2 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 4.0.3.2/24
+ subnet2=4.0.3.2/24
+ reverse_entry zuri.group4 4.0.3.1/24
+ local name=zuri.group4
+ local subnet=4.0.3.1/24
+ local first_sub=0.3.1/24
+ local second_sub=3.1/24
+ local third_sub=1/24
+ echo '1.3.0 IN  PTR zuri.group4.'
+ reverse_entry luga.group4 4.0.3.2/24
+ local name=luga.group4
+ local subnet=4.0.3.2/24
+ local first_sub=0.3.2/24
+ local second_sub=3.2/24
+ local third_sub=2/24
+ echo '2.3.0 IN  PTR luga.group4.'
+ forward_entry zuri.group4 4.0.3.1/24
+ local name=zuri.group4
+ local subnet=4.0.3.1/24
+ echo 'zuri.group4. IN A 4.0.3.1'
+ forward_entry luga.group4 4.0.3.2/24
+ local name=luga.group4
+ local subnet=4.0.3.2/24
+ echo 'luga.group4. IN A 4.0.3.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=muni
++ subnet_router_router_intern 4 3 1
++ local n_grp=4 n_net=3 device=1
++ '[' 1 = 1 ']'
++ echo 4.0.4.1/24
+ subnet1=4.0.4.1/24
++ subnet_router_router_intern 4 3 2
++ local n_grp=4 n_net=3 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 4.0.4.2/24
+ subnet2=4.0.4.2/24
+ reverse_entry zuri.group4 4.0.4.1/24
+ local name=zuri.group4
+ local subnet=4.0.4.1/24
+ local first_sub=0.4.1/24
+ local second_sub=4.1/24
+ local third_sub=1/24
+ echo '1.4.0 IN  PTR zuri.group4.'
+ reverse_entry muni.group4 4.0.4.2/24
+ local name=muni.group4
+ local subnet=4.0.4.2/24
+ local first_sub=0.4.2/24
+ local second_sub=4.2/24
+ local third_sub=2/24
+ echo '2.4.0 IN  PTR muni.group4.'
+ forward_entry zuri.group4 4.0.4.1/24
+ local name=zuri.group4
+ local subnet=4.0.4.1/24
+ echo 'zuri.group4. IN A 4.0.4.1'
+ forward_entry muni.group4 4.0.4.2/24
+ local name=muni.group4
+ local subnet=4.0.4.2/24
+ echo 'muni.group4. IN A 4.0.4.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=vien
++ subnet_router_router_intern 4 4 1
++ local n_grp=4 n_net=4 device=1
++ '[' 1 = 1 ']'
++ echo 4.0.5.1/24
+ subnet1=4.0.5.1/24
++ subnet_router_router_intern 4 4 2
++ local n_grp=4 n_net=4 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 4.0.5.2/24
+ subnet2=4.0.5.2/24
+ reverse_entry zuri.group4 4.0.5.1/24
+ local name=zuri.group4
+ local subnet=4.0.5.1/24
+ local first_sub=0.5.1/24
+ local second_sub=5.1/24
+ local third_sub=1/24
+ echo '1.5.0 IN  PTR zuri.group4.'
+ reverse_entry vien.group4 4.0.5.2/24
+ local name=vien.group4
+ local subnet=4.0.5.2/24
+ local first_sub=0.5.2/24
+ local second_sub=5.2/24
+ local third_sub=2/24
+ echo '2.5.0 IN  PTR vien.group4.'
+ forward_entry zuri.group4 4.0.5.1/24
+ local name=zuri.group4
+ local subnet=4.0.5.1/24
+ echo 'zuri.group4. IN A 4.0.5.1'
+ forward_entry vien.group4 4.0.5.2/24
+ local name=vien.group4
+ local subnet=4.0.5.2/24
+ echo 'vien.group4. IN A 4.0.5.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=base
+ router2=gene
++ subnet_router_router_intern 4 5 1
++ local n_grp=4 n_net=5 device=1
++ '[' 1 = 1 ']'
++ echo 4.0.6.1/24
+ subnet1=4.0.6.1/24
++ subnet_router_router_intern 4 5 2
++ local n_grp=4 n_net=5 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 4.0.6.2/24
+ subnet2=4.0.6.2/24
+ reverse_entry base.group4 4.0.6.1/24
+ local name=base.group4
+ local subnet=4.0.6.1/24
+ local first_sub=0.6.1/24
+ local second_sub=6.1/24
+ local third_sub=1/24
+ echo '1.6.0 IN  PTR base.group4.'
+ reverse_entry gene.group4 4.0.6.2/24
+ local name=gene.group4
+ local subnet=4.0.6.2/24
+ local first_sub=0.6.2/24
+ local second_sub=6.2/24
+ local third_sub=2/24
+ echo '2.6.0 IN  PTR gene.group4.'
+ forward_entry base.group4 4.0.6.1/24
+ local name=base.group4
+ local subnet=4.0.6.1/24
+ echo 'base.group4. IN A 4.0.6.1'
+ forward_entry gene.group4 4.0.6.2/24
+ local name=gene.group4
+ local subnet=4.0.6.2/24
+ echo 'gene.group4. IN A 4.0.6.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=base
+ router2=muni
++ subnet_router_router_intern 4 6 1
++ local n_grp=4 n_net=6 device=1
++ '[' 1 = 1 ']'
++ echo 4.0.7.1/24
+ subnet1=4.0.7.1/24
++ subnet_router_router_intern 4 6 2
++ local n_grp=4 n_net=6 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 4.0.7.2/24
+ subnet2=4.0.7.2/24
+ reverse_entry base.group4 4.0.7.1/24
+ local name=base.group4
+ local subnet=4.0.7.1/24
+ local first_sub=0.7.1/24
+ local second_sub=7.1/24
+ local third_sub=1/24
+ echo '1.7.0 IN  PTR base.group4.'
+ reverse_entry muni.group4 4.0.7.2/24
+ local name=muni.group4
+ local subnet=4.0.7.2/24
+ local first_sub=0.7.2/24
+ local second_sub=7.2/24
+ local third_sub=2/24
+ echo '2.7.0 IN  PTR muni.group4.'
+ forward_entry base.group4 4.0.7.1/24
+ local name=base.group4
+ local subnet=4.0.7.1/24
+ echo 'base.group4. IN A 4.0.7.1'
+ forward_entry muni.group4 4.0.7.2/24
+ local name=muni.group4
+ local subnet=4.0.7.2/24
+ echo 'muni.group4. IN A 4.0.7.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=base
+ router2=lyon
++ subnet_router_router_intern 4 7 1
++ local n_grp=4 n_net=7 device=1
++ '[' 1 = 1 ']'
++ echo 4.0.8.1/24
+ subnet1=4.0.8.1/24
++ subnet_router_router_intern 4 7 2
++ local n_grp=4 n_net=7 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 4.0.8.2/24
+ subnet2=4.0.8.2/24
+ reverse_entry base.group4 4.0.8.1/24
+ local name=base.group4
+ local subnet=4.0.8.1/24
+ local first_sub=0.8.1/24
+ local second_sub=8.1/24
+ local third_sub=1/24
+ echo '1.8.0 IN  PTR base.group4.'
+ reverse_entry lyon.group4 4.0.8.2/24
+ local name=lyon.group4
+ local subnet=4.0.8.2/24
+ local first_sub=0.8.2/24
+ local second_sub=8.2/24
+ local third_sub=2/24
+ echo '2.8.0 IN  PTR lyon.group4.'
+ forward_entry base.group4 4.0.8.1/24
+ local name=base.group4
+ local subnet=4.0.8.1/24
+ echo 'base.group4. IN A 4.0.8.1'
+ forward_entry lyon.group4 4.0.8.2/24
+ local name=lyon.group4
+ local subnet=4.0.8.2/24
+ echo 'lyon.group4. IN A 4.0.8.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=gene
+ router2=luga
++ subnet_router_router_intern 4 8 1
++ local n_grp=4 n_net=8 device=1
++ '[' 1 = 1 ']'
++ echo 4.0.9.1/24
+ subnet1=4.0.9.1/24
++ subnet_router_router_intern 4 8 2
++ local n_grp=4 n_net=8 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 4.0.9.2/24
+ subnet2=4.0.9.2/24
+ reverse_entry gene.group4 4.0.9.1/24
+ local name=gene.group4
+ local subnet=4.0.9.1/24
+ local first_sub=0.9.1/24
+ local second_sub=9.1/24
+ local third_sub=1/24
+ echo '1.9.0 IN  PTR gene.group4.'
+ reverse_entry luga.group4 4.0.9.2/24
+ local name=luga.group4
+ local subnet=4.0.9.2/24
+ local first_sub=0.9.2/24
+ local second_sub=9.2/24
+ local third_sub=2/24
+ echo '2.9.0 IN  PTR luga.group4.'
+ forward_entry gene.group4 4.0.9.1/24
+ local name=gene.group4
+ local subnet=4.0.9.1/24
+ echo 'gene.group4. IN A 4.0.9.1'
+ forward_entry luga.group4 4.0.9.2/24
+ local name=luga.group4
+ local subnet=4.0.9.2/24
+ echo 'luga.group4. IN A 4.0.9.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=gene
+ router2=lyon
++ subnet_router_router_intern 4 9 1
++ local n_grp=4 n_net=9 device=1
++ '[' 1 = 1 ']'
++ echo 4.0.10.1/24
+ subnet1=4.0.10.1/24
++ subnet_router_router_intern 4 9 2
++ local n_grp=4 n_net=9 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 4.0.10.2/24
+ subnet2=4.0.10.2/24
+ reverse_entry gene.group4 4.0.10.1/24
+ local name=gene.group4
+ local subnet=4.0.10.1/24
+ local first_sub=0.10.1/24
+ local second_sub=10.1/24
+ local third_sub=1/24
+ echo '1.10.0 IN  PTR gene.group4.'
+ reverse_entry lyon.group4 4.0.10.2/24
+ local name=lyon.group4
+ local subnet=4.0.10.2/24
+ local first_sub=0.10.2/24
+ local second_sub=10.2/24
+ local third_sub=2/24
+ echo '2.10.0 IN  PTR lyon.group4.'
+ forward_entry gene.group4 4.0.10.1/24
+ local name=gene.group4
+ local subnet=4.0.10.1/24
+ echo 'gene.group4. IN A 4.0.10.1'
+ forward_entry lyon.group4 4.0.10.2/24
+ local name=lyon.group4
+ local subnet=4.0.10.2/24
+ echo 'lyon.group4. IN A 4.0.10.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=luga
+ router2=mila
++ subnet_router_router_intern 4 10 1
++ local n_grp=4 n_net=10 device=1
++ '[' 1 = 1 ']'
++ echo 4.0.11.1/24
+ subnet1=4.0.11.1/24
++ subnet_router_router_intern 4 10 2
++ local n_grp=4 n_net=10 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 4.0.11.2/24
+ subnet2=4.0.11.2/24
+ reverse_entry luga.group4 4.0.11.1/24
+ local name=luga.group4
+ local subnet=4.0.11.1/24
+ local first_sub=0.11.1/24
+ local second_sub=11.1/24
+ local third_sub=1/24
+ echo '1.11.0 IN  PTR luga.group4.'
+ reverse_entry mila.group4 4.0.11.2/24
+ local name=mila.group4
+ local subnet=4.0.11.2/24
+ local first_sub=0.11.2/24
+ local second_sub=11.2/24
+ local third_sub=2/24
+ echo '2.11.0 IN  PTR mila.group4.'
+ forward_entry luga.group4 4.0.11.1/24
+ local name=luga.group4
+ local subnet=4.0.11.1/24
+ echo 'luga.group4. IN A 4.0.11.1'
+ forward_entry mila.group4 4.0.11.2/24
+ local name=mila.group4
+ local subnet=4.0.11.2/24
+ echo 'mila.group4. IN A 4.0.11.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=luga
+ router2=vien
++ subnet_router_router_intern 4 11 1
++ local n_grp=4 n_net=11 device=1
++ '[' 1 = 1 ']'
++ echo 4.0.12.1/24
+ subnet1=4.0.12.1/24
++ subnet_router_router_intern 4 11 2
++ local n_grp=4 n_net=11 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 4.0.12.2/24
+ subnet2=4.0.12.2/24
+ reverse_entry luga.group4 4.0.12.1/24
+ local name=luga.group4
+ local subnet=4.0.12.1/24
+ local first_sub=0.12.1/24
+ local second_sub=12.1/24
+ local third_sub=1/24
+ echo '1.12.0 IN  PTR luga.group4.'
+ reverse_entry vien.group4 4.0.12.2/24
+ local name=vien.group4
+ local subnet=4.0.12.2/24
+ local first_sub=0.12.2/24
+ local second_sub=12.2/24
+ local third_sub=2/24
+ echo '2.12.0 IN  PTR vien.group4.'
+ forward_entry luga.group4 4.0.12.1/24
+ local name=luga.group4
+ local subnet=4.0.12.1/24
+ echo 'luga.group4. IN A 4.0.12.1'
+ forward_entry vien.group4 4.0.12.2/24
+ local name=vien.group4
+ local subnet=4.0.12.2/24
+ echo 'vien.group4. IN A 4.0.12.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=5
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ domain=group5
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group5
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.5
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo ';'
+ echo '; BIND reverse data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@   IN  SOA ns.group5. ns.group5. ('
+ echo '                  5     ; Serial'
+ echo '             604800     ; Refresh'
+ echo '              86400     ; Retry'
+ echo '            2419200     ; Expire'
+ echo '             604800 )   ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '    IN  NS  ns.group5.'
+ echo ''
+ echo ''
+ echo ';'
+ echo '; BIND data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@       IN      SOA     ns.group5. admin.group5. ('
+ echo '                              5         ; Serial'
+ echo '                         604800         ; Refresh'
+ echo '                          86400         ; Retry'
+ echo '                        2419200         ; Expire'
+ echo '                         604800 )       ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '        IN      NS      ns.group5.'
+ echo ''
++ subnet_router_DNS 5 dns-group
++ local n_grp=5 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.5.0.2/24
+ subnet=198.5.0.2/24
+ forward_entry ns.group5 198.5.0.2/24
+ local name=ns.group5
+ local subnet=198.5.0.2/24
+ echo 'ns.group5. IN A 198.5.0.2'
+ echo ''
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 0 == \0 ]]
++ subnet_router 5 0
++ local n_grp=5 n_router=0
++ echo 5.151.0.1/24
+ subnet=5.151.0.1/24
+ forward_entry zuri.group5 5.151.0.1/24
+ local name=zuri.group5
+ local subnet=5.151.0.1/24
+ echo 'zuri.group5. IN A 5.151.0.1'
+ reverse_entry zuri.group5 5.151.0.1/24
+ local name=zuri.group5
+ local subnet=5.151.0.1/24
+ local first_sub=151.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.151 IN  PTR zuri.group5.'
+ [[ ! -z miniinterneteth/d_routinator ]]
++ subnet_host_router 5 0 host
++ local n_grp=5 n_router=0 device=host
++ '[' host = host ']'
++ echo 5.101.0.1/24
+ subnet1=5.101.0.1/24
++ subnet_host_router 5 0 router
++ local n_grp=5 n_router=0 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 5.101.0.2/24
+ subnet2=5.101.0.2/24
+ [[ routinator:miniinterneteth/d_routinator == *\k\r\i\l\l* ]]
+ forward_entry host.zuri.group5 5.101.0.1/24
+ local name=host.zuri.group5
+ local subnet=5.101.0.1/24
+ echo 'host.zuri.group5. IN A 5.101.0.1'
+ forward_entry zuri.group5 5.101.0.2/24
+ local name=zuri.group5
+ local subnet=5.101.0.2/24
+ echo 'zuri.group5. IN A 5.101.0.2'
+ reverse_entry host.zuri.group5 5.101.0.1/24
+ local name=host.zuri.group5
+ local subnet=5.101.0.1/24
+ local first_sub=101.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.101 IN  PTR host.zuri.group5.'
+ reverse_entry zuri.group5 5.101.0.2/24
+ local name=zuri.group5
+ local subnet=5.101.0.2/24
+ local first_sub=101.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.101 IN  PTR zuri.group5.'
+ [[ MATRIX_TARGET == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 1 == \0 ]]
+ [[ ! -z '' ]]
+ [[ DNS == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 2 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MATRIX == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 3 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MEASUREMENT == \M\E\A\S\U\R\E\M\E\N\T ]]
++ subnet_router_MEASUREMENT 5 group
++ local n_grp=5 device=group
++ '[' group = group ']'
++ echo 5.0.199.1/24
+ m_subnet=5.0.199.1/24
+ forward_entry measurement.zuri.group5 5.0.199.1/24
+ local name=measurement.zuri.group5
+ local subnet=5.0.199.1/24
+ echo 'measurement.zuri.group5. IN A 5.0.199.1'
+ reverse_entry measurement.zuri.group5 5.0.199.1/24
+ local name=measurement.zuri.group5
+ local subnet=5.0.199.1/24
+ local first_sub=0.199.1/24
+ local second_sub=199.1/24
+ local third_sub=1/24
+ echo '1.199.0 IN  PTR measurement.zuri.group5.'
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_intern_links ))
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=6
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ domain=group6
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group6
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.6
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo ';'
+ echo '; BIND reverse data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@   IN  SOA ns.group6. ns.group6. ('
+ echo '                  6     ; Serial'
+ echo '             604800     ; Refresh'
+ echo '              86400     ; Retry'
+ echo '            2419200     ; Expire'
+ echo '             604800 )   ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '    IN  NS  ns.group6.'
+ echo ''
+ echo ''
+ echo ';'
+ echo '; BIND data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@       IN      SOA     ns.group6. admin.group6. ('
+ echo '                              6         ; Serial'
+ echo '                         604800         ; Refresh'
+ echo '                          86400         ; Retry'
+ echo '                        2419200         ; Expire'
+ echo '                         604800 )       ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '        IN      NS      ns.group6.'
+ echo ''
++ subnet_router_DNS 6 dns-group
++ local n_grp=6 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.6.0.2/24
+ subnet=198.6.0.2/24
+ forward_entry ns.group6 198.6.0.2/24
+ local name=ns.group6
+ local subnet=198.6.0.2/24
+ echo 'ns.group6. IN A 198.6.0.2'
+ echo ''
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 0 == \0 ]]
++ subnet_router 6 0
++ local n_grp=6 n_router=0
++ echo 6.151.0.1/24
+ subnet=6.151.0.1/24
+ forward_entry zuri.group6 6.151.0.1/24
+ local name=zuri.group6
+ local subnet=6.151.0.1/24
+ echo 'zuri.group6. IN A 6.151.0.1'
+ reverse_entry zuri.group6 6.151.0.1/24
+ local name=zuri.group6
+ local subnet=6.151.0.1/24
+ local first_sub=151.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.151 IN  PTR zuri.group6.'
+ [[ ! -z miniinterneteth/d_routinator ]]
++ subnet_host_router 6 0 host
++ local n_grp=6 n_router=0 device=host
++ '[' host = host ']'
++ echo 6.101.0.1/24
+ subnet1=6.101.0.1/24
++ subnet_host_router 6 0 router
++ local n_grp=6 n_router=0 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 6.101.0.2/24
+ subnet2=6.101.0.2/24
+ [[ routinator:miniinterneteth/d_routinator == *\k\r\i\l\l* ]]
+ forward_entry host.zuri.group6 6.101.0.1/24
+ local name=host.zuri.group6
+ local subnet=6.101.0.1/24
+ echo 'host.zuri.group6. IN A 6.101.0.1'
+ forward_entry zuri.group6 6.101.0.2/24
+ local name=zuri.group6
+ local subnet=6.101.0.2/24
+ echo 'zuri.group6. IN A 6.101.0.2'
+ reverse_entry host.zuri.group6 6.101.0.1/24
+ local name=host.zuri.group6
+ local subnet=6.101.0.1/24
+ local first_sub=101.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.101 IN  PTR host.zuri.group6.'
+ reverse_entry zuri.group6 6.101.0.2/24
+ local name=zuri.group6
+ local subnet=6.101.0.2/24
+ local first_sub=101.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.101 IN  PTR zuri.group6.'
+ [[ MATRIX_TARGET == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 1 == \0 ]]
+ [[ ! -z '' ]]
+ [[ DNS == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 2 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MATRIX == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 3 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MEASUREMENT == \M\E\A\S\U\R\E\M\E\N\T ]]
++ subnet_router_MEASUREMENT 6 group
++ local n_grp=6 device=group
++ '[' group = group ']'
++ echo 6.0.199.1/24
+ m_subnet=6.0.199.1/24
+ forward_entry measurement.zuri.group6 6.0.199.1/24
+ local name=measurement.zuri.group6
+ local subnet=6.0.199.1/24
+ echo 'measurement.zuri.group6. IN A 6.0.199.1'
+ reverse_entry measurement.zuri.group6 6.0.199.1/24
+ local name=measurement.zuri.group6
+ local subnet=6.0.199.1/24
+ local first_sub=0.199.1/24
+ local second_sub=199.1/24
+ local third_sub=1/24
+ echo '1.199.0 IN  PTR measurement.zuri.group6.'
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_intern_links ))
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=11
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ domain=group11
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group11
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.11
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo ';'
+ echo '; BIND reverse data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@   IN  SOA ns.group11. ns.group11. ('
+ echo '                  11     ; Serial'
+ echo '             604800     ; Refresh'
+ echo '              86400     ; Retry'
+ echo '            2419200     ; Expire'
+ echo '             604800 )   ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '    IN  NS  ns.group11.'
+ echo ''
+ echo ''
+ echo ';'
+ echo '; BIND data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@       IN      SOA     ns.group11. admin.group11. ('
+ echo '                              11         ; Serial'
+ echo '                         604800         ; Refresh'
+ echo '                          86400         ; Retry'
+ echo '                        2419200         ; Expire'
+ echo '                         604800 )       ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '        IN      NS      ns.group11.'
+ echo ''
++ subnet_router_DNS 11 dns-group
++ local n_grp=11 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.11.0.2/24
+ subnet=198.11.0.2/24
+ forward_entry ns.group11 198.11.0.2/24
+ local name=ns.group11
+ local subnet=198.11.0.2/24
+ echo 'ns.group11. IN A 198.11.0.2'
+ echo ''
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 0 == \0 ]]
++ subnet_router 11 0
++ local n_grp=11 n_router=0
++ echo 11.151.0.1/24
+ subnet=11.151.0.1/24
+ forward_entry zuri.group11 11.151.0.1/24
+ local name=zuri.group11
+ local subnet=11.151.0.1/24
+ echo 'zuri.group11. IN A 11.151.0.1'
+ reverse_entry zuri.group11 11.151.0.1/24
+ local name=zuri.group11
+ local subnet=11.151.0.1/24
+ local first_sub=151.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.151 IN  PTR zuri.group11.'
+ [[ ! -z miniinterneteth/d_routinator ]]
++ subnet_host_router 11 0 host
++ local n_grp=11 n_router=0 device=host
++ '[' host = host ']'
++ echo 11.101.0.1/24
+ subnet1=11.101.0.1/24
++ subnet_host_router 11 0 router
++ local n_grp=11 n_router=0 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 11.101.0.2/24
+ subnet2=11.101.0.2/24
+ [[ routinator:miniinterneteth/d_routinator == *\k\r\i\l\l* ]]
+ forward_entry host.zuri.group11 11.101.0.1/24
+ local name=host.zuri.group11
+ local subnet=11.101.0.1/24
+ echo 'host.zuri.group11. IN A 11.101.0.1'
+ forward_entry zuri.group11 11.101.0.2/24
+ local name=zuri.group11
+ local subnet=11.101.0.2/24
+ echo 'zuri.group11. IN A 11.101.0.2'
+ reverse_entry host.zuri.group11 11.101.0.1/24
+ local name=host.zuri.group11
+ local subnet=11.101.0.1/24
+ local first_sub=101.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.101 IN  PTR host.zuri.group11.'
+ reverse_entry zuri.group11 11.101.0.2/24
+ local name=zuri.group11
+ local subnet=11.101.0.2/24
+ local first_sub=101.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.101 IN  PTR zuri.group11.'
+ [[ MATRIX_TARGET == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 1 == \0 ]]
+ [[ ! -z '' ]]
+ [[ DNS == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 2 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MATRIX == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 3 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MEASUREMENT == \M\E\A\S\U\R\E\M\E\N\T ]]
++ subnet_router_MEASUREMENT 11 group
++ local n_grp=11 device=group
++ '[' group = group ']'
++ echo 11.0.199.1/24
+ m_subnet=11.0.199.1/24
+ forward_entry measurement.zuri.group11 11.0.199.1/24
+ local name=measurement.zuri.group11
+ local subnet=11.0.199.1/24
+ echo 'measurement.zuri.group11. IN A 11.0.199.1'
+ reverse_entry measurement.zuri.group11 11.0.199.1/24
+ local name=measurement.zuri.group11
+ local subnet=11.0.199.1/24
+ local first_sub=0.199.1/24
+ local second_sub=199.1/24
+ local third_sub=1/24
+ echo '1.199.0 IN  PTR measurement.zuri.group11.'
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_intern_links ))
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=12
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ domain=group12
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group12
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.12
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo ';'
+ echo '; BIND reverse data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@   IN  SOA ns.group12. ns.group12. ('
+ echo '                  12     ; Serial'
+ echo '             604800     ; Refresh'
+ echo '              86400     ; Retry'
+ echo '            2419200     ; Expire'
+ echo '             604800 )   ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '    IN  NS  ns.group12.'
+ echo ''
+ echo ''
+ echo ';'
+ echo '; BIND data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@       IN      SOA     ns.group12. admin.group12. ('
+ echo '                              12         ; Serial'
+ echo '                         604800         ; Refresh'
+ echo '                          86400         ; Retry'
+ echo '                        2419200         ; Expire'
+ echo '                         604800 )       ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '        IN      NS      ns.group12.'
+ echo ''
++ subnet_router_DNS 12 dns-group
++ local n_grp=12 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.12.0.2/24
+ subnet=198.12.0.2/24
+ forward_entry ns.group12 198.12.0.2/24
+ local name=ns.group12
+ local subnet=198.12.0.2/24
+ echo 'ns.group12. IN A 198.12.0.2'
+ echo ''
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 0 == \0 ]]
++ subnet_router 12 0
++ local n_grp=12 n_router=0
++ echo 12.151.0.1/24
+ subnet=12.151.0.1/24
+ forward_entry zuri.group12 12.151.0.1/24
+ local name=zuri.group12
+ local subnet=12.151.0.1/24
+ echo 'zuri.group12. IN A 12.151.0.1'
+ reverse_entry zuri.group12 12.151.0.1/24
+ local name=zuri.group12
+ local subnet=12.151.0.1/24
+ local first_sub=151.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.151 IN  PTR zuri.group12.'
+ [[ ! -z miniinterneteth/d_routinator ]]
++ subnet_host_router 12 0 host
++ local n_grp=12 n_router=0 device=host
++ '[' host = host ']'
++ echo 12.101.0.1/24
+ subnet1=12.101.0.1/24
++ subnet_host_router 12 0 router
++ local n_grp=12 n_router=0 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 12.101.0.2/24
+ subnet2=12.101.0.2/24
+ [[ routinator:miniinterneteth/d_routinator == *\k\r\i\l\l* ]]
+ forward_entry host.zuri.group12 12.101.0.1/24
+ local name=host.zuri.group12
+ local subnet=12.101.0.1/24
+ echo 'host.zuri.group12. IN A 12.101.0.1'
+ forward_entry zuri.group12 12.101.0.2/24
+ local name=zuri.group12
+ local subnet=12.101.0.2/24
+ echo 'zuri.group12. IN A 12.101.0.2'
+ reverse_entry host.zuri.group12 12.101.0.1/24
+ local name=host.zuri.group12
+ local subnet=12.101.0.1/24
+ local first_sub=101.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.101 IN  PTR host.zuri.group12.'
+ reverse_entry zuri.group12 12.101.0.2/24
+ local name=zuri.group12
+ local subnet=12.101.0.2/24
+ local first_sub=101.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.101 IN  PTR zuri.group12.'
+ [[ MATRIX_TARGET == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 1 == \0 ]]
+ [[ ! -z '' ]]
+ [[ DNS == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 2 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MATRIX == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 3 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MEASUREMENT == \M\E\A\S\U\R\E\M\E\N\T ]]
++ subnet_router_MEASUREMENT 12 group
++ local n_grp=12 device=group
++ '[' group = group ']'
++ echo 12.0.199.1/24
+ m_subnet=12.0.199.1/24
+ forward_entry measurement.zuri.group12 12.0.199.1/24
+ local name=measurement.zuri.group12
+ local subnet=12.0.199.1/24
+ echo 'measurement.zuri.group12. IN A 12.0.199.1'
+ reverse_entry measurement.zuri.group12 12.0.199.1/24
+ local name=measurement.zuri.group12
+ local subnet=12.0.199.1/24
+ local first_sub=0.199.1/24
+ local second_sub=199.1/24
+ local third_sub=1/24
+ echo '1.199.0 IN  PTR measurement.zuri.group12.'
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_intern_links ))
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=13
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ domain=group13
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group13
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.13
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=8
+ n_intern_links=12
+ echo ';'
+ echo '; BIND reverse data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@   IN  SOA ns.group13. ns.group13. ('
+ echo '                  13     ; Serial'
+ echo '             604800     ; Refresh'
+ echo '              86400     ; Retry'
+ echo '            2419200     ; Expire'
+ echo '             604800 )   ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '    IN  NS  ns.group13.'
+ echo ''
+ echo ''
+ echo ';'
+ echo '; BIND data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@       IN      SOA     ns.group13. admin.group13. ('
+ echo '                              13         ; Serial'
+ echo '                         604800         ; Refresh'
+ echo '                          86400         ; Retry'
+ echo '                        2419200         ; Expire'
+ echo '                         604800 )       ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '        IN      NS      ns.group13.'
+ echo ''
++ subnet_router_DNS 13 dns-group
++ local n_grp=13 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.13.0.2/24
+ subnet=198.13.0.2/24
+ forward_entry ns.group13 198.13.0.2/24
+ local name=ns.group13
+ local subnet=198.13.0.2/24
+ echo 'ns.group13. IN A 198.13.0.2'
+ echo ''
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 13 0
++ local n_grp=13 n_router=0
++ echo 13.151.0.1/24
+ subnet=13.151.0.1/24
+ forward_entry zuri.group13 13.151.0.1/24
+ local name=zuri.group13
+ local subnet=13.151.0.1/24
+ echo 'zuri.group13. IN A 13.151.0.1'
+ reverse_entry zuri.group13 13.151.0.1/24
+ local name=zuri.group13
+ local subnet=13.151.0.1/24
+ local first_sub=151.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.151 IN  PTR zuri.group13.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 13 0 host
++ local n_grp=13 n_router=0 device=host
++ '[' host = host ']'
++ echo 13.101.0.1/24
+ subnet1=13.101.0.1/24
++ subnet_host_router 13 0 router
++ local n_grp=13 n_router=0 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 13.101.0.2/24
+ subnet2=13.101.0.2/24
+ [[ L2-DCN:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.zuri.group13 13.101.0.1/24
+ local name=host.zuri.group13
+ local subnet=13.101.0.1/24
+ echo 'host.zuri.group13. IN A 13.101.0.1'
+ forward_entry zuri.group13 13.101.0.2/24
+ local name=zuri.group13
+ local subnet=13.101.0.2/24
+ echo 'zuri.group13. IN A 13.101.0.2'
+ reverse_entry host.zuri.group13 13.101.0.1/24
+ local name=host.zuri.group13
+ local subnet=13.101.0.1/24
+ local first_sub=101.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.101 IN  PTR host.zuri.group13.'
+ reverse_entry zuri.group13 13.101.0.2/24
+ local name=zuri.group13
+ local subnet=13.101.0.2/24
+ local first_sub=101.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.101 IN  PTR zuri.group13.'
+ [[ DNS == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=base
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 13 1
++ local n_grp=13 n_router=1
++ echo 13.152.0.1/24
+ subnet=13.152.0.1/24
+ forward_entry base.group13 13.152.0.1/24
+ local name=base.group13
+ local subnet=13.152.0.1/24
+ echo 'base.group13. IN A 13.152.0.1'
+ reverse_entry base.group13 13.152.0.1/24
+ local name=base.group13
+ local subnet=13.152.0.1/24
+ local first_sub=152.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.152 IN  PTR base.group13.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 13 1 host
++ local n_grp=13 n_router=1 device=host
++ '[' host = host ']'
++ echo 13.102.0.1/24
+ subnet1=13.102.0.1/24
++ subnet_host_router 13 1 router
++ local n_grp=13 n_router=1 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 13.102.0.2/24
+ subnet2=13.102.0.2/24
+ [[ L2-DCN:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.base.group13 13.102.0.1/24
+ local name=host.base.group13
+ local subnet=13.102.0.1/24
+ echo 'host.base.group13. IN A 13.102.0.1'
+ forward_entry base.group13 13.102.0.2/24
+ local name=base.group13
+ local subnet=13.102.0.2/24
+ echo 'base.group13. IN A 13.102.0.2'
+ reverse_entry host.base.group13 13.102.0.1/24
+ local name=host.base.group13
+ local subnet=13.102.0.1/24
+ local first_sub=102.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.102 IN  PTR host.base.group13.'
+ reverse_entry base.group13 13.102.0.2/24
+ local name=base.group13
+ local subnet=13.102.0.2/24
+ local first_sub=102.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.102 IN  PTR base.group13.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=gene
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 13 2
++ local n_grp=13 n_router=2
++ echo 13.153.0.1/24
+ subnet=13.153.0.1/24
+ forward_entry gene.group13 13.153.0.1/24
+ local name=gene.group13
+ local subnet=13.153.0.1/24
+ echo 'gene.group13. IN A 13.153.0.1'
+ reverse_entry gene.group13 13.153.0.1/24
+ local name=gene.group13
+ local subnet=13.153.0.1/24
+ local first_sub=153.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.153 IN  PTR gene.group13.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 13 2 host
++ local n_grp=13 n_router=2 device=host
++ '[' host = host ']'
++ echo 13.103.0.1/24
+ subnet1=13.103.0.1/24
++ subnet_host_router 13 2 router
++ local n_grp=13 n_router=2 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 13.103.0.2/24
+ subnet2=13.103.0.2/24
+ [[ L2-DCS:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.gene.group13 13.103.0.1/24
+ local name=host.gene.group13
+ local subnet=13.103.0.1/24
+ echo 'host.gene.group13. IN A 13.103.0.1'
+ forward_entry gene.group13 13.103.0.2/24
+ local name=gene.group13
+ local subnet=13.103.0.2/24
+ echo 'gene.group13. IN A 13.103.0.2'
+ reverse_entry host.gene.group13 13.103.0.1/24
+ local name=host.gene.group13
+ local subnet=13.103.0.1/24
+ local first_sub=103.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.103 IN  PTR host.gene.group13.'
+ reverse_entry gene.group13 13.103.0.2/24
+ local name=gene.group13
+ local subnet=13.103.0.2/24
+ local first_sub=103.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.103 IN  PTR gene.group13.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=luga
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
+ single_router=
+ [[ -z '' ]]
++ subnet_router 13 3
++ local n_grp=13 n_router=3
++ echo 13.154.0.1/24
+ subnet=13.154.0.1/24
+ forward_entry luga.group13 13.154.0.1/24
+ local name=luga.group13
+ local subnet=13.154.0.1/24
+ echo 'luga.group13. IN A 13.154.0.1'
+ reverse_entry luga.group13 13.154.0.1/24
+ local name=luga.group13
+ local subnet=13.154.0.1/24
+ local first_sub=154.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.154 IN  PTR luga.group13.'
+ [[ ! -z miniinterneteth/d_routinator ]]
++ subnet_host_router 13 3 host
++ local n_grp=13 n_router=3 device=host
++ '[' host = host ']'
++ echo 13.104.0.1/24
+ subnet1=13.104.0.1/24
++ subnet_host_router 13 3 router
++ local n_grp=13 n_router=3 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 13.104.0.2/24
+ subnet2=13.104.0.2/24
+ [[ routinator:miniinterneteth/d_routinator == *\k\r\i\l\l* ]]
+ forward_entry host.luga.group13 13.104.0.1/24
+ local name=host.luga.group13
+ local subnet=13.104.0.1/24
+ echo 'host.luga.group13. IN A 13.104.0.1'
+ forward_entry luga.group13 13.104.0.2/24
+ local name=luga.group13
+ local subnet=13.104.0.2/24
+ echo 'luga.group13. IN A 13.104.0.2'
+ reverse_entry host.luga.group13 13.104.0.1/24
+ local name=host.luga.group13
+ local subnet=13.104.0.1/24
+ local first_sub=104.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.104 IN  PTR host.luga.group13.'
+ reverse_entry luga.group13 13.104.0.2/24
+ local name=luga.group13
+ local subnet=13.104.0.2/24
+ local first_sub=104.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.104 IN  PTR luga.group13.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=muni
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 13 4
++ local n_grp=13 n_router=4
++ echo 13.155.0.1/24
+ subnet=13.155.0.1/24
+ forward_entry muni.group13 13.155.0.1/24
+ local name=muni.group13
+ local subnet=13.155.0.1/24
+ echo 'muni.group13. IN A 13.155.0.1'
+ reverse_entry muni.group13 13.155.0.1/24
+ local name=muni.group13
+ local subnet=13.155.0.1/24
+ local first_sub=155.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.155 IN  PTR muni.group13.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 13 4 host
++ local n_grp=13 n_router=4 device=host
++ '[' host = host ']'
++ echo 13.105.0.1/24
+ subnet1=13.105.0.1/24
++ subnet_host_router 13 4 router
++ local n_grp=13 n_router=4 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 13.105.0.2/24
+ subnet2=13.105.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.muni.group13 13.105.0.1/24
+ local name=host.muni.group13
+ local subnet=13.105.0.1/24
+ echo 'host.muni.group13. IN A 13.105.0.1'
+ forward_entry muni.group13 13.105.0.2/24
+ local name=muni.group13
+ local subnet=13.105.0.2/24
+ echo 'muni.group13. IN A 13.105.0.2'
+ reverse_entry host.muni.group13 13.105.0.1/24
+ local name=host.muni.group13
+ local subnet=13.105.0.1/24
+ local first_sub=105.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.105 IN  PTR host.muni.group13.'
+ reverse_entry muni.group13 13.105.0.2/24
+ local name=muni.group13
+ local subnet=13.105.0.2/24
+ local first_sub=105.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.105 IN  PTR muni.group13.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=lyon
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 13 5
++ local n_grp=13 n_router=5
++ echo 13.156.0.1/24
+ subnet=13.156.0.1/24
+ forward_entry lyon.group13 13.156.0.1/24
+ local name=lyon.group13
+ local subnet=13.156.0.1/24
+ echo 'lyon.group13. IN A 13.156.0.1'
+ reverse_entry lyon.group13 13.156.0.1/24
+ local name=lyon.group13
+ local subnet=13.156.0.1/24
+ local first_sub=156.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.156 IN  PTR lyon.group13.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 13 5 host
++ local n_grp=13 n_router=5 device=host
++ '[' host = host ']'
++ echo 13.106.0.1/24
+ subnet1=13.106.0.1/24
++ subnet_host_router 13 5 router
++ local n_grp=13 n_router=5 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 13.106.0.2/24
+ subnet2=13.106.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.lyon.group13 13.106.0.1/24
+ local name=host.lyon.group13
+ local subnet=13.106.0.1/24
+ echo 'host.lyon.group13. IN A 13.106.0.1'
+ forward_entry lyon.group13 13.106.0.2/24
+ local name=lyon.group13
+ local subnet=13.106.0.2/24
+ echo 'lyon.group13. IN A 13.106.0.2'
+ reverse_entry host.lyon.group13 13.106.0.1/24
+ local name=host.lyon.group13
+ local subnet=13.106.0.1/24
+ local first_sub=106.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.106 IN  PTR host.lyon.group13.'
+ reverse_entry lyon.group13 13.106.0.2/24
+ local name=lyon.group13
+ local subnet=13.106.0.2/24
+ local first_sub=106.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.106 IN  PTR lyon.group13.'
+ [[ MATRIX == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=vien
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 13 6
++ local n_grp=13 n_router=6
++ echo 13.157.0.1/24
+ subnet=13.157.0.1/24
+ forward_entry vien.group13 13.157.0.1/24
+ local name=vien.group13
+ local subnet=13.157.0.1/24
+ echo 'vien.group13. IN A 13.157.0.1'
+ reverse_entry vien.group13 13.157.0.1/24
+ local name=vien.group13
+ local subnet=13.157.0.1/24
+ local first_sub=157.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.157 IN  PTR vien.group13.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 13 6 host
++ local n_grp=13 n_router=6 device=host
++ '[' host = host ']'
++ echo 13.107.0.1/24
+ subnet1=13.107.0.1/24
++ subnet_host_router 13 6 router
++ local n_grp=13 n_router=6 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 13.107.0.2/24
+ subnet2=13.107.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.vien.group13 13.107.0.1/24
+ local name=host.vien.group13
+ local subnet=13.107.0.1/24
+ echo 'host.vien.group13. IN A 13.107.0.1'
+ forward_entry vien.group13 13.107.0.2/24
+ local name=vien.group13
+ local subnet=13.107.0.2/24
+ echo 'vien.group13. IN A 13.107.0.2'
+ reverse_entry host.vien.group13 13.107.0.1/24
+ local name=host.vien.group13
+ local subnet=13.107.0.1/24
+ local first_sub=107.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.107 IN  PTR host.vien.group13.'
+ reverse_entry vien.group13 13.107.0.2/24
+ local name=vien.group13
+ local subnet=13.107.0.2/24
+ local first_sub=107.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.107 IN  PTR vien.group13.'
+ [[ MATRIX_TARGET == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=mila
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 13 7
++ local n_grp=13 n_router=7
++ echo 13.158.0.1/24
+ subnet=13.158.0.1/24
+ forward_entry mila.group13 13.158.0.1/24
+ local name=mila.group13
+ local subnet=13.158.0.1/24
+ echo 'mila.group13. IN A 13.158.0.1'
+ reverse_entry mila.group13 13.158.0.1/24
+ local name=mila.group13
+ local subnet=13.158.0.1/24
+ local first_sub=158.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.158 IN  PTR mila.group13.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 13 7 host
++ local n_grp=13 n_router=7 device=host
++ '[' host = host ']'
++ echo 13.108.0.1/24
+ subnet1=13.108.0.1/24
++ subnet_host_router 13 7 router
++ local n_grp=13 n_router=7 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 13.108.0.2/24
+ subnet2=13.108.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.mila.group13 13.108.0.1/24
+ local name=host.mila.group13
+ local subnet=13.108.0.1/24
+ echo 'host.mila.group13. IN A 13.108.0.1'
+ forward_entry mila.group13 13.108.0.2/24
+ local name=mila.group13
+ local subnet=13.108.0.2/24
+ echo 'mila.group13. IN A 13.108.0.2'
+ reverse_entry host.mila.group13 13.108.0.1/24
+ local name=host.mila.group13
+ local subnet=13.108.0.1/24
+ local first_sub=108.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.108 IN  PTR host.mila.group13.'
+ reverse_entry mila.group13 13.108.0.2/24
+ local name=mila.group13
+ local subnet=13.108.0.2/24
+ local first_sub=108.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.108 IN  PTR mila.group13.'
+ [[ MEASUREMENT == \M\E\A\S\U\R\E\M\E\N\T ]]
++ subnet_router_MEASUREMENT 13 group
++ local n_grp=13 device=group
++ '[' group = group ']'
++ echo 13.0.199.1/24
+ m_subnet=13.0.199.1/24
+ forward_entry measurement.mila.group13 13.0.199.1/24
+ local name=measurement.mila.group13
+ local subnet=13.0.199.1/24
+ echo 'measurement.mila.group13. IN A 13.0.199.1'
+ reverse_entry measurement.mila.group13 13.0.199.1/24
+ local name=measurement.mila.group13
+ local subnet=13.0.199.1/24
+ local first_sub=0.199.1/24
+ local second_sub=199.1/24
+ local third_sub=1/24
+ echo '1.199.0 IN  PTR measurement.mila.group13.'
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=base
++ subnet_router_router_intern 13 0 1
++ local n_grp=13 n_net=0 device=1
++ '[' 1 = 1 ']'
++ echo 13.0.1.1/24
+ subnet1=13.0.1.1/24
++ subnet_router_router_intern 13 0 2
++ local n_grp=13 n_net=0 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 13.0.1.2/24
+ subnet2=13.0.1.2/24
+ reverse_entry zuri.group13 13.0.1.1/24
+ local name=zuri.group13
+ local subnet=13.0.1.1/24
+ local first_sub=0.1.1/24
+ local second_sub=1.1/24
+ local third_sub=1/24
+ echo '1.1.0 IN  PTR zuri.group13.'
+ reverse_entry base.group13 13.0.1.2/24
+ local name=base.group13
+ local subnet=13.0.1.2/24
+ local first_sub=0.1.2/24
+ local second_sub=1.2/24
+ local third_sub=2/24
+ echo '2.1.0 IN  PTR base.group13.'
+ forward_entry zuri.group13 13.0.1.1/24
+ local name=zuri.group13
+ local subnet=13.0.1.1/24
+ echo 'zuri.group13. IN A 13.0.1.1'
+ forward_entry base.group13 13.0.1.2/24
+ local name=base.group13
+ local subnet=13.0.1.2/24
+ echo 'base.group13. IN A 13.0.1.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=gene
++ subnet_router_router_intern 13 1 1
++ local n_grp=13 n_net=1 device=1
++ '[' 1 = 1 ']'
++ echo 13.0.2.1/24
+ subnet1=13.0.2.1/24
++ subnet_router_router_intern 13 1 2
++ local n_grp=13 n_net=1 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 13.0.2.2/24
+ subnet2=13.0.2.2/24
+ reverse_entry zuri.group13 13.0.2.1/24
+ local name=zuri.group13
+ local subnet=13.0.2.1/24
+ local first_sub=0.2.1/24
+ local second_sub=2.1/24
+ local third_sub=1/24
+ echo '1.2.0 IN  PTR zuri.group13.'
+ reverse_entry gene.group13 13.0.2.2/24
+ local name=gene.group13
+ local subnet=13.0.2.2/24
+ local first_sub=0.2.2/24
+ local second_sub=2.2/24
+ local third_sub=2/24
+ echo '2.2.0 IN  PTR gene.group13.'
+ forward_entry zuri.group13 13.0.2.1/24
+ local name=zuri.group13
+ local subnet=13.0.2.1/24
+ echo 'zuri.group13. IN A 13.0.2.1'
+ forward_entry gene.group13 13.0.2.2/24
+ local name=gene.group13
+ local subnet=13.0.2.2/24
+ echo 'gene.group13. IN A 13.0.2.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=luga
++ subnet_router_router_intern 13 2 1
++ local n_grp=13 n_net=2 device=1
++ '[' 1 = 1 ']'
++ echo 13.0.3.1/24
+ subnet1=13.0.3.1/24
++ subnet_router_router_intern 13 2 2
++ local n_grp=13 n_net=2 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 13.0.3.2/24
+ subnet2=13.0.3.2/24
+ reverse_entry zuri.group13 13.0.3.1/24
+ local name=zuri.group13
+ local subnet=13.0.3.1/24
+ local first_sub=0.3.1/24
+ local second_sub=3.1/24
+ local third_sub=1/24
+ echo '1.3.0 IN  PTR zuri.group13.'
+ reverse_entry luga.group13 13.0.3.2/24
+ local name=luga.group13
+ local subnet=13.0.3.2/24
+ local first_sub=0.3.2/24
+ local second_sub=3.2/24
+ local third_sub=2/24
+ echo '2.3.0 IN  PTR luga.group13.'
+ forward_entry zuri.group13 13.0.3.1/24
+ local name=zuri.group13
+ local subnet=13.0.3.1/24
+ echo 'zuri.group13. IN A 13.0.3.1'
+ forward_entry luga.group13 13.0.3.2/24
+ local name=luga.group13
+ local subnet=13.0.3.2/24
+ echo 'luga.group13. IN A 13.0.3.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=muni
++ subnet_router_router_intern 13 3 1
++ local n_grp=13 n_net=3 device=1
++ '[' 1 = 1 ']'
++ echo 13.0.4.1/24
+ subnet1=13.0.4.1/24
++ subnet_router_router_intern 13 3 2
++ local n_grp=13 n_net=3 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 13.0.4.2/24
+ subnet2=13.0.4.2/24
+ reverse_entry zuri.group13 13.0.4.1/24
+ local name=zuri.group13
+ local subnet=13.0.4.1/24
+ local first_sub=0.4.1/24
+ local second_sub=4.1/24
+ local third_sub=1/24
+ echo '1.4.0 IN  PTR zuri.group13.'
+ reverse_entry muni.group13 13.0.4.2/24
+ local name=muni.group13
+ local subnet=13.0.4.2/24
+ local first_sub=0.4.2/24
+ local second_sub=4.2/24
+ local third_sub=2/24
+ echo '2.4.0 IN  PTR muni.group13.'
+ forward_entry zuri.group13 13.0.4.1/24
+ local name=zuri.group13
+ local subnet=13.0.4.1/24
+ echo 'zuri.group13. IN A 13.0.4.1'
+ forward_entry muni.group13 13.0.4.2/24
+ local name=muni.group13
+ local subnet=13.0.4.2/24
+ echo 'muni.group13. IN A 13.0.4.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=vien
++ subnet_router_router_intern 13 4 1
++ local n_grp=13 n_net=4 device=1
++ '[' 1 = 1 ']'
++ echo 13.0.5.1/24
+ subnet1=13.0.5.1/24
++ subnet_router_router_intern 13 4 2
++ local n_grp=13 n_net=4 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 13.0.5.2/24
+ subnet2=13.0.5.2/24
+ reverse_entry zuri.group13 13.0.5.1/24
+ local name=zuri.group13
+ local subnet=13.0.5.1/24
+ local first_sub=0.5.1/24
+ local second_sub=5.1/24
+ local third_sub=1/24
+ echo '1.5.0 IN  PTR zuri.group13.'
+ reverse_entry vien.group13 13.0.5.2/24
+ local name=vien.group13
+ local subnet=13.0.5.2/24
+ local first_sub=0.5.2/24
+ local second_sub=5.2/24
+ local third_sub=2/24
+ echo '2.5.0 IN  PTR vien.group13.'
+ forward_entry zuri.group13 13.0.5.1/24
+ local name=zuri.group13
+ local subnet=13.0.5.1/24
+ echo 'zuri.group13. IN A 13.0.5.1'
+ forward_entry vien.group13 13.0.5.2/24
+ local name=vien.group13
+ local subnet=13.0.5.2/24
+ echo 'vien.group13. IN A 13.0.5.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=base
+ router2=gene
++ subnet_router_router_intern 13 5 1
++ local n_grp=13 n_net=5 device=1
++ '[' 1 = 1 ']'
++ echo 13.0.6.1/24
+ subnet1=13.0.6.1/24
++ subnet_router_router_intern 13 5 2
++ local n_grp=13 n_net=5 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 13.0.6.2/24
+ subnet2=13.0.6.2/24
+ reverse_entry base.group13 13.0.6.1/24
+ local name=base.group13
+ local subnet=13.0.6.1/24
+ local first_sub=0.6.1/24
+ local second_sub=6.1/24
+ local third_sub=1/24
+ echo '1.6.0 IN  PTR base.group13.'
+ reverse_entry gene.group13 13.0.6.2/24
+ local name=gene.group13
+ local subnet=13.0.6.2/24
+ local first_sub=0.6.2/24
+ local second_sub=6.2/24
+ local third_sub=2/24
+ echo '2.6.0 IN  PTR gene.group13.'
+ forward_entry base.group13 13.0.6.1/24
+ local name=base.group13
+ local subnet=13.0.6.1/24
+ echo 'base.group13. IN A 13.0.6.1'
+ forward_entry gene.group13 13.0.6.2/24
+ local name=gene.group13
+ local subnet=13.0.6.2/24
+ echo 'gene.group13. IN A 13.0.6.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=base
+ router2=muni
++ subnet_router_router_intern 13 6 1
++ local n_grp=13 n_net=6 device=1
++ '[' 1 = 1 ']'
++ echo 13.0.7.1/24
+ subnet1=13.0.7.1/24
++ subnet_router_router_intern 13 6 2
++ local n_grp=13 n_net=6 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 13.0.7.2/24
+ subnet2=13.0.7.2/24
+ reverse_entry base.group13 13.0.7.1/24
+ local name=base.group13
+ local subnet=13.0.7.1/24
+ local first_sub=0.7.1/24
+ local second_sub=7.1/24
+ local third_sub=1/24
+ echo '1.7.0 IN  PTR base.group13.'
+ reverse_entry muni.group13 13.0.7.2/24
+ local name=muni.group13
+ local subnet=13.0.7.2/24
+ local first_sub=0.7.2/24
+ local second_sub=7.2/24
+ local third_sub=2/24
+ echo '2.7.0 IN  PTR muni.group13.'
+ forward_entry base.group13 13.0.7.1/24
+ local name=base.group13
+ local subnet=13.0.7.1/24
+ echo 'base.group13. IN A 13.0.7.1'
+ forward_entry muni.group13 13.0.7.2/24
+ local name=muni.group13
+ local subnet=13.0.7.2/24
+ echo 'muni.group13. IN A 13.0.7.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=base
+ router2=lyon
++ subnet_router_router_intern 13 7 1
++ local n_grp=13 n_net=7 device=1
++ '[' 1 = 1 ']'
++ echo 13.0.8.1/24
+ subnet1=13.0.8.1/24
++ subnet_router_router_intern 13 7 2
++ local n_grp=13 n_net=7 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 13.0.8.2/24
+ subnet2=13.0.8.2/24
+ reverse_entry base.group13 13.0.8.1/24
+ local name=base.group13
+ local subnet=13.0.8.1/24
+ local first_sub=0.8.1/24
+ local second_sub=8.1/24
+ local third_sub=1/24
+ echo '1.8.0 IN  PTR base.group13.'
+ reverse_entry lyon.group13 13.0.8.2/24
+ local name=lyon.group13
+ local subnet=13.0.8.2/24
+ local first_sub=0.8.2/24
+ local second_sub=8.2/24
+ local third_sub=2/24
+ echo '2.8.0 IN  PTR lyon.group13.'
+ forward_entry base.group13 13.0.8.1/24
+ local name=base.group13
+ local subnet=13.0.8.1/24
+ echo 'base.group13. IN A 13.0.8.1'
+ forward_entry lyon.group13 13.0.8.2/24
+ local name=lyon.group13
+ local subnet=13.0.8.2/24
+ echo 'lyon.group13. IN A 13.0.8.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=gene
+ router2=luga
++ subnet_router_router_intern 13 8 1
++ local n_grp=13 n_net=8 device=1
++ '[' 1 = 1 ']'
++ echo 13.0.9.1/24
+ subnet1=13.0.9.1/24
++ subnet_router_router_intern 13 8 2
++ local n_grp=13 n_net=8 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 13.0.9.2/24
+ subnet2=13.0.9.2/24
+ reverse_entry gene.group13 13.0.9.1/24
+ local name=gene.group13
+ local subnet=13.0.9.1/24
+ local first_sub=0.9.1/24
+ local second_sub=9.1/24
+ local third_sub=1/24
+ echo '1.9.0 IN  PTR gene.group13.'
+ reverse_entry luga.group13 13.0.9.2/24
+ local name=luga.group13
+ local subnet=13.0.9.2/24
+ local first_sub=0.9.2/24
+ local second_sub=9.2/24
+ local third_sub=2/24
+ echo '2.9.0 IN  PTR luga.group13.'
+ forward_entry gene.group13 13.0.9.1/24
+ local name=gene.group13
+ local subnet=13.0.9.1/24
+ echo 'gene.group13. IN A 13.0.9.1'
+ forward_entry luga.group13 13.0.9.2/24
+ local name=luga.group13
+ local subnet=13.0.9.2/24
+ echo 'luga.group13. IN A 13.0.9.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=gene
+ router2=lyon
++ subnet_router_router_intern 13 9 1
++ local n_grp=13 n_net=9 device=1
++ '[' 1 = 1 ']'
++ echo 13.0.10.1/24
+ subnet1=13.0.10.1/24
++ subnet_router_router_intern 13 9 2
++ local n_grp=13 n_net=9 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 13.0.10.2/24
+ subnet2=13.0.10.2/24
+ reverse_entry gene.group13 13.0.10.1/24
+ local name=gene.group13
+ local subnet=13.0.10.1/24
+ local first_sub=0.10.1/24
+ local second_sub=10.1/24
+ local third_sub=1/24
+ echo '1.10.0 IN  PTR gene.group13.'
+ reverse_entry lyon.group13 13.0.10.2/24
+ local name=lyon.group13
+ local subnet=13.0.10.2/24
+ local first_sub=0.10.2/24
+ local second_sub=10.2/24
+ local third_sub=2/24
+ echo '2.10.0 IN  PTR lyon.group13.'
+ forward_entry gene.group13 13.0.10.1/24
+ local name=gene.group13
+ local subnet=13.0.10.1/24
+ echo 'gene.group13. IN A 13.0.10.1'
+ forward_entry lyon.group13 13.0.10.2/24
+ local name=lyon.group13
+ local subnet=13.0.10.2/24
+ echo 'lyon.group13. IN A 13.0.10.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=luga
+ router2=mila
++ subnet_router_router_intern 13 10 1
++ local n_grp=13 n_net=10 device=1
++ '[' 1 = 1 ']'
++ echo 13.0.11.1/24
+ subnet1=13.0.11.1/24
++ subnet_router_router_intern 13 10 2
++ local n_grp=13 n_net=10 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 13.0.11.2/24
+ subnet2=13.0.11.2/24
+ reverse_entry luga.group13 13.0.11.1/24
+ local name=luga.group13
+ local subnet=13.0.11.1/24
+ local first_sub=0.11.1/24
+ local second_sub=11.1/24
+ local third_sub=1/24
+ echo '1.11.0 IN  PTR luga.group13.'
+ reverse_entry mila.group13 13.0.11.2/24
+ local name=mila.group13
+ local subnet=13.0.11.2/24
+ local first_sub=0.11.2/24
+ local second_sub=11.2/24
+ local third_sub=2/24
+ echo '2.11.0 IN  PTR mila.group13.'
+ forward_entry luga.group13 13.0.11.1/24
+ local name=luga.group13
+ local subnet=13.0.11.1/24
+ echo 'luga.group13. IN A 13.0.11.1'
+ forward_entry mila.group13 13.0.11.2/24
+ local name=mila.group13
+ local subnet=13.0.11.2/24
+ echo 'mila.group13. IN A 13.0.11.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=luga
+ router2=vien
++ subnet_router_router_intern 13 11 1
++ local n_grp=13 n_net=11 device=1
++ '[' 1 = 1 ']'
++ echo 13.0.12.1/24
+ subnet1=13.0.12.1/24
++ subnet_router_router_intern 13 11 2
++ local n_grp=13 n_net=11 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 13.0.12.2/24
+ subnet2=13.0.12.2/24
+ reverse_entry luga.group13 13.0.12.1/24
+ local name=luga.group13
+ local subnet=13.0.12.1/24
+ local first_sub=0.12.1/24
+ local second_sub=12.1/24
+ local third_sub=1/24
+ echo '1.12.0 IN  PTR luga.group13.'
+ reverse_entry vien.group13 13.0.12.2/24
+ local name=vien.group13
+ local subnet=13.0.12.2/24
+ local first_sub=0.12.2/24
+ local second_sub=12.2/24
+ local third_sub=2/24
+ echo '2.12.0 IN  PTR vien.group13.'
+ forward_entry luga.group13 13.0.12.1/24
+ local name=luga.group13
+ local subnet=13.0.12.1/24
+ echo 'luga.group13. IN A 13.0.12.1'
+ forward_entry vien.group13 13.0.12.2/24
+ local name=vien.group13
+ local subnet=13.0.12.2/24
+ echo 'vien.group13. IN A 13.0.12.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=14
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ domain=group14
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group14
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.14
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=8
+ n_intern_links=12
+ echo ';'
+ echo '; BIND reverse data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@   IN  SOA ns.group14. ns.group14. ('
+ echo '                  14     ; Serial'
+ echo '             604800     ; Refresh'
+ echo '              86400     ; Retry'
+ echo '            2419200     ; Expire'
+ echo '             604800 )   ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '    IN  NS  ns.group14.'
+ echo ''
+ echo ''
+ echo ';'
+ echo '; BIND data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@       IN      SOA     ns.group14. admin.group14. ('
+ echo '                              14         ; Serial'
+ echo '                         604800         ; Refresh'
+ echo '                          86400         ; Retry'
+ echo '                        2419200         ; Expire'
+ echo '                         604800 )       ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '        IN      NS      ns.group14.'
+ echo ''
++ subnet_router_DNS 14 dns-group
++ local n_grp=14 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.14.0.2/24
+ subnet=198.14.0.2/24
+ forward_entry ns.group14 198.14.0.2/24
+ local name=ns.group14
+ local subnet=198.14.0.2/24
+ echo 'ns.group14. IN A 198.14.0.2'
+ echo ''
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 14 0
++ local n_grp=14 n_router=0
++ echo 14.151.0.1/24
+ subnet=14.151.0.1/24
+ forward_entry zuri.group14 14.151.0.1/24
+ local name=zuri.group14
+ local subnet=14.151.0.1/24
+ echo 'zuri.group14. IN A 14.151.0.1'
+ reverse_entry zuri.group14 14.151.0.1/24
+ local name=zuri.group14
+ local subnet=14.151.0.1/24
+ local first_sub=151.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.151 IN  PTR zuri.group14.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 14 0 host
++ local n_grp=14 n_router=0 device=host
++ '[' host = host ']'
++ echo 14.101.0.1/24
+ subnet1=14.101.0.1/24
++ subnet_host_router 14 0 router
++ local n_grp=14 n_router=0 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 14.101.0.2/24
+ subnet2=14.101.0.2/24
+ [[ L2-DCN:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.zuri.group14 14.101.0.1/24
+ local name=host.zuri.group14
+ local subnet=14.101.0.1/24
+ echo 'host.zuri.group14. IN A 14.101.0.1'
+ forward_entry zuri.group14 14.101.0.2/24
+ local name=zuri.group14
+ local subnet=14.101.0.2/24
+ echo 'zuri.group14. IN A 14.101.0.2'
+ reverse_entry host.zuri.group14 14.101.0.1/24
+ local name=host.zuri.group14
+ local subnet=14.101.0.1/24
+ local first_sub=101.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.101 IN  PTR host.zuri.group14.'
+ reverse_entry zuri.group14 14.101.0.2/24
+ local name=zuri.group14
+ local subnet=14.101.0.2/24
+ local first_sub=101.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.101 IN  PTR zuri.group14.'
+ [[ DNS == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=base
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 14 1
++ local n_grp=14 n_router=1
++ echo 14.152.0.1/24
+ subnet=14.152.0.1/24
+ forward_entry base.group14 14.152.0.1/24
+ local name=base.group14
+ local subnet=14.152.0.1/24
+ echo 'base.group14. IN A 14.152.0.1'
+ reverse_entry base.group14 14.152.0.1/24
+ local name=base.group14
+ local subnet=14.152.0.1/24
+ local first_sub=152.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.152 IN  PTR base.group14.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 14 1 host
++ local n_grp=14 n_router=1 device=host
++ '[' host = host ']'
++ echo 14.102.0.1/24
+ subnet1=14.102.0.1/24
++ subnet_host_router 14 1 router
++ local n_grp=14 n_router=1 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 14.102.0.2/24
+ subnet2=14.102.0.2/24
+ [[ L2-DCN:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.base.group14 14.102.0.1/24
+ local name=host.base.group14
+ local subnet=14.102.0.1/24
+ echo 'host.base.group14. IN A 14.102.0.1'
+ forward_entry base.group14 14.102.0.2/24
+ local name=base.group14
+ local subnet=14.102.0.2/24
+ echo 'base.group14. IN A 14.102.0.2'
+ reverse_entry host.base.group14 14.102.0.1/24
+ local name=host.base.group14
+ local subnet=14.102.0.1/24
+ local first_sub=102.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.102 IN  PTR host.base.group14.'
+ reverse_entry base.group14 14.102.0.2/24
+ local name=base.group14
+ local subnet=14.102.0.2/24
+ local first_sub=102.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.102 IN  PTR base.group14.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=gene
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 14 2
++ local n_grp=14 n_router=2
++ echo 14.153.0.1/24
+ subnet=14.153.0.1/24
+ forward_entry gene.group14 14.153.0.1/24
+ local name=gene.group14
+ local subnet=14.153.0.1/24
+ echo 'gene.group14. IN A 14.153.0.1'
+ reverse_entry gene.group14 14.153.0.1/24
+ local name=gene.group14
+ local subnet=14.153.0.1/24
+ local first_sub=153.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.153 IN  PTR gene.group14.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 14 2 host
++ local n_grp=14 n_router=2 device=host
++ '[' host = host ']'
++ echo 14.103.0.1/24
+ subnet1=14.103.0.1/24
++ subnet_host_router 14 2 router
++ local n_grp=14 n_router=2 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 14.103.0.2/24
+ subnet2=14.103.0.2/24
+ [[ L2-DCS:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.gene.group14 14.103.0.1/24
+ local name=host.gene.group14
+ local subnet=14.103.0.1/24
+ echo 'host.gene.group14. IN A 14.103.0.1'
+ forward_entry gene.group14 14.103.0.2/24
+ local name=gene.group14
+ local subnet=14.103.0.2/24
+ echo 'gene.group14. IN A 14.103.0.2'
+ reverse_entry host.gene.group14 14.103.0.1/24
+ local name=host.gene.group14
+ local subnet=14.103.0.1/24
+ local first_sub=103.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.103 IN  PTR host.gene.group14.'
+ reverse_entry gene.group14 14.103.0.2/24
+ local name=gene.group14
+ local subnet=14.103.0.2/24
+ local first_sub=103.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.103 IN  PTR gene.group14.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=luga
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
+ single_router=
+ [[ -z '' ]]
++ subnet_router 14 3
++ local n_grp=14 n_router=3
++ echo 14.154.0.1/24
+ subnet=14.154.0.1/24
+ forward_entry luga.group14 14.154.0.1/24
+ local name=luga.group14
+ local subnet=14.154.0.1/24
+ echo 'luga.group14. IN A 14.154.0.1'
+ reverse_entry luga.group14 14.154.0.1/24
+ local name=luga.group14
+ local subnet=14.154.0.1/24
+ local first_sub=154.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.154 IN  PTR luga.group14.'
+ [[ ! -z miniinterneteth/d_routinator ]]
++ subnet_host_router 14 3 host
++ local n_grp=14 n_router=3 device=host
++ '[' host = host ']'
++ echo 14.104.0.1/24
+ subnet1=14.104.0.1/24
++ subnet_host_router 14 3 router
++ local n_grp=14 n_router=3 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 14.104.0.2/24
+ subnet2=14.104.0.2/24
+ [[ routinator:miniinterneteth/d_routinator == *\k\r\i\l\l* ]]
+ forward_entry host.luga.group14 14.104.0.1/24
+ local name=host.luga.group14
+ local subnet=14.104.0.1/24
+ echo 'host.luga.group14. IN A 14.104.0.1'
+ forward_entry luga.group14 14.104.0.2/24
+ local name=luga.group14
+ local subnet=14.104.0.2/24
+ echo 'luga.group14. IN A 14.104.0.2'
+ reverse_entry host.luga.group14 14.104.0.1/24
+ local name=host.luga.group14
+ local subnet=14.104.0.1/24
+ local first_sub=104.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.104 IN  PTR host.luga.group14.'
+ reverse_entry luga.group14 14.104.0.2/24
+ local name=luga.group14
+ local subnet=14.104.0.2/24
+ local first_sub=104.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.104 IN  PTR luga.group14.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=muni
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 14 4
++ local n_grp=14 n_router=4
++ echo 14.155.0.1/24
+ subnet=14.155.0.1/24
+ forward_entry muni.group14 14.155.0.1/24
+ local name=muni.group14
+ local subnet=14.155.0.1/24
+ echo 'muni.group14. IN A 14.155.0.1'
+ reverse_entry muni.group14 14.155.0.1/24
+ local name=muni.group14
+ local subnet=14.155.0.1/24
+ local first_sub=155.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.155 IN  PTR muni.group14.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 14 4 host
++ local n_grp=14 n_router=4 device=host
++ '[' host = host ']'
++ echo 14.105.0.1/24
+ subnet1=14.105.0.1/24
++ subnet_host_router 14 4 router
++ local n_grp=14 n_router=4 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 14.105.0.2/24
+ subnet2=14.105.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.muni.group14 14.105.0.1/24
+ local name=host.muni.group14
+ local subnet=14.105.0.1/24
+ echo 'host.muni.group14. IN A 14.105.0.1'
+ forward_entry muni.group14 14.105.0.2/24
+ local name=muni.group14
+ local subnet=14.105.0.2/24
+ echo 'muni.group14. IN A 14.105.0.2'
+ reverse_entry host.muni.group14 14.105.0.1/24
+ local name=host.muni.group14
+ local subnet=14.105.0.1/24
+ local first_sub=105.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.105 IN  PTR host.muni.group14.'
+ reverse_entry muni.group14 14.105.0.2/24
+ local name=muni.group14
+ local subnet=14.105.0.2/24
+ local first_sub=105.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.105 IN  PTR muni.group14.'
+ [[ N/A == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=lyon
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 14 5
++ local n_grp=14 n_router=5
++ echo 14.156.0.1/24
+ subnet=14.156.0.1/24
+ forward_entry lyon.group14 14.156.0.1/24
+ local name=lyon.group14
+ local subnet=14.156.0.1/24
+ echo 'lyon.group14. IN A 14.156.0.1'
+ reverse_entry lyon.group14 14.156.0.1/24
+ local name=lyon.group14
+ local subnet=14.156.0.1/24
+ local first_sub=156.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.156 IN  PTR lyon.group14.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 14 5 host
++ local n_grp=14 n_router=5 device=host
++ '[' host = host ']'
++ echo 14.106.0.1/24
+ subnet1=14.106.0.1/24
++ subnet_host_router 14 5 router
++ local n_grp=14 n_router=5 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 14.106.0.2/24
+ subnet2=14.106.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.lyon.group14 14.106.0.1/24
+ local name=host.lyon.group14
+ local subnet=14.106.0.1/24
+ echo 'host.lyon.group14. IN A 14.106.0.1'
+ forward_entry lyon.group14 14.106.0.2/24
+ local name=lyon.group14
+ local subnet=14.106.0.2/24
+ echo 'lyon.group14. IN A 14.106.0.2'
+ reverse_entry host.lyon.group14 14.106.0.1/24
+ local name=host.lyon.group14
+ local subnet=14.106.0.1/24
+ local first_sub=106.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.106 IN  PTR host.lyon.group14.'
+ reverse_entry lyon.group14 14.106.0.2/24
+ local name=lyon.group14
+ local subnet=14.106.0.2/24
+ local first_sub=106.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.106 IN  PTR lyon.group14.'
+ [[ MATRIX == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=vien
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 14 6
++ local n_grp=14 n_router=6
++ echo 14.157.0.1/24
+ subnet=14.157.0.1/24
+ forward_entry vien.group14 14.157.0.1/24
+ local name=vien.group14
+ local subnet=14.157.0.1/24
+ echo 'vien.group14. IN A 14.157.0.1'
+ reverse_entry vien.group14 14.157.0.1/24
+ local name=vien.group14
+ local subnet=14.157.0.1/24
+ local first_sub=157.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.157 IN  PTR vien.group14.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 14 6 host
++ local n_grp=14 n_router=6 device=host
++ '[' host = host ']'
++ echo 14.107.0.1/24
+ subnet1=14.107.0.1/24
++ subnet_host_router 14 6 router
++ local n_grp=14 n_router=6 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 14.107.0.2/24
+ subnet2=14.107.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.vien.group14 14.107.0.1/24
+ local name=host.vien.group14
+ local subnet=14.107.0.1/24
+ echo 'host.vien.group14. IN A 14.107.0.1'
+ forward_entry vien.group14 14.107.0.2/24
+ local name=vien.group14
+ local subnet=14.107.0.2/24
+ echo 'vien.group14. IN A 14.107.0.2'
+ reverse_entry host.vien.group14 14.107.0.1/24
+ local name=host.vien.group14
+ local subnet=14.107.0.1/24
+ local first_sub=107.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.107 IN  PTR host.vien.group14.'
+ reverse_entry vien.group14 14.107.0.2/24
+ local name=vien.group14
+ local subnet=14.107.0.2/24
+ local first_sub=107.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.107 IN  PTR vien.group14.'
+ [[ MATRIX_TARGET == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=mila
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
+ single_router=
+ [[ -z '' ]]
++ subnet_router 14 7
++ local n_grp=14 n_router=7
++ echo 14.158.0.1/24
+ subnet=14.158.0.1/24
+ forward_entry mila.group14 14.158.0.1/24
+ local name=mila.group14
+ local subnet=14.158.0.1/24
+ echo 'mila.group14. IN A 14.158.0.1'
+ reverse_entry mila.group14 14.158.0.1/24
+ local name=mila.group14
+ local subnet=14.158.0.1/24
+ local first_sub=158.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.158 IN  PTR mila.group14.'
+ [[ ! -z miniinterneteth/d_host ]]
++ subnet_host_router 14 7 host
++ local n_grp=14 n_router=7 device=host
++ '[' host = host ']'
++ echo 14.108.0.1/24
+ subnet1=14.108.0.1/24
++ subnet_host_router 14 7 router
++ local n_grp=14 n_router=7 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 14.108.0.2/24
+ subnet2=14.108.0.2/24
+ [[ host:miniinterneteth/d_host == *\k\r\i\l\l* ]]
+ forward_entry host.mila.group14 14.108.0.1/24
+ local name=host.mila.group14
+ local subnet=14.108.0.1/24
+ echo 'host.mila.group14. IN A 14.108.0.1'
+ forward_entry mila.group14 14.108.0.2/24
+ local name=mila.group14
+ local subnet=14.108.0.2/24
+ echo 'mila.group14. IN A 14.108.0.2'
+ reverse_entry host.mila.group14 14.108.0.1/24
+ local name=host.mila.group14
+ local subnet=14.108.0.1/24
+ local first_sub=108.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.108 IN  PTR host.mila.group14.'
+ reverse_entry mila.group14 14.108.0.2/24
+ local name=mila.group14
+ local subnet=14.108.0.2/24
+ local first_sub=108.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.108 IN  PTR mila.group14.'
+ [[ MEASUREMENT == \M\E\A\S\U\R\E\M\E\N\T ]]
++ subnet_router_MEASUREMENT 14 group
++ local n_grp=14 device=group
++ '[' group = group ']'
++ echo 14.0.199.1/24
+ m_subnet=14.0.199.1/24
+ forward_entry measurement.mila.group14 14.0.199.1/24
+ local name=measurement.mila.group14
+ local subnet=14.0.199.1/24
+ echo 'measurement.mila.group14. IN A 14.0.199.1'
+ reverse_entry measurement.mila.group14 14.0.199.1/24
+ local name=measurement.mila.group14
+ local subnet=14.0.199.1/24
+ local first_sub=0.199.1/24
+ local second_sub=199.1/24
+ local third_sub=1/24
+ echo '1.199.0 IN  PTR measurement.mila.group14.'
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=base
++ subnet_router_router_intern 14 0 1
++ local n_grp=14 n_net=0 device=1
++ '[' 1 = 1 ']'
++ echo 14.0.1.1/24
+ subnet1=14.0.1.1/24
++ subnet_router_router_intern 14 0 2
++ local n_grp=14 n_net=0 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 14.0.1.2/24
+ subnet2=14.0.1.2/24
+ reverse_entry zuri.group14 14.0.1.1/24
+ local name=zuri.group14
+ local subnet=14.0.1.1/24
+ local first_sub=0.1.1/24
+ local second_sub=1.1/24
+ local third_sub=1/24
+ echo '1.1.0 IN  PTR zuri.group14.'
+ reverse_entry base.group14 14.0.1.2/24
+ local name=base.group14
+ local subnet=14.0.1.2/24
+ local first_sub=0.1.2/24
+ local second_sub=1.2/24
+ local third_sub=2/24
+ echo '2.1.0 IN  PTR base.group14.'
+ forward_entry zuri.group14 14.0.1.1/24
+ local name=zuri.group14
+ local subnet=14.0.1.1/24
+ echo 'zuri.group14. IN A 14.0.1.1'
+ forward_entry base.group14 14.0.1.2/24
+ local name=base.group14
+ local subnet=14.0.1.2/24
+ echo 'base.group14. IN A 14.0.1.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=gene
++ subnet_router_router_intern 14 1 1
++ local n_grp=14 n_net=1 device=1
++ '[' 1 = 1 ']'
++ echo 14.0.2.1/24
+ subnet1=14.0.2.1/24
++ subnet_router_router_intern 14 1 2
++ local n_grp=14 n_net=1 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 14.0.2.2/24
+ subnet2=14.0.2.2/24
+ reverse_entry zuri.group14 14.0.2.1/24
+ local name=zuri.group14
+ local subnet=14.0.2.1/24
+ local first_sub=0.2.1/24
+ local second_sub=2.1/24
+ local third_sub=1/24
+ echo '1.2.0 IN  PTR zuri.group14.'
+ reverse_entry gene.group14 14.0.2.2/24
+ local name=gene.group14
+ local subnet=14.0.2.2/24
+ local first_sub=0.2.2/24
+ local second_sub=2.2/24
+ local third_sub=2/24
+ echo '2.2.0 IN  PTR gene.group14.'
+ forward_entry zuri.group14 14.0.2.1/24
+ local name=zuri.group14
+ local subnet=14.0.2.1/24
+ echo 'zuri.group14. IN A 14.0.2.1'
+ forward_entry gene.group14 14.0.2.2/24
+ local name=gene.group14
+ local subnet=14.0.2.2/24
+ echo 'gene.group14. IN A 14.0.2.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=luga
++ subnet_router_router_intern 14 2 1
++ local n_grp=14 n_net=2 device=1
++ '[' 1 = 1 ']'
++ echo 14.0.3.1/24
+ subnet1=14.0.3.1/24
++ subnet_router_router_intern 14 2 2
++ local n_grp=14 n_net=2 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 14.0.3.2/24
+ subnet2=14.0.3.2/24
+ reverse_entry zuri.group14 14.0.3.1/24
+ local name=zuri.group14
+ local subnet=14.0.3.1/24
+ local first_sub=0.3.1/24
+ local second_sub=3.1/24
+ local third_sub=1/24
+ echo '1.3.0 IN  PTR zuri.group14.'
+ reverse_entry luga.group14 14.0.3.2/24
+ local name=luga.group14
+ local subnet=14.0.3.2/24
+ local first_sub=0.3.2/24
+ local second_sub=3.2/24
+ local third_sub=2/24
+ echo '2.3.0 IN  PTR luga.group14.'
+ forward_entry zuri.group14 14.0.3.1/24
+ local name=zuri.group14
+ local subnet=14.0.3.1/24
+ echo 'zuri.group14. IN A 14.0.3.1'
+ forward_entry luga.group14 14.0.3.2/24
+ local name=luga.group14
+ local subnet=14.0.3.2/24
+ echo 'luga.group14. IN A 14.0.3.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=muni
++ subnet_router_router_intern 14 3 1
++ local n_grp=14 n_net=3 device=1
++ '[' 1 = 1 ']'
++ echo 14.0.4.1/24
+ subnet1=14.0.4.1/24
++ subnet_router_router_intern 14 3 2
++ local n_grp=14 n_net=3 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 14.0.4.2/24
+ subnet2=14.0.4.2/24
+ reverse_entry zuri.group14 14.0.4.1/24
+ local name=zuri.group14
+ local subnet=14.0.4.1/24
+ local first_sub=0.4.1/24
+ local second_sub=4.1/24
+ local third_sub=1/24
+ echo '1.4.0 IN  PTR zuri.group14.'
+ reverse_entry muni.group14 14.0.4.2/24
+ local name=muni.group14
+ local subnet=14.0.4.2/24
+ local first_sub=0.4.2/24
+ local second_sub=4.2/24
+ local third_sub=2/24
+ echo '2.4.0 IN  PTR muni.group14.'
+ forward_entry zuri.group14 14.0.4.1/24
+ local name=zuri.group14
+ local subnet=14.0.4.1/24
+ echo 'zuri.group14. IN A 14.0.4.1'
+ forward_entry muni.group14 14.0.4.2/24
+ local name=muni.group14
+ local subnet=14.0.4.2/24
+ echo 'muni.group14. IN A 14.0.4.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=zuri
+ router2=vien
++ subnet_router_router_intern 14 4 1
++ local n_grp=14 n_net=4 device=1
++ '[' 1 = 1 ']'
++ echo 14.0.5.1/24
+ subnet1=14.0.5.1/24
++ subnet_router_router_intern 14 4 2
++ local n_grp=14 n_net=4 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 14.0.5.2/24
+ subnet2=14.0.5.2/24
+ reverse_entry zuri.group14 14.0.5.1/24
+ local name=zuri.group14
+ local subnet=14.0.5.1/24
+ local first_sub=0.5.1/24
+ local second_sub=5.1/24
+ local third_sub=1/24
+ echo '1.5.0 IN  PTR zuri.group14.'
+ reverse_entry vien.group14 14.0.5.2/24
+ local name=vien.group14
+ local subnet=14.0.5.2/24
+ local first_sub=0.5.2/24
+ local second_sub=5.2/24
+ local third_sub=2/24
+ echo '2.5.0 IN  PTR vien.group14.'
+ forward_entry zuri.group14 14.0.5.1/24
+ local name=zuri.group14
+ local subnet=14.0.5.1/24
+ echo 'zuri.group14. IN A 14.0.5.1'
+ forward_entry vien.group14 14.0.5.2/24
+ local name=vien.group14
+ local subnet=14.0.5.2/24
+ echo 'vien.group14. IN A 14.0.5.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=base
+ router2=gene
++ subnet_router_router_intern 14 5 1
++ local n_grp=14 n_net=5 device=1
++ '[' 1 = 1 ']'
++ echo 14.0.6.1/24
+ subnet1=14.0.6.1/24
++ subnet_router_router_intern 14 5 2
++ local n_grp=14 n_net=5 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 14.0.6.2/24
+ subnet2=14.0.6.2/24
+ reverse_entry base.group14 14.0.6.1/24
+ local name=base.group14
+ local subnet=14.0.6.1/24
+ local first_sub=0.6.1/24
+ local second_sub=6.1/24
+ local third_sub=1/24
+ echo '1.6.0 IN  PTR base.group14.'
+ reverse_entry gene.group14 14.0.6.2/24
+ local name=gene.group14
+ local subnet=14.0.6.2/24
+ local first_sub=0.6.2/24
+ local second_sub=6.2/24
+ local third_sub=2/24
+ echo '2.6.0 IN  PTR gene.group14.'
+ forward_entry base.group14 14.0.6.1/24
+ local name=base.group14
+ local subnet=14.0.6.1/24
+ echo 'base.group14. IN A 14.0.6.1'
+ forward_entry gene.group14 14.0.6.2/24
+ local name=gene.group14
+ local subnet=14.0.6.2/24
+ echo 'gene.group14. IN A 14.0.6.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=base
+ router2=muni
++ subnet_router_router_intern 14 6 1
++ local n_grp=14 n_net=6 device=1
++ '[' 1 = 1 ']'
++ echo 14.0.7.1/24
+ subnet1=14.0.7.1/24
++ subnet_router_router_intern 14 6 2
++ local n_grp=14 n_net=6 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 14.0.7.2/24
+ subnet2=14.0.7.2/24
+ reverse_entry base.group14 14.0.7.1/24
+ local name=base.group14
+ local subnet=14.0.7.1/24
+ local first_sub=0.7.1/24
+ local second_sub=7.1/24
+ local third_sub=1/24
+ echo '1.7.0 IN  PTR base.group14.'
+ reverse_entry muni.group14 14.0.7.2/24
+ local name=muni.group14
+ local subnet=14.0.7.2/24
+ local first_sub=0.7.2/24
+ local second_sub=7.2/24
+ local third_sub=2/24
+ echo '2.7.0 IN  PTR muni.group14.'
+ forward_entry base.group14 14.0.7.1/24
+ local name=base.group14
+ local subnet=14.0.7.1/24
+ echo 'base.group14. IN A 14.0.7.1'
+ forward_entry muni.group14 14.0.7.2/24
+ local name=muni.group14
+ local subnet=14.0.7.2/24
+ echo 'muni.group14. IN A 14.0.7.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=base
+ router2=lyon
++ subnet_router_router_intern 14 7 1
++ local n_grp=14 n_net=7 device=1
++ '[' 1 = 1 ']'
++ echo 14.0.8.1/24
+ subnet1=14.0.8.1/24
++ subnet_router_router_intern 14 7 2
++ local n_grp=14 n_net=7 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 14.0.8.2/24
+ subnet2=14.0.8.2/24
+ reverse_entry base.group14 14.0.8.1/24
+ local name=base.group14
+ local subnet=14.0.8.1/24
+ local first_sub=0.8.1/24
+ local second_sub=8.1/24
+ local third_sub=1/24
+ echo '1.8.0 IN  PTR base.group14.'
+ reverse_entry lyon.group14 14.0.8.2/24
+ local name=lyon.group14
+ local subnet=14.0.8.2/24
+ local first_sub=0.8.2/24
+ local second_sub=8.2/24
+ local third_sub=2/24
+ echo '2.8.0 IN  PTR lyon.group14.'
+ forward_entry base.group14 14.0.8.1/24
+ local name=base.group14
+ local subnet=14.0.8.1/24
+ echo 'base.group14. IN A 14.0.8.1'
+ forward_entry lyon.group14 14.0.8.2/24
+ local name=lyon.group14
+ local subnet=14.0.8.2/24
+ echo 'lyon.group14. IN A 14.0.8.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=gene
+ router2=luga
++ subnet_router_router_intern 14 8 1
++ local n_grp=14 n_net=8 device=1
++ '[' 1 = 1 ']'
++ echo 14.0.9.1/24
+ subnet1=14.0.9.1/24
++ subnet_router_router_intern 14 8 2
++ local n_grp=14 n_net=8 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 14.0.9.2/24
+ subnet2=14.0.9.2/24
+ reverse_entry gene.group14 14.0.9.1/24
+ local name=gene.group14
+ local subnet=14.0.9.1/24
+ local first_sub=0.9.1/24
+ local second_sub=9.1/24
+ local third_sub=1/24
+ echo '1.9.0 IN  PTR gene.group14.'
+ reverse_entry luga.group14 14.0.9.2/24
+ local name=luga.group14
+ local subnet=14.0.9.2/24
+ local first_sub=0.9.2/24
+ local second_sub=9.2/24
+ local third_sub=2/24
+ echo '2.9.0 IN  PTR luga.group14.'
+ forward_entry gene.group14 14.0.9.1/24
+ local name=gene.group14
+ local subnet=14.0.9.1/24
+ echo 'gene.group14. IN A 14.0.9.1'
+ forward_entry luga.group14 14.0.9.2/24
+ local name=luga.group14
+ local subnet=14.0.9.2/24
+ echo 'luga.group14. IN A 14.0.9.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=gene
+ router2=lyon
++ subnet_router_router_intern 14 9 1
++ local n_grp=14 n_net=9 device=1
++ '[' 1 = 1 ']'
++ echo 14.0.10.1/24
+ subnet1=14.0.10.1/24
++ subnet_router_router_intern 14 9 2
++ local n_grp=14 n_net=9 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 14.0.10.2/24
+ subnet2=14.0.10.2/24
+ reverse_entry gene.group14 14.0.10.1/24
+ local name=gene.group14
+ local subnet=14.0.10.1/24
+ local first_sub=0.10.1/24
+ local second_sub=10.1/24
+ local third_sub=1/24
+ echo '1.10.0 IN  PTR gene.group14.'
+ reverse_entry lyon.group14 14.0.10.2/24
+ local name=lyon.group14
+ local subnet=14.0.10.2/24
+ local first_sub=0.10.2/24
+ local second_sub=10.2/24
+ local third_sub=2/24
+ echo '2.10.0 IN  PTR lyon.group14.'
+ forward_entry gene.group14 14.0.10.1/24
+ local name=gene.group14
+ local subnet=14.0.10.1/24
+ echo 'gene.group14. IN A 14.0.10.1'
+ forward_entry lyon.group14 14.0.10.2/24
+ local name=lyon.group14
+ local subnet=14.0.10.2/24
+ echo 'lyon.group14. IN A 14.0.10.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=luga
+ router2=mila
++ subnet_router_router_intern 14 10 1
++ local n_grp=14 n_net=10 device=1
++ '[' 1 = 1 ']'
++ echo 14.0.11.1/24
+ subnet1=14.0.11.1/24
++ subnet_router_router_intern 14 10 2
++ local n_grp=14 n_net=10 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 14.0.11.2/24
+ subnet2=14.0.11.2/24
+ reverse_entry luga.group14 14.0.11.1/24
+ local name=luga.group14
+ local subnet=14.0.11.1/24
+ local first_sub=0.11.1/24
+ local second_sub=11.1/24
+ local third_sub=1/24
+ echo '1.11.0 IN  PTR luga.group14.'
+ reverse_entry mila.group14 14.0.11.2/24
+ local name=mila.group14
+ local subnet=14.0.11.2/24
+ local first_sub=0.11.2/24
+ local second_sub=11.2/24
+ local third_sub=2/24
+ echo '2.11.0 IN  PTR mila.group14.'
+ forward_entry luga.group14 14.0.11.1/24
+ local name=luga.group14
+ local subnet=14.0.11.1/24
+ echo 'luga.group14. IN A 14.0.11.1'
+ forward_entry mila.group14 14.0.11.2/24
+ local name=mila.group14
+ local subnet=14.0.11.2/24
+ echo 'mila.group14. IN A 14.0.11.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ row_i=(${intern_links[$i]})
+ router1=luga
+ router2=vien
++ subnet_router_router_intern 14 11 1
++ local n_grp=14 n_net=11 device=1
++ '[' 1 = 1 ']'
++ echo 14.0.12.1/24
+ subnet1=14.0.12.1/24
++ subnet_router_router_intern 14 11 2
++ local n_grp=14 n_net=11 device=2
++ '[' 2 = 1 ']'
++ '[' 2 = 2 ']'
++ echo 14.0.12.2/24
+ subnet2=14.0.12.2/24
+ reverse_entry luga.group14 14.0.12.1/24
+ local name=luga.group14
+ local subnet=14.0.12.1/24
+ local first_sub=0.12.1/24
+ local second_sub=12.1/24
+ local third_sub=1/24
+ echo '1.12.0 IN  PTR luga.group14.'
+ reverse_entry vien.group14 14.0.12.2/24
+ local name=vien.group14
+ local subnet=14.0.12.2/24
+ local first_sub=0.12.2/24
+ local second_sub=12.2/24
+ local third_sub=2/24
+ echo '2.12.0 IN  PTR vien.group14.'
+ forward_entry luga.group14 14.0.12.1/24
+ local name=luga.group14
+ local subnet=14.0.12.1/24
+ echo 'luga.group14. IN A 14.0.12.1'
+ forward_entry vien.group14 14.0.12.2/24
+ local name=vien.group14
+ local subnet=14.0.12.2/24
+ echo 'vien.group14. IN A 14.0.12.2'
+ (( i++ ))
+ (( i<n_intern_links ))
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=15
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ domain=group15
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group15
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.15
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo ';'
+ echo '; BIND reverse data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@   IN  SOA ns.group15. ns.group15. ('
+ echo '                  15     ; Serial'
+ echo '             604800     ; Refresh'
+ echo '              86400     ; Retry'
+ echo '            2419200     ; Expire'
+ echo '             604800 )   ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '    IN  NS  ns.group15.'
+ echo ''
+ echo ''
+ echo ';'
+ echo '; BIND data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@       IN      SOA     ns.group15. admin.group15. ('
+ echo '                              15         ; Serial'
+ echo '                         604800         ; Refresh'
+ echo '                          86400         ; Retry'
+ echo '                        2419200         ; Expire'
+ echo '                         604800 )       ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '        IN      NS      ns.group15.'
+ echo ''
++ subnet_router_DNS 15 dns-group
++ local n_grp=15 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.15.0.2/24
+ subnet=198.15.0.2/24
+ forward_entry ns.group15 198.15.0.2/24
+ local name=ns.group15
+ local subnet=198.15.0.2/24
+ echo 'ns.group15. IN A 198.15.0.2'
+ echo ''
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 0 == \0 ]]
++ subnet_router 15 0
++ local n_grp=15 n_router=0
++ echo 15.151.0.1/24
+ subnet=15.151.0.1/24
+ forward_entry zuri.group15 15.151.0.1/24
+ local name=zuri.group15
+ local subnet=15.151.0.1/24
+ echo 'zuri.group15. IN A 15.151.0.1'
+ reverse_entry zuri.group15 15.151.0.1/24
+ local name=zuri.group15
+ local subnet=15.151.0.1/24
+ local first_sub=151.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.151 IN  PTR zuri.group15.'
+ [[ ! -z miniinterneteth/d_routinator ]]
++ subnet_host_router 15 0 host
++ local n_grp=15 n_router=0 device=host
++ '[' host = host ']'
++ echo 15.101.0.1/24
+ subnet1=15.101.0.1/24
++ subnet_host_router 15 0 router
++ local n_grp=15 n_router=0 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 15.101.0.2/24
+ subnet2=15.101.0.2/24
+ [[ routinator:miniinterneteth/d_routinator == *\k\r\i\l\l* ]]
+ forward_entry host.zuri.group15 15.101.0.1/24
+ local name=host.zuri.group15
+ local subnet=15.101.0.1/24
+ echo 'host.zuri.group15. IN A 15.101.0.1'
+ forward_entry zuri.group15 15.101.0.2/24
+ local name=zuri.group15
+ local subnet=15.101.0.2/24
+ echo 'zuri.group15. IN A 15.101.0.2'
+ reverse_entry host.zuri.group15 15.101.0.1/24
+ local name=host.zuri.group15
+ local subnet=15.101.0.1/24
+ local first_sub=101.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.101 IN  PTR host.zuri.group15.'
+ reverse_entry zuri.group15 15.101.0.2/24
+ local name=zuri.group15
+ local subnet=15.101.0.2/24
+ local first_sub=101.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.101 IN  PTR zuri.group15.'
+ [[ MATRIX_TARGET == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 1 == \0 ]]
+ [[ ! -z '' ]]
+ [[ DNS == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 2 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MATRIX == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 3 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MEASUREMENT == \M\E\A\S\U\R\E\M\E\N\T ]]
++ subnet_router_MEASUREMENT 15 group
++ local n_grp=15 device=group
++ '[' group = group ']'
++ echo 15.0.199.1/24
+ m_subnet=15.0.199.1/24
+ forward_entry measurement.zuri.group15 15.0.199.1/24
+ local name=measurement.zuri.group15
+ local subnet=15.0.199.1/24
+ echo 'measurement.zuri.group15. IN A 15.0.199.1'
+ reverse_entry measurement.zuri.group15 15.0.199.1/24
+ local name=measurement.zuri.group15
+ local subnet=15.0.199.1/24
+ local first_sub=0.199.1/24
+ local second_sub=199.1/24
+ local third_sub=1/24
+ echo '1.199.0 IN  PTR measurement.zuri.group15.'
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_intern_links ))
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=16
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ domain=group16
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group16
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.16
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ echo ';'
+ echo '; BIND reverse data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@   IN  SOA ns.group16. ns.group16. ('
+ echo '                  16     ; Serial'
+ echo '             604800     ; Refresh'
+ echo '              86400     ; Retry'
+ echo '            2419200     ; Expire'
+ echo '             604800 )   ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '    IN  NS  ns.group16.'
+ echo ''
+ echo ''
+ echo ';'
+ echo '; BIND data file for local loopback interface'
+ echo ';'
+ echo '$TTL    604800'
+ echo '@       IN      SOA     ns.group16. admin.group16. ('
+ echo '                              16         ; Serial'
+ echo '                         604800         ; Refresh'
+ echo '                          86400         ; Retry'
+ echo '                        2419200         ; Expire'
+ echo '                         604800 )       ; Negative Cache TTL'
+ echo ';'
+ echo ''
+ echo '        IN      NS      ns.group16.'
+ echo ''
++ subnet_router_DNS 16 dns-group
++ local n_grp=16 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.16.0.2/24
+ subnet=198.16.0.2/24
+ forward_entry ns.group16 198.16.0.2/24
+ local name=ns.group16
+ local subnet=198.16.0.2/24
+ echo 'ns.group16. IN A 198.16.0.2'
+ echo ''
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 0 == \0 ]]
++ subnet_router 16 0
++ local n_grp=16 n_router=0
++ echo 16.151.0.1/24
+ subnet=16.151.0.1/24
+ forward_entry zuri.group16 16.151.0.1/24
+ local name=zuri.group16
+ local subnet=16.151.0.1/24
+ echo 'zuri.group16. IN A 16.151.0.1'
+ reverse_entry zuri.group16 16.151.0.1/24
+ local name=zuri.group16
+ local subnet=16.151.0.1/24
+ local first_sub=151.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.151 IN  PTR zuri.group16.'
+ [[ ! -z miniinterneteth/d_routinator ]]
++ subnet_host_router 16 0 host
++ local n_grp=16 n_router=0 device=host
++ '[' host = host ']'
++ echo 16.101.0.1/24
+ subnet1=16.101.0.1/24
++ subnet_host_router 16 0 router
++ local n_grp=16 n_router=0 device=router
++ '[' router = host ']'
++ '[' router = router ']'
++ echo 16.101.0.2/24
+ subnet2=16.101.0.2/24
+ [[ routinator:miniinterneteth/d_routinator == *\k\r\i\l\l* ]]
+ forward_entry host.zuri.group16 16.101.0.1/24
+ local name=host.zuri.group16
+ local subnet=16.101.0.1/24
+ echo 'host.zuri.group16. IN A 16.101.0.1'
+ forward_entry zuri.group16 16.101.0.2/24
+ local name=zuri.group16
+ local subnet=16.101.0.2/24
+ echo 'zuri.group16. IN A 16.101.0.2'
+ reverse_entry host.zuri.group16 16.101.0.1/24
+ local name=host.zuri.group16
+ local subnet=16.101.0.1/24
+ local first_sub=101.0.1/24
+ local second_sub=0.1/24
+ local third_sub=1/24
+ echo '1.0.101 IN  PTR host.zuri.group16.'
+ reverse_entry zuri.group16 16.101.0.2/24
+ local name=zuri.group16
+ local subnet=16.101.0.2/24
+ local first_sub=101.0.2/24
+ local second_sub=0.2/24
+ local third_sub=2/24
+ echo '2.0.101 IN  PTR zuri.group16.'
+ [[ MATRIX_TARGET == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 1 == \0 ]]
+ [[ ! -z '' ]]
+ [[ DNS == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 2 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MATRIX == \M\E\A\S\U\R\E\M\E\N\T ]]
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -s -d : -f 2
+ dname=
+ single_router=ALL
+ [[ -z ALL ]]
+ [[ 3 == \0 ]]
+ [[ ! -z '' ]]
+ [[ MEASUREMENT == \M\E\A\S\U\R\E\M\E\N\T ]]
++ subnet_router_MEASUREMENT 16 group
++ local n_grp=16 device=group
++ '[' group = group ']'
++ echo 16.0.199.1/24
+ m_subnet=16.0.199.1/24
+ forward_entry measurement.zuri.group16 16.0.199.1/24
+ local name=measurement.zuri.group16
+ local subnet=16.0.199.1/24
+ echo 'measurement.zuri.group16. IN A 16.0.199.1'
+ reverse_entry measurement.zuri.group16 16.0.199.1/24
+ local name=measurement.zuri.group16
+ local subnet=16.0.199.1/24
+ local first_sub=0.199.1/24
+ local second_sub=199.1/24
+ local third_sub=1/24
+ echo '1.199.0 IN  PTR measurement.zuri.group16.'
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_intern_links ))
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=80
+ group_as=IXP
+ group_config=Config
+ group_router_config=N/A
+ group_internal_links=N/A
+ domain=group80
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group80
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.80
+ '[' IXP '!=' IXP ']'
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=81
+ group_as=IXP
+ group_config=Config
+ group_router_config=N/A
+ group_internal_links=N/A
+ domain=group81
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group81
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.81
+ '[' IXP '!=' IXP ']'
+ (( j++ ))
+ (( j<n_groups ))
+ group_j=(${groups[$j]})
+ group_number=82
+ group_as=IXP
+ group_config=Config
+ group_router_config=N/A
+ group_internal_links=N/A
+ domain=group82
+ forward_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.group82
+ reverse_records=/home/service/tud/mini_internet_project/platform/groups/dns/zones/db.82
+ '[' IXP '!=' IXP ']'
+ (( j++ ))
+ (( j<n_groups ))

real	0m0.413s
user	0m0.257s
sys	0m0.161s
+ echo ''

+ echo ''

++ date +%s%N
+ echo 'rpki_config.sh 1735322394064'
+ echo 'rpki_config.sh: '
rpki_config.sh: 
+ /home/service/tud/mini_internet_project/platform/setup/rpki_config.sh /home/service/tud/mini_internet_project/platform /home/service/tud/mini_internet_project/platform/config
+ DIRECTORY=/home/service/tud/mini_internet_project/platform
+ CONFIG_DIRECTORY=/home/service/tud/mini_internet_project/platform/config
+ source /home/service/tud/mini_internet_project/platform/config/subnet_config.sh
++ set -o errexit
++ set -o pipefail
++ set -o nounset
+ source /home/service/tud/mini_internet_project/platform/setup/_parallel_helper.sh
++ trap 'exit 1' ERR
++ set -o errexit
++ set -o pipefail
++ set -o nounset
+++ grep -c '^processor' /proc/cpuinfo
++ N_CORES=8
+++ lscpu
+++ grep -E '^Thread\(s\) per core:'
+++ awk '{print $4}'
++ N_THREADS_PER_CORE=1
++ N_TASKS=8
+ readarray groups
+ n_groups=15
+ rpki_location=/home/service/tud/mini_internet_project/platform/groups/rpki
+ mkdir -p /home/service/tud/mini_internet_project/platform/groups/rpki/tals
+ krill_webserver_ip_links=/home/service/tud/mini_internet_project/platform/groups/rpki/webserver_links.sh
+ echo '#!/bin/bash'
+ echo 'source "/home/service/tud/mini_internet_project/platform/setup/ovs-docker.sh"'
+ chmod +x /home/service/tud/mini_internet_project/platform/groups/rpki/webserver_links.sh
+ EXPIRES_IN_DAYS=365
+ ISSUER='/C=CH/L=Zurich/O=ETH Zurich'
+ openssl req -new -x509 -newkey rsa:4096 -sha256 -nodes -keyout /home/service/tud/mini_internet_project/platform/groups/rpki/root.key -out /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt -days 365 -subj '/C=CH/L=Zurich/O=ETH Zurich'
.+..........+........+.+..+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*..+.+..+...+....+...+.....+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*...........+........+....+...+........+......+.+.....+.......+..+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
..+..+...+..........+..............+......+.+.....+...+.......+...+...+............+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*.+................+.....+....+..+.............+.....+.........+.......+......+.....+....+...+............+...+..+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*.+....+.....................+...+..................+.....+....+.....+.........+.+......+..+.+.........+..+...+.+.....+.......+..+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-----
+ (( j = 0 ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=1
+ group_as=AS
+ '[' AS '!=' IXP ']'
++ openssl rand -hex 8
+ passwd=ec2d2b8ae610b600
+ echo '1 ec2d2b8ae610b600'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=2
+ group_as=AS
+ '[' AS '!=' IXP ']'
++ openssl rand -hex 8
+ passwd=8c5fb4a52b580cde
+ echo '2 8c5fb4a52b580cde'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=3
+ group_as=AS
+ '[' AS '!=' IXP ']'
++ openssl rand -hex 8
+ passwd=4c87676d0755974e
+ echo '3 4c87676d0755974e'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=4
+ group_as=AS
+ '[' AS '!=' IXP ']'
++ openssl rand -hex 8
+ passwd=61eb14fbb6e77b5c
+ echo '4 61eb14fbb6e77b5c'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=5
+ group_as=AS
+ '[' AS '!=' IXP ']'
++ openssl rand -hex 8
+ passwd=657250e5c6f75ab8
+ echo '5 657250e5c6f75ab8'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=6
+ group_as=AS
+ '[' AS '!=' IXP ']'
++ openssl rand -hex 8
+ passwd=d6c7f286ed1ce156
+ echo '6 d6c7f286ed1ce156'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=11
+ group_as=AS
+ '[' AS '!=' IXP ']'
++ openssl rand -hex 8
+ passwd=cd83955928e61b59
+ echo '11 cd83955928e61b59'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=12
+ group_as=AS
+ '[' AS '!=' IXP ']'
++ openssl rand -hex 8
+ passwd=404fd0897fa8f98d
+ echo '12 404fd0897fa8f98d'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=13
+ group_as=AS
+ '[' AS '!=' IXP ']'
++ openssl rand -hex 8
+ passwd=d843d08f39a3411c
+ echo '13 d843d08f39a3411c'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=14
+ group_as=AS
+ '[' AS '!=' IXP ']'
++ openssl rand -hex 8
+ passwd=ce7f0724fe416c9a
+ echo '14 ce7f0724fe416c9a'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=15
+ group_as=AS
+ '[' AS '!=' IXP ']'
++ openssl rand -hex 8
+ passwd=e7622b8c2b1b07b4
+ echo '15 e7622b8c2b1b07b4'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=16
+ group_as=AS
+ '[' AS '!=' IXP ']'
++ openssl rand -hex 8
+ passwd=ff6b92b328e0a0ac
+ echo '16 ff6b92b328e0a0ac'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=80
+ group_as=IXP
+ '[' IXP '!=' IXP ']'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=81
+ group_as=IXP
+ '[' IXP '!=' IXP ']'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=82
+ group_as=IXP
+ '[' IXP '!=' IXP ']'
+ (( j++ ))
+ (( j < n_groups ))
+ ssh-keygen -t rsa -b 4096 -C 'krill webserver' -P '' -f /home/service/tud/mini_internet_project/platform/groups/rpki/id_rsa_krill_webserver -q
+ wait
+ for role in "readonly" "admin"
++ openssl rand -hex 8
+ passwd=e07d53abe5a1d0e4
+ echo 'readonly e07d53abe5a1d0e4'
+ for role in "readonly" "admin"
++ openssl rand -hex 8
+ passwd=83b51209a4fd6890
+ echo 'admin 83b51209a4fd6890'
+ (( j = 0 ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=1
+ group_as=AS
+ group_router_config=l3_routers_krill.txt
+ group_internal_links=l3_links_krill.txt
+ touch /home/service/tud/mini_internet_project/platform/groups/g1/routinator.txt
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
++ subnet_host_router 1 0 host
++ local n_grp=1 n_router=0 device=host
++ '[' host = host ']'
++ echo 1.101.0.1/24
+ subnet=1.101.0.1/24
+ echo 1.101.0.1
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [ '
++ seq 1 253
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.1.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.2.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.3.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.4.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.5.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.6.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.7.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.8.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.9.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.10.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.11.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.12.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.13.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.14.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.15.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.16.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.17.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.18.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.19.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.20.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.21.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.22.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.23.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.24.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.25.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.26.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.27.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.28.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.29.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.30.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.31.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.32.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.33.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.34.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.35.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.36.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.37.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.38.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.39.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.40.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.41.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.42.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.43.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.44.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.45.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.46.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.47.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.48.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.49.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.50.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.51.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.52.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.53.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.54.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.55.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.56.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.57.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.58.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.59.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.60.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.61.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.62.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.63.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.64.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.65.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.66.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.67.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.68.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.69.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.70.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.71.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.72.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.73.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.74.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.75.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.76.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.77.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.78.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.79.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.80.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.81.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.82.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.83.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.84.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.85.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.86.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.87.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.88.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.89.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.90.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.91.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.92.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.93.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.94.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.95.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.96.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.97.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.98.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.99.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.100.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.101.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.102.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.103.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.104.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.105.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.106.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.107.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.108.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.109.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.110.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.111.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.112.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.113.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.114.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.115.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.116.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.117.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.118.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.119.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.120.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.121.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.122.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.123.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.124.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.125.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.126.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.127.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.128.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.129.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.130.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.131.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.132.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.133.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.134.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.135.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.136.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.137.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.138.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.139.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.140.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.141.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.142.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.143.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.144.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.145.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.146.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.147.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.148.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.149.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.150.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.151.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.152.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.153.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.154.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.155.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.156.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.157.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.158.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.159.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.160.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.161.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.162.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.163.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.164.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.165.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.166.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.167.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.168.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.169.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.170.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.171.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.172.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.173.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.174.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.175.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.176.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.177.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.178.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.179.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.180.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.181.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.182.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.183.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.184.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.185.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.186.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.187.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.188.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.189.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.190.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.191.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.192.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.193.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.194.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.195.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.196.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.197.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.198.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.199.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.200.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.201.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.202.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.203.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.204.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.205.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.206.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.207.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.208.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.209.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.210.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.211.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.212.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.213.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.214.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.215.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.216.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.217.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.218.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.219.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.220.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.221.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.222.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.223.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.224.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.225.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.226.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.227.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.228.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.229.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.230.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.231.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.232.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.233.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.234.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.235.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.236.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.237.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.238.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.239.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.240.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.241.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.242.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.243.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.244.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.245.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.246.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.247.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.248.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.249.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.250.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.251.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.252.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.253.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.254.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    } '
+ echo '  ],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=krill:miniinterneteth/d_krill
++ echo krill:miniinterneteth/d_krill
++ cut -d : -f 1
+ htype=krill
++ echo krill:miniinterneteth/d_krill
++ cut -d : -f 2
+ dname=miniinterneteth/d_krill
+ [[ ! -z miniinterneteth/d_krill ]]
+ [[ krill == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ krill == *\k\r\i\l\l* ]]
++ subnet_host_router 1 1 host
++ local n_grp=1 n_router=1 device=host
++ '[' host = host ']'
++ echo 1.102.0.1/24
+ subnet=1.102.0.1/24
+ krill_subject='/C=CH/L=Zurich/O=ETH Zurich/CN=rpki-server.group1'
+ krill_san='DNS:rpki-server.group1, DNS:rpki-server.group1:3000, DNS:rpki-server.group1:3080, DNS:host.zuri.group1, DNS:localhost, IP:1.102.0.1, IP:127.0.0.1'
+ krill_group_location=/home/service/tud/mini_internet_project/platform/groups/g1/krill
+ mkdir -p /home/service/tud/mini_internet_project/platform/groups/g1/krill/data
+ krill_cert_extension_file=/home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.ext
+ echo '[krill]'
+ echo 'subjectAltName=DNS:rpki-server.group1, DNS:rpki-server.group1:3000, DNS:rpki-server.group1:3080, DNS:host.zuri.group1, DNS:localhost, IP:1.102.0.1, IP:127.0.0.1'
+ echo basicConstraints=CA:FALSE
+ openssl req -new -newkey rsa:4096 -keyout /home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.key -out /home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.csr -sha256 -nodes -subj '/C=CH/L=Zurich/O=ETH Zurich/CN=rpki-server.group1'


-----
+ openssl x509 -in /home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.csr -req -out /home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.crt -CA /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt -CAkey /home/service/tud/mini_internet_project/platform/groups/rpki/root.key -CAcreateserial -extensions krill -extfile /home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.ext -days 365
Certificate request self-signature ok
subject=C = CH, L = Zurich, O = ETH Zurich, CN = rpki-server.group1
+ cat /home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.crt /home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.key
+ setup_location=/home/service/tud/mini_internet_project/platform/groups/g1/krill/setup.sh
+ krill_config_location=/home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.conf
+ krill_auth_token_location=/home/service/tud/mini_internet_project/platform/groups/g1/krill/krill_token.txt
+ echo '#!/bin/bash -e'
+ echo 'export KRILL_TEST=true'
+ echo 'KRILL_SERVER="https://127.0.0.1:3000/"'
++ uuidgen
+ krill_auth_token=24b18e58-d703-433c-a1c5-bf938971f18c
+ echo -n 24b18e58-d703-433c-a1c5-bf938971f18c
+ echo '# General configuration for krill'
+ echo 'ip           = "127.0.0.1"'
+ echo 'port         = 3001'
+ echo 'data_dir     = "/var/krill/data/"'
+ echo 'pid_file     = "/var/run/krill.pid"'
+ echo 'repo_enabled = true'
+ echo 'log_type     = "stderr"'
+ echo 'rsync_base   = "rsync://rpki-server.group1:3000/repo/"'
+ echo 'service_uri  = "https://rpki-server.group1:3000/"'
+ echo 'auth_token   = "24b18e58-d703-433c-a1c5-bf938971f18c"'
+ echo 'bgp_risdumps_enabled = false'
+ echo 'timing_roa_valid_weeks = 2'
+ echo 'timing_roa_reissue_weeks_before = 1'
+ echo
+ echo '# Multi-user configuration for krill'
+ echo 'auth_type    = "config-file"'
+ echo
+ echo '[testbed]'
+ echo 'rrdp_base_uri = "https://rpki-server.group1:3000/rrdp/"'
+ echo 'rsync_jail = "rsync://rpki-server.group1:3000/repo/"'
+ echo 'ta_aia = "rsync://rpki-server.group1:3000/ta/ta.cer"'
+ echo 'ta_uri = "https://rpki-server.group1:3000/ta/ta.cer"'
+ echo
+ echo '[auth_users]'
+ (( k = 0 ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=1
+ other_group_as=AS
+ ca_name=group1
++ subnet_group 1
++ local n_grp=1
++ echo 1.0.0.0/8
+ other_group_subnet=1.0.0.0/8
+ '[' AS '!=' IXP ']'
+ echo
+ echo 'krillc add --server $KRILL_SERVER --ca "group1"'
+ echo 'krillc repo request --server $KRILL_SERVER \'
+ echo '    --ca "group1" > /tmp/group1_publisher_request.xml'
+ echo 'krillpubc add \'
+ echo '    --server $KRILL_SERVER \'
+ echo '    --publisher "group1" \'
+ echo '    --request /tmp/group1_publisher_request.xml > /tmp/group1_repository_response.xml'
+ echo 'krillc repo configure --server $KRILL_SERVER \'
+ echo '    --ca "group1" \'
+ echo '    --format text \'
+ echo '    --response /tmp/group1_repository_response.xml'
+ echo 'krillc parents request --server $KRILL_SERVER \'
+ echo '    --ca "group1" > /tmp/group1_myid.xml'
+ echo 'krillc children add --server $KRILL_SERVER \'
+ echo '    --ca ta \'
+ echo '    --child "group1" \'
+ echo '    --asn "AS1" \'
+ echo '    --ipv4 "1.0.0.0/8" \'
+ echo '    --request /tmp/group1_myid.xml > /tmp/group1_parent_response.xml'
+ echo 'krillc parents add --server $KRILL_SERVER \'
+ echo '    --ca "group1" \'
+ echo '    --parent ta \'
+ echo '    --response /tmp/group1_parent_response.xml'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=2
+ other_group_as=AS
+ ca_name=group2
++ subnet_group 2
++ local n_grp=2
++ echo 2.0.0.0/8
+ other_group_subnet=2.0.0.0/8
+ '[' AS '!=' IXP ']'
+ echo
+ echo 'krillc add --server $KRILL_SERVER --ca "group2"'
+ echo 'krillc repo request --server $KRILL_SERVER \'
+ echo '    --ca "group2" > /tmp/group2_publisher_request.xml'
+ echo 'krillpubc add \'
+ echo '    --server $KRILL_SERVER \'
+ echo '    --publisher "group2" \'
+ echo '    --request /tmp/group2_publisher_request.xml > /tmp/group2_repository_response.xml'
+ echo 'krillc repo configure --server $KRILL_SERVER \'
+ echo '    --ca "group2" \'
+ echo '    --format text \'
+ echo '    --response /tmp/group2_repository_response.xml'
+ echo 'krillc parents request --server $KRILL_SERVER \'
+ echo '    --ca "group2" > /tmp/group2_myid.xml'
+ echo 'krillc children add --server $KRILL_SERVER \'
+ echo '    --ca ta \'
+ echo '    --child "group2" \'
+ echo '    --asn "AS2" \'
+ echo '    --ipv4 "2.0.0.0/8" \'
+ echo '    --request /tmp/group2_myid.xml > /tmp/group2_parent_response.xml'
+ echo 'krillc parents add --server $KRILL_SERVER \'
+ echo '    --ca "group2" \'
+ echo '    --parent ta \'
+ echo '    --response /tmp/group2_parent_response.xml'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=3
+ other_group_as=AS
+ ca_name=group3
++ subnet_group 3
++ local n_grp=3
++ echo 3.0.0.0/8
+ other_group_subnet=3.0.0.0/8
+ '[' AS '!=' IXP ']'
+ echo
+ echo 'krillc add --server $KRILL_SERVER --ca "group3"'
+ echo 'krillc repo request --server $KRILL_SERVER \'
+ echo '    --ca "group3" > /tmp/group3_publisher_request.xml'
+ echo 'krillpubc add \'
+ echo '    --server $KRILL_SERVER \'
+ echo '    --publisher "group3" \'
+ echo '    --request /tmp/group3_publisher_request.xml > /tmp/group3_repository_response.xml'
+ echo 'krillc repo configure --server $KRILL_SERVER \'
+ echo '    --ca "group3" \'
+ echo '    --format text \'
+ echo '    --response /tmp/group3_repository_response.xml'
+ echo 'krillc parents request --server $KRILL_SERVER \'
+ echo '    --ca "group3" > /tmp/group3_myid.xml'
+ echo 'krillc children add --server $KRILL_SERVER \'
+ echo '    --ca ta \'
+ echo '    --child "group3" \'
+ echo '    --asn "AS3" \'
+ echo '    --ipv4 "3.0.0.0/8" \'
+ echo '    --request /tmp/group3_myid.xml > /tmp/group3_parent_response.xml'
+ echo 'krillc parents add --server $KRILL_SERVER \'
+ echo '    --ca "group3" \'
+ echo '    --parent ta \'
+ echo '    --response /tmp/group3_parent_response.xml'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=4
+ other_group_as=AS
+ ca_name=group4
++ subnet_group 4
++ local n_grp=4
++ echo 4.0.0.0/8
+ other_group_subnet=4.0.0.0/8
+ '[' AS '!=' IXP ']'
+ echo
+ echo 'krillc add --server $KRILL_SERVER --ca "group4"'
+ echo 'krillc repo request --server $KRILL_SERVER \'
+ echo '    --ca "group4" > /tmp/group4_publisher_request.xml'
+ echo 'krillpubc add \'
+ echo '    --server $KRILL_SERVER \'
+ echo '    --publisher "group4" \'
+ echo '    --request /tmp/group4_publisher_request.xml > /tmp/group4_repository_response.xml'
+ echo 'krillc repo configure --server $KRILL_SERVER \'
+ echo '    --ca "group4" \'
+ echo '    --format text \'
+ echo '    --response /tmp/group4_repository_response.xml'
+ echo 'krillc parents request --server $KRILL_SERVER \'
+ echo '    --ca "group4" > /tmp/group4_myid.xml'
+ echo 'krillc children add --server $KRILL_SERVER \'
+ echo '    --ca ta \'
+ echo '    --child "group4" \'
+ echo '    --asn "AS4" \'
+ echo '    --ipv4 "4.0.0.0/8" \'
+ echo '    --request /tmp/group4_myid.xml > /tmp/group4_parent_response.xml'
+ echo 'krillc parents add --server $KRILL_SERVER \'
+ echo '    --ca "group4" \'
+ echo '    --parent ta \'
+ echo '    --response /tmp/group4_parent_response.xml'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=5
+ other_group_as=AS
+ ca_name=group5
++ subnet_group 5
++ local n_grp=5
++ echo 5.0.0.0/8
+ other_group_subnet=5.0.0.0/8
+ '[' AS '!=' IXP ']'
+ echo
+ echo 'krillc add --server $KRILL_SERVER --ca "group5"'
+ echo 'krillc repo request --server $KRILL_SERVER \'
+ echo '    --ca "group5" > /tmp/group5_publisher_request.xml'
+ echo 'krillpubc add \'
+ echo '    --server $KRILL_SERVER \'
+ echo '    --publisher "group5" \'
+ echo '    --request /tmp/group5_publisher_request.xml > /tmp/group5_repository_response.xml'
+ echo 'krillc repo configure --server $KRILL_SERVER \'
+ echo '    --ca "group5" \'
+ echo '    --format text \'
+ echo '    --response /tmp/group5_repository_response.xml'
+ echo 'krillc parents request --server $KRILL_SERVER \'
+ echo '    --ca "group5" > /tmp/group5_myid.xml'
+ echo 'krillc children add --server $KRILL_SERVER \'
+ echo '    --ca ta \'
+ echo '    --child "group5" \'
+ echo '    --asn "AS5" \'
+ echo '    --ipv4 "5.0.0.0/8" \'
+ echo '    --request /tmp/group5_myid.xml > /tmp/group5_parent_response.xml'
+ echo 'krillc parents add --server $KRILL_SERVER \'
+ echo '    --ca "group5" \'
+ echo '    --parent ta \'
+ echo '    --response /tmp/group5_parent_response.xml'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=6
+ other_group_as=AS
+ ca_name=group6
++ subnet_group 6
++ local n_grp=6
++ echo 6.0.0.0/8
+ other_group_subnet=6.0.0.0/8
+ '[' AS '!=' IXP ']'
+ echo
+ echo 'krillc add --server $KRILL_SERVER --ca "group6"'
+ echo 'krillc repo request --server $KRILL_SERVER \'
+ echo '    --ca "group6" > /tmp/group6_publisher_request.xml'
+ echo 'krillpubc add \'
+ echo '    --server $KRILL_SERVER \'
+ echo '    --publisher "group6" \'
+ echo '    --request /tmp/group6_publisher_request.xml > /tmp/group6_repository_response.xml'
+ echo 'krillc repo configure --server $KRILL_SERVER \'
+ echo '    --ca "group6" \'
+ echo '    --format text \'
+ echo '    --response /tmp/group6_repository_response.xml'
+ echo 'krillc parents request --server $KRILL_SERVER \'
+ echo '    --ca "group6" > /tmp/group6_myid.xml'
+ echo 'krillc children add --server $KRILL_SERVER \'
+ echo '    --ca ta \'
+ echo '    --child "group6" \'
+ echo '    --asn "AS6" \'
+ echo '    --ipv4 "6.0.0.0/8" \'
+ echo '    --request /tmp/group6_myid.xml > /tmp/group6_parent_response.xml'
+ echo 'krillc parents add --server $KRILL_SERVER \'
+ echo '    --ca "group6" \'
+ echo '    --parent ta \'
+ echo '    --response /tmp/group6_parent_response.xml'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=11
+ other_group_as=AS
+ ca_name=group11
++ subnet_group 11
++ local n_grp=11
++ echo 11.0.0.0/8
+ other_group_subnet=11.0.0.0/8
+ '[' AS '!=' IXP ']'
+ echo
+ echo 'krillc add --server $KRILL_SERVER --ca "group11"'
+ echo 'krillc repo request --server $KRILL_SERVER \'
+ echo '    --ca "group11" > /tmp/group11_publisher_request.xml'
+ echo 'krillpubc add \'
+ echo '    --server $KRILL_SERVER \'
+ echo '    --publisher "group11" \'
+ echo '    --request /tmp/group11_publisher_request.xml > /tmp/group11_repository_response.xml'
+ echo 'krillc repo configure --server $KRILL_SERVER \'
+ echo '    --ca "group11" \'
+ echo '    --format text \'
+ echo '    --response /tmp/group11_repository_response.xml'
+ echo 'krillc parents request --server $KRILL_SERVER \'
+ echo '    --ca "group11" > /tmp/group11_myid.xml'
+ echo 'krillc children add --server $KRILL_SERVER \'
+ echo '    --ca ta \'
+ echo '    --child "group11" \'
+ echo '    --asn "AS11" \'
+ echo '    --ipv4 "11.0.0.0/8" \'
+ echo '    --request /tmp/group11_myid.xml > /tmp/group11_parent_response.xml'
+ echo 'krillc parents add --server $KRILL_SERVER \'
+ echo '    --ca "group11" \'
+ echo '    --parent ta \'
+ echo '    --response /tmp/group11_parent_response.xml'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=12
+ other_group_as=AS
+ ca_name=group12
++ subnet_group 12
++ local n_grp=12
++ echo 12.0.0.0/8
+ other_group_subnet=12.0.0.0/8
+ '[' AS '!=' IXP ']'
+ echo
+ echo 'krillc add --server $KRILL_SERVER --ca "group12"'
+ echo 'krillc repo request --server $KRILL_SERVER \'
+ echo '    --ca "group12" > /tmp/group12_publisher_request.xml'
+ echo 'krillpubc add \'
+ echo '    --server $KRILL_SERVER \'
+ echo '    --publisher "group12" \'
+ echo '    --request /tmp/group12_publisher_request.xml > /tmp/group12_repository_response.xml'
+ echo 'krillc repo configure --server $KRILL_SERVER \'
+ echo '    --ca "group12" \'
+ echo '    --format text \'
+ echo '    --response /tmp/group12_repository_response.xml'
+ echo 'krillc parents request --server $KRILL_SERVER \'
+ echo '    --ca "group12" > /tmp/group12_myid.xml'
+ echo 'krillc children add --server $KRILL_SERVER \'
+ echo '    --ca ta \'
+ echo '    --child "group12" \'
+ echo '    --asn "AS12" \'
+ echo '    --ipv4 "12.0.0.0/8" \'
+ echo '    --request /tmp/group12_myid.xml > /tmp/group12_parent_response.xml'
+ echo 'krillc parents add --server $KRILL_SERVER \'
+ echo '    --ca "group12" \'
+ echo '    --parent ta \'
+ echo '    --response /tmp/group12_parent_response.xml'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=13
+ other_group_as=AS
+ ca_name=group13
++ subnet_group 13
++ local n_grp=13
++ echo 13.0.0.0/8
+ other_group_subnet=13.0.0.0/8
+ '[' AS '!=' IXP ']'
+ echo
+ echo 'krillc add --server $KRILL_SERVER --ca "group13"'
+ echo 'krillc repo request --server $KRILL_SERVER \'
+ echo '    --ca "group13" > /tmp/group13_publisher_request.xml'
+ echo 'krillpubc add \'
+ echo '    --server $KRILL_SERVER \'
+ echo '    --publisher "group13" \'
+ echo '    --request /tmp/group13_publisher_request.xml > /tmp/group13_repository_response.xml'
+ echo 'krillc repo configure --server $KRILL_SERVER \'
+ echo '    --ca "group13" \'
+ echo '    --format text \'
+ echo '    --response /tmp/group13_repository_response.xml'
+ echo 'krillc parents request --server $KRILL_SERVER \'
+ echo '    --ca "group13" > /tmp/group13_myid.xml'
+ echo 'krillc children add --server $KRILL_SERVER \'
+ echo '    --ca ta \'
+ echo '    --child "group13" \'
+ echo '    --asn "AS13" \'
+ echo '    --ipv4 "13.0.0.0/8" \'
+ echo '    --request /tmp/group13_myid.xml > /tmp/group13_parent_response.xml'
+ echo 'krillc parents add --server $KRILL_SERVER \'
+ echo '    --ca "group13" \'
+ echo '    --parent ta \'
+ echo '    --response /tmp/group13_parent_response.xml'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=14
+ other_group_as=AS
+ ca_name=group14
++ subnet_group 14
++ local n_grp=14
++ echo 14.0.0.0/8
+ other_group_subnet=14.0.0.0/8
+ '[' AS '!=' IXP ']'
+ echo
+ echo 'krillc add --server $KRILL_SERVER --ca "group14"'
+ echo 'krillc repo request --server $KRILL_SERVER \'
+ echo '    --ca "group14" > /tmp/group14_publisher_request.xml'
+ echo 'krillpubc add \'
+ echo '    --server $KRILL_SERVER \'
+ echo '    --publisher "group14" \'
+ echo '    --request /tmp/group14_publisher_request.xml > /tmp/group14_repository_response.xml'
+ echo 'krillc repo configure --server $KRILL_SERVER \'
+ echo '    --ca "group14" \'
+ echo '    --format text \'
+ echo '    --response /tmp/group14_repository_response.xml'
+ echo 'krillc parents request --server $KRILL_SERVER \'
+ echo '    --ca "group14" > /tmp/group14_myid.xml'
+ echo 'krillc children add --server $KRILL_SERVER \'
+ echo '    --ca ta \'
+ echo '    --child "group14" \'
+ echo '    --asn "AS14" \'
+ echo '    --ipv4 "14.0.0.0/8" \'
+ echo '    --request /tmp/group14_myid.xml > /tmp/group14_parent_response.xml'
+ echo 'krillc parents add --server $KRILL_SERVER \'
+ echo '    --ca "group14" \'
+ echo '    --parent ta \'
+ echo '    --response /tmp/group14_parent_response.xml'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=15
+ other_group_as=AS
+ ca_name=group15
++ subnet_group 15
++ local n_grp=15
++ echo 15.0.0.0/8
+ other_group_subnet=15.0.0.0/8
+ '[' AS '!=' IXP ']'
+ echo
+ echo 'krillc add --server $KRILL_SERVER --ca "group15"'
+ echo 'krillc repo request --server $KRILL_SERVER \'
+ echo '    --ca "group15" > /tmp/group15_publisher_request.xml'
+ echo 'krillpubc add \'
+ echo '    --server $KRILL_SERVER \'
+ echo '    --publisher "group15" \'
+ echo '    --request /tmp/group15_publisher_request.xml > /tmp/group15_repository_response.xml'
+ echo 'krillc repo configure --server $KRILL_SERVER \'
+ echo '    --ca "group15" \'
+ echo '    --format text \'
+ echo '    --response /tmp/group15_repository_response.xml'
+ echo 'krillc parents request --server $KRILL_SERVER \'
+ echo '    --ca "group15" > /tmp/group15_myid.xml'
+ echo 'krillc children add --server $KRILL_SERVER \'
+ echo '    --ca ta \'
+ echo '    --child "group15" \'
+ echo '    --asn "AS15" \'
+ echo '    --ipv4 "15.0.0.0/8" \'
+ echo '    --request /tmp/group15_myid.xml > /tmp/group15_parent_response.xml'
+ echo 'krillc parents add --server $KRILL_SERVER \'
+ echo '    --ca "group15" \'
+ echo '    --parent ta \'
+ echo '    --response /tmp/group15_parent_response.xml'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=16
+ other_group_as=AS
+ ca_name=group16
++ subnet_group 16
++ local n_grp=16
++ echo 16.0.0.0/8
+ other_group_subnet=16.0.0.0/8
+ '[' AS '!=' IXP ']'
+ echo
+ echo 'krillc add --server $KRILL_SERVER --ca "group16"'
+ echo 'krillc repo request --server $KRILL_SERVER \'
+ echo '    --ca "group16" > /tmp/group16_publisher_request.xml'
+ echo 'krillpubc add \'
+ echo '    --server $KRILL_SERVER \'
+ echo '    --publisher "group16" \'
+ echo '    --request /tmp/group16_publisher_request.xml > /tmp/group16_repository_response.xml'
+ echo 'krillc repo configure --server $KRILL_SERVER \'
+ echo '    --ca "group16" \'
+ echo '    --format text \'
+ echo '    --response /tmp/group16_repository_response.xml'
+ echo 'krillc parents request --server $KRILL_SERVER \'
+ echo '    --ca "group16" > /tmp/group16_myid.xml'
+ echo 'krillc children add --server $KRILL_SERVER \'
+ echo '    --ca ta \'
+ echo '    --child "group16" \'
+ echo '    --asn "AS16" \'
+ echo '    --ipv4 "16.0.0.0/8" \'
+ echo '    --request /tmp/group16_myid.xml > /tmp/group16_parent_response.xml'
+ echo 'krillc parents add --server $KRILL_SERVER \'
+ echo '    --ca "group16" \'
+ echo '    --parent ta \'
+ echo '    --response /tmp/group16_parent_response.xml'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=80
+ other_group_as=IXP
+ ca_name=group80
++ subnet_group 80
++ local n_grp=80
++ echo 80.0.0.0/8
+ other_group_subnet=80.0.0.0/8
+ '[' IXP '!=' IXP ']'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=81
+ other_group_as=IXP
+ ca_name=group81
++ subnet_group 81
++ local n_grp=81
++ echo 81.0.0.0/8
+ other_group_subnet=81.0.0.0/8
+ '[' IXP '!=' IXP ']'
+ (( k++ ))
+ (( k < n_groups ))
+ other_group_k=(${groups[$k]})
+ other_group_number=82
+ other_group_as=IXP
+ ca_name=group82
++ subnet_group 82
++ local n_grp=82
++ echo 82.0.0.0/8
+ other_group_subnet=82.0.0.0/8
+ '[' IXP '!=' IXP ']'
+ (( k++ ))
+ (( k < n_groups ))
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=2
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ touch /home/service/tud/mini_internet_project/platform/groups/g2/routinator.txt
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
++ subnet_host_router 2 0 host
++ local n_grp=2 n_router=0 device=host
++ '[' host = host ']'
++ echo 2.101.0.1/24
+ subnet=2.101.0.1/24
+ echo 2.101.0.1
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [ '
++ seq 1 253
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.1.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.2.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.3.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.4.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.5.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.6.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.7.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.8.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.9.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.10.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.11.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.12.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.13.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.14.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.15.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.16.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.17.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.18.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.19.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.20.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.21.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.22.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.23.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.24.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.25.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.26.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.27.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.28.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.29.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.30.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.31.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.32.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.33.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.34.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.35.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.36.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.37.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.38.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.39.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.40.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.41.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.42.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.43.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.44.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.45.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.46.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.47.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.48.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.49.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.50.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.51.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.52.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.53.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.54.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.55.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.56.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.57.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.58.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.59.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.60.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.61.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.62.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.63.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.64.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.65.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.66.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.67.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.68.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.69.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.70.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.71.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.72.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.73.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.74.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.75.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.76.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.77.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.78.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.79.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.80.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.81.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.82.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.83.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.84.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.85.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.86.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.87.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.88.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.89.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.90.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.91.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.92.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.93.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.94.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.95.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.96.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.97.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.98.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.99.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.100.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.101.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.102.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.103.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.104.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.105.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.106.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.107.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.108.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.109.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.110.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.111.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.112.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.113.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.114.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.115.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.116.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.117.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.118.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.119.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.120.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.121.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.122.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.123.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.124.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.125.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.126.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.127.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.128.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.129.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.130.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.131.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.132.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.133.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.134.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.135.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.136.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.137.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.138.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.139.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.140.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.141.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.142.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.143.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.144.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.145.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.146.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.147.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.148.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.149.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.150.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.151.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.152.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.153.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.154.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.155.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.156.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.157.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.158.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.159.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.160.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.161.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.162.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.163.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.164.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.165.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.166.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.167.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.168.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.169.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.170.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.171.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.172.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.173.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.174.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.175.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.176.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.177.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.178.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.179.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.180.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.181.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.182.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.183.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.184.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.185.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.186.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.187.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.188.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.189.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.190.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.191.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.192.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.193.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.194.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.195.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.196.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.197.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.198.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.199.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.200.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.201.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.202.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.203.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.204.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.205.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.206.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.207.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.208.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.209.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.210.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.211.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.212.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.213.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.214.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.215.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.216.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.217.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.218.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.219.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.220.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.221.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.222.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.223.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.224.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.225.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.226.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.227.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.228.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.229.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.230.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.231.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.232.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.233.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.234.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.235.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.236.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.237.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.238.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.239.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.240.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.241.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.242.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.243.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.244.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.245.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.246.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.247.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.248.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.249.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.250.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.251.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.252.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.253.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.254.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    } '
+ echo '  ],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=3
+ group_as=AS
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ touch /home/service/tud/mini_internet_project/platform/groups/g3/routinator.txt
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=8
+ n_intern_links=12
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCS
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCS == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ L2-DCS == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
++ subnet_host_router 3 3 host
++ local n_grp=3 n_router=3 device=host
++ '[' host = host ']'
++ echo 3.104.0.1/24
+ subnet=3.104.0.1/24
+ echo 3.104.0.1
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [ '
++ seq 1 253
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.1.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.2.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.3.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.4.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.5.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.6.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.7.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.8.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.9.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.10.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.11.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.12.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.13.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.14.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.15.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.16.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.17.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.18.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.19.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.20.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.21.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.22.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.23.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.24.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.25.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.26.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.27.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.28.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.29.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.30.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.31.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.32.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.33.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.34.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.35.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.36.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.37.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.38.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.39.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.40.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.41.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.42.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.43.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.44.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.45.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.46.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.47.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.48.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.49.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.50.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.51.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.52.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.53.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.54.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.55.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.56.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.57.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.58.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.59.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.60.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.61.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.62.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.63.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.64.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.65.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.66.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.67.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.68.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.69.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.70.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.71.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.72.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.73.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.74.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.75.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.76.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.77.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.78.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.79.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.80.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.81.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.82.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.83.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.84.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.85.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.86.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.87.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.88.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.89.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.90.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.91.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.92.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.93.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.94.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.95.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.96.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.97.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.98.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.99.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.100.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.101.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.102.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.103.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.104.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.105.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.106.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.107.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.108.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.109.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.110.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.111.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.112.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.113.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.114.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.115.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.116.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.117.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.118.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.119.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.120.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.121.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.122.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.123.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.124.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.125.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.126.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.127.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.128.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.129.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.130.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.131.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.132.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.133.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.134.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.135.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.136.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.137.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.138.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.139.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.140.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.141.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.142.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.143.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.144.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.145.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.146.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.147.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.148.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.149.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.150.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.151.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.152.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.153.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.154.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.155.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.156.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.157.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.158.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.159.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.160.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.161.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.162.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.163.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.164.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.165.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.166.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.167.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.168.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.169.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.170.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.171.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.172.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.173.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.174.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.175.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.176.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.177.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.178.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.179.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.180.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.181.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.182.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.183.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.184.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.185.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.186.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.187.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.188.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.189.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.190.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.191.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.192.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.193.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.194.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.195.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.196.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.197.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.198.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.199.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.200.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.201.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.202.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.203.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.204.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.205.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.206.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.207.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.208.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.209.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.210.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.211.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.212.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.213.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.214.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.215.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.216.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.217.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.218.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.219.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.220.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.221.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.222.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.223.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.224.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.225.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.226.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.227.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.228.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.229.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.230.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.231.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.232.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.233.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.234.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.235.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.236.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.237.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.238.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.239.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.240.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.241.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.242.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.243.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.244.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.245.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.246.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.247.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.248.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.249.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.250.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.251.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.252.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.253.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.254.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    } '
+ echo '  ],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=4
+ group_as=AS
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ touch /home/service/tud/mini_internet_project/platform/groups/g4/routinator.txt
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=8
+ n_intern_links=12
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCS
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCS == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ L2-DCS == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
++ subnet_host_router 4 3 host
++ local n_grp=4 n_router=3 device=host
++ '[' host = host ']'
++ echo 4.104.0.1/24
+ subnet=4.104.0.1/24
+ echo 4.104.0.1
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [ '
++ seq 1 253
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.1.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.2.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.3.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.4.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.5.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.6.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.7.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.8.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.9.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.10.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.11.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.12.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.13.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.14.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.15.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.16.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.17.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.18.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.19.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.20.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.21.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.22.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.23.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.24.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.25.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.26.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.27.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.28.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.29.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.30.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.31.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.32.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.33.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.34.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.35.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.36.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.37.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.38.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.39.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.40.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.41.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.42.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.43.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.44.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.45.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.46.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.47.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.48.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.49.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.50.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.51.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.52.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.53.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.54.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.55.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.56.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.57.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.58.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.59.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.60.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.61.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.62.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.63.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.64.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.65.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.66.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.67.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.68.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.69.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.70.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.71.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.72.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.73.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.74.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.75.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.76.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.77.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.78.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.79.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.80.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.81.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.82.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.83.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.84.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.85.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.86.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.87.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.88.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.89.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.90.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.91.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.92.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.93.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.94.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.95.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.96.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.97.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.98.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.99.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.100.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.101.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.102.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.103.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.104.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.105.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.106.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.107.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.108.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.109.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.110.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.111.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.112.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.113.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.114.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.115.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.116.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.117.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.118.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.119.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.120.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.121.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.122.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.123.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.124.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.125.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.126.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.127.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.128.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.129.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.130.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.131.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.132.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.133.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.134.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.135.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.136.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.137.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.138.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.139.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.140.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.141.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.142.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.143.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.144.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.145.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.146.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.147.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.148.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.149.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.150.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.151.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.152.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.153.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.154.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.155.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.156.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.157.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.158.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.159.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.160.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.161.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.162.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.163.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.164.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.165.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.166.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.167.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.168.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.169.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.170.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.171.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.172.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.173.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.174.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.175.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.176.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.177.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.178.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.179.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.180.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.181.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.182.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.183.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.184.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.185.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.186.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.187.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.188.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.189.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.190.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.191.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.192.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.193.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.194.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.195.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.196.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.197.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.198.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.199.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.200.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.201.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.202.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.203.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.204.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.205.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.206.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.207.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.208.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.209.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.210.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.211.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.212.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.213.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.214.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.215.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.216.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.217.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.218.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.219.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.220.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.221.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.222.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.223.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.224.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.225.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.226.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.227.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.228.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.229.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.230.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.231.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.232.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.233.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.234.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.235.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.236.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.237.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.238.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.239.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.240.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.241.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.242.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.243.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.244.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.245.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.246.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.247.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.248.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.249.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.250.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.251.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.252.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.253.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.254.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    } '
+ echo '  ],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=5
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ touch /home/service/tud/mini_internet_project/platform/groups/g5/routinator.txt
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
++ subnet_host_router 5 0 host
++ local n_grp=5 n_router=0 device=host
++ '[' host = host ']'
++ echo 5.101.0.1/24
+ subnet=5.101.0.1/24
+ echo 5.101.0.1
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [ '
++ seq 1 253
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.1.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.2.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.3.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.4.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.5.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.6.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.7.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.8.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.9.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.10.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.11.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.12.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.13.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.14.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.15.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.16.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.17.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.18.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.19.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.20.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.21.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.22.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.23.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.24.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.25.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.26.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.27.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.28.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.29.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.30.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.31.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.32.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.33.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.34.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.35.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.36.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.37.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.38.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.39.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.40.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.41.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.42.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.43.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.44.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.45.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.46.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.47.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.48.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.49.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.50.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.51.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.52.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.53.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.54.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.55.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.56.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.57.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.58.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.59.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.60.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.61.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.62.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.63.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.64.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.65.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.66.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.67.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.68.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.69.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.70.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.71.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.72.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.73.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.74.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.75.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.76.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.77.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.78.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.79.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.80.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.81.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.82.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.83.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.84.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.85.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.86.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.87.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.88.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.89.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.90.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.91.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.92.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.93.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.94.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.95.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.96.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.97.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.98.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.99.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.100.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.101.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.102.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.103.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.104.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.105.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.106.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.107.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.108.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.109.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.110.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.111.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.112.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.113.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.114.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.115.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.116.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.117.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.118.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.119.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.120.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.121.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.122.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.123.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.124.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.125.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.126.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.127.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.128.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.129.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.130.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.131.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.132.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.133.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.134.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.135.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.136.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.137.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.138.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.139.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.140.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.141.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.142.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.143.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.144.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.145.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.146.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.147.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.148.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.149.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.150.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.151.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.152.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.153.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.154.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.155.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.156.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.157.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.158.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.159.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.160.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.161.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.162.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.163.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.164.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.165.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.166.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.167.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.168.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.169.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.170.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.171.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.172.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.173.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.174.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.175.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.176.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.177.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.178.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.179.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.180.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.181.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.182.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.183.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.184.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.185.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.186.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.187.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.188.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.189.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.190.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.191.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.192.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.193.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.194.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.195.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.196.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.197.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.198.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.199.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.200.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.201.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.202.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.203.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.204.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.205.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.206.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.207.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.208.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.209.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.210.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.211.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.212.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.213.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.214.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.215.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.216.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.217.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.218.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.219.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.220.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.221.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.222.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.223.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.224.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.225.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.226.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.227.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.228.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.229.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.230.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.231.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.232.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.233.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.234.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.235.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.236.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.237.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.238.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.239.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.240.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.241.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.242.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.243.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.244.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.245.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.246.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.247.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.248.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.249.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.250.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.251.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.252.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.253.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.254.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    } '
+ echo '  ],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=6
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ touch /home/service/tud/mini_internet_project/platform/groups/g6/routinator.txt
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
++ subnet_host_router 6 0 host
++ local n_grp=6 n_router=0 device=host
++ '[' host = host ']'
++ echo 6.101.0.1/24
+ subnet=6.101.0.1/24
+ echo 6.101.0.1
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [ '
++ seq 1 253
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.1.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.2.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.3.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.4.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.5.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.6.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.7.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.8.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.9.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.10.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.11.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.12.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.13.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.14.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.15.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.16.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.17.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.18.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.19.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.20.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.21.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.22.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.23.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.24.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.25.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.26.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.27.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.28.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.29.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.30.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.31.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.32.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.33.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.34.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.35.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.36.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.37.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.38.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.39.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.40.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.41.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.42.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.43.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.44.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.45.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.46.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.47.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.48.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.49.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.50.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.51.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.52.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.53.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.54.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.55.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.56.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.57.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.58.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.59.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.60.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.61.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.62.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.63.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.64.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.65.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.66.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.67.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.68.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.69.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.70.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.71.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.72.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.73.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.74.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.75.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.76.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.77.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.78.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.79.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.80.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.81.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.82.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.83.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.84.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.85.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.86.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.87.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.88.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.89.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.90.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.91.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.92.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.93.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.94.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.95.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.96.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.97.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.98.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.99.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.100.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.101.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.102.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.103.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.104.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.105.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.106.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.107.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.108.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.109.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.110.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.111.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.112.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.113.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.114.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.115.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.116.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.117.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.118.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.119.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.120.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.121.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.122.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.123.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.124.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.125.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.126.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.127.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.128.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.129.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.130.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.131.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.132.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.133.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.134.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.135.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.136.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.137.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.138.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.139.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.140.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.141.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.142.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.143.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.144.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.145.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.146.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.147.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.148.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.149.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.150.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.151.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.152.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.153.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.154.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.155.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.156.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.157.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.158.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.159.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.160.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.161.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.162.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.163.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.164.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.165.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.166.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.167.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.168.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.169.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.170.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.171.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.172.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.173.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.174.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.175.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.176.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.177.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.178.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.179.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.180.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.181.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.182.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.183.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.184.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.185.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.186.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.187.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.188.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.189.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.190.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.191.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.192.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.193.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.194.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.195.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.196.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.197.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.198.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.199.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.200.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.201.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.202.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.203.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.204.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.205.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.206.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.207.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.208.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.209.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.210.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.211.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.212.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.213.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.214.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.215.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.216.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.217.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.218.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.219.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.220.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.221.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.222.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.223.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.224.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.225.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.226.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.227.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.228.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.229.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.230.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.231.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.232.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.233.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.234.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.235.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.236.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.237.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.238.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.239.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.240.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.241.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.242.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.243.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.244.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.245.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.246.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.247.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.248.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.249.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.250.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.251.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.252.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.253.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.254.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    } '
+ echo '  ],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=11
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ touch /home/service/tud/mini_internet_project/platform/groups/g11/routinator.txt
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
++ subnet_host_router 11 0 host
++ local n_grp=11 n_router=0 device=host
++ '[' host = host ']'
++ echo 11.101.0.1/24
+ subnet=11.101.0.1/24
+ echo 11.101.0.1
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [ '
++ seq 1 253
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.1.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.2.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.3.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.4.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.5.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.6.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.7.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.8.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.9.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.10.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.11.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.12.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.13.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.14.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.15.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.16.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.17.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.18.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.19.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.20.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.21.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.22.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.23.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.24.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.25.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.26.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.27.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.28.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.29.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.30.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.31.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.32.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.33.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.34.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.35.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.36.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.37.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.38.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.39.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.40.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.41.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.42.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.43.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.44.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.45.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.46.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.47.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.48.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.49.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.50.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.51.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.52.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.53.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.54.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.55.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.56.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.57.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.58.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.59.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.60.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.61.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.62.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.63.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.64.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.65.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.66.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.67.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.68.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.69.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.70.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.71.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.72.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.73.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.74.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.75.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.76.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.77.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.78.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.79.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.80.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.81.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.82.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.83.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.84.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.85.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.86.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.87.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.88.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.89.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.90.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.91.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.92.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.93.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.94.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.95.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.96.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.97.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.98.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.99.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.100.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.101.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.102.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.103.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.104.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.105.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.106.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.107.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.108.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.109.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.110.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.111.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.112.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.113.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.114.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.115.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.116.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.117.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.118.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.119.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.120.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.121.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.122.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.123.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.124.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.125.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.126.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.127.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.128.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.129.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.130.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.131.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.132.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.133.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.134.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.135.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.136.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.137.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.138.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.139.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.140.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.141.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.142.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.143.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.144.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.145.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.146.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.147.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.148.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.149.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.150.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.151.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.152.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.153.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.154.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.155.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.156.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.157.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.158.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.159.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.160.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.161.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.162.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.163.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.164.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.165.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.166.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.167.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.168.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.169.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.170.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.171.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.172.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.173.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.174.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.175.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.176.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.177.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.178.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.179.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.180.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.181.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.182.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.183.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.184.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.185.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.186.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.187.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.188.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.189.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.190.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.191.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.192.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.193.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.194.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.195.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.196.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.197.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.198.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.199.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.200.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.201.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.202.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.203.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.204.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.205.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.206.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.207.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.208.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.209.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.210.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.211.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.212.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.213.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.214.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.215.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.216.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.217.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.218.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.219.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.220.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.221.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.222.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.223.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.224.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.225.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.226.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.227.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.228.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.229.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.230.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.231.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.232.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.233.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.234.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.235.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.236.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.237.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.238.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.239.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.240.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.241.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.242.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.243.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.244.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.245.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.246.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.247.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.248.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.249.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.250.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.251.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.252.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.253.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.254.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    } '
+ echo '  ],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=12
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ touch /home/service/tud/mini_internet_project/platform/groups/g12/routinator.txt
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
++ subnet_host_router 12 0 host
++ local n_grp=12 n_router=0 device=host
++ '[' host = host ']'
++ echo 12.101.0.1/24
+ subnet=12.101.0.1/24
+ echo 12.101.0.1
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [ '
++ seq 1 253
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.1.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.2.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.3.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.4.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.5.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.6.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.7.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.8.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.9.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.10.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.11.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.12.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.13.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.14.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.15.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.16.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.17.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.18.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.19.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.20.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.21.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.22.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.23.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.24.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.25.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.26.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.27.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.28.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.29.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.30.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.31.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.32.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.33.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.34.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.35.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.36.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.37.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.38.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.39.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.40.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.41.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.42.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.43.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.44.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.45.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.46.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.47.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.48.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.49.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.50.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.51.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.52.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.53.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.54.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.55.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.56.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.57.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.58.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.59.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.60.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.61.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.62.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.63.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.64.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.65.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.66.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.67.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.68.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.69.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.70.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.71.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.72.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.73.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.74.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.75.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.76.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.77.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.78.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.79.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.80.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.81.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.82.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.83.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.84.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.85.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.86.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.87.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.88.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.89.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.90.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.91.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.92.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.93.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.94.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.95.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.96.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.97.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.98.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.99.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.100.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.101.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.102.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.103.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.104.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.105.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.106.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.107.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.108.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.109.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.110.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.111.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.112.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.113.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.114.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.115.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.116.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.117.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.118.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.119.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.120.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.121.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.122.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.123.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.124.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.125.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.126.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.127.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.128.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.129.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.130.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.131.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.132.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.133.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.134.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.135.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.136.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.137.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.138.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.139.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.140.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.141.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.142.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.143.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.144.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.145.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.146.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.147.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.148.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.149.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.150.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.151.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.152.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.153.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.154.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.155.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.156.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.157.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.158.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.159.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.160.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.161.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.162.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.163.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.164.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.165.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.166.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.167.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.168.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.169.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.170.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.171.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.172.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.173.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.174.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.175.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.176.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.177.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.178.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.179.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.180.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.181.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.182.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.183.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.184.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.185.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.186.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.187.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.188.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.189.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.190.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.191.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.192.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.193.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.194.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.195.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.196.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.197.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.198.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.199.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.200.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.201.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.202.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.203.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.204.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.205.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.206.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.207.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.208.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.209.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.210.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.211.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.212.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.213.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.214.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.215.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.216.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.217.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.218.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.219.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.220.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.221.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.222.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.223.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.224.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.225.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.226.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.227.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.228.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.229.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.230.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.231.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.232.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.233.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.234.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.235.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.236.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.237.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.238.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.239.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.240.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.241.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.242.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.243.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.244.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.245.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.246.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.247.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.248.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.249.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.250.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.251.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.252.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.253.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.254.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    } '
+ echo '  ],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=13
+ group_as=AS
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ touch /home/service/tud/mini_internet_project/platform/groups/g13/routinator.txt
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=8
+ n_intern_links=12
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCS
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCS == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ L2-DCS == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
++ subnet_host_router 13 3 host
++ local n_grp=13 n_router=3 device=host
++ '[' host = host ']'
++ echo 13.104.0.1/24
+ subnet=13.104.0.1/24
+ echo 13.104.0.1
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [ '
++ seq 1 253
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.1.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.2.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.3.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.4.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.5.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.6.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.7.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.8.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.9.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.10.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.11.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.12.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.13.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.14.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.15.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.16.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.17.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.18.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.19.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.20.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.21.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.22.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.23.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.24.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.25.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.26.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.27.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.28.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.29.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.30.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.31.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.32.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.33.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.34.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.35.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.36.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.37.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.38.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.39.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.40.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.41.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.42.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.43.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.44.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.45.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.46.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.47.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.48.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.49.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.50.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.51.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.52.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.53.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.54.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.55.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.56.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.57.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.58.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.59.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.60.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.61.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.62.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.63.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.64.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.65.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.66.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.67.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.68.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.69.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.70.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.71.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.72.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.73.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.74.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.75.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.76.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.77.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.78.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.79.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.80.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.81.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.82.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.83.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.84.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.85.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.86.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.87.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.88.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.89.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.90.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.91.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.92.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.93.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.94.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.95.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.96.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.97.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.98.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.99.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.100.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.101.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.102.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.103.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.104.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.105.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.106.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.107.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.108.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.109.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.110.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.111.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.112.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.113.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.114.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.115.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.116.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.117.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.118.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.119.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.120.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.121.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.122.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.123.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.124.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.125.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.126.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.127.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.128.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.129.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.130.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.131.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.132.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.133.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.134.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.135.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.136.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.137.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.138.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.139.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.140.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.141.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.142.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.143.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.144.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.145.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.146.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.147.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.148.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.149.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.150.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.151.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.152.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.153.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.154.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.155.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.156.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.157.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.158.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.159.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.160.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.161.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.162.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.163.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.164.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.165.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.166.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.167.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.168.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.169.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.170.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.171.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.172.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.173.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.174.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.175.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.176.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.177.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.178.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.179.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.180.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.181.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.182.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.183.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.184.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.185.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.186.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.187.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.188.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.189.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.190.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.191.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.192.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.193.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.194.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.195.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.196.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.197.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.198.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.199.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.200.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.201.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.202.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.203.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.204.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.205.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.206.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.207.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.208.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.209.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.210.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.211.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.212.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.213.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.214.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.215.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.216.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.217.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.218.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.219.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.220.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.221.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.222.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.223.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.224.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.225.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.226.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.227.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.228.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.229.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.230.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.231.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.232.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.233.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.234.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.235.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.236.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.237.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.238.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.239.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.240.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.241.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.242.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.243.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.244.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.245.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.246.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.247.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.248.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.249.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.250.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.251.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.252.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.253.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.254.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    } '
+ echo '  ],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=14
+ group_as=AS
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ touch /home/service/tud/mini_internet_project/platform/groups/g14/routinator.txt
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=8
+ n_intern_links=12
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCS
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCS == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ L2-DCS == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
++ subnet_host_router 14 3 host
++ local n_grp=14 n_router=3 device=host
++ '[' host = host ']'
++ echo 14.104.0.1/24
+ subnet=14.104.0.1/24
+ echo 14.104.0.1
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [ '
++ seq 1 253
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.1.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.2.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.3.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.4.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.5.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.6.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.7.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.8.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.9.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.10.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.11.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.12.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.13.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.14.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.15.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.16.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.17.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.18.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.19.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.20.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.21.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.22.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.23.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.24.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.25.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.26.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.27.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.28.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.29.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.30.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.31.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.32.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.33.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.34.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.35.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.36.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.37.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.38.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.39.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.40.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.41.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.42.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.43.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.44.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.45.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.46.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.47.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.48.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.49.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.50.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.51.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.52.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.53.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.54.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.55.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.56.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.57.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.58.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.59.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.60.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.61.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.62.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.63.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.64.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.65.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.66.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.67.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.68.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.69.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.70.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.71.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.72.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.73.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.74.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.75.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.76.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.77.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.78.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.79.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.80.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.81.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.82.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.83.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.84.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.85.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.86.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.87.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.88.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.89.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.90.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.91.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.92.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.93.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.94.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.95.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.96.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.97.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.98.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.99.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.100.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.101.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.102.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.103.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.104.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.105.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.106.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.107.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.108.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.109.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.110.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.111.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.112.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.113.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.114.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.115.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.116.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.117.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.118.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.119.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.120.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.121.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.122.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.123.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.124.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.125.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.126.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.127.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.128.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.129.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.130.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.131.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.132.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.133.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.134.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.135.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.136.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.137.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.138.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.139.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.140.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.141.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.142.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.143.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.144.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.145.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.146.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.147.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.148.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.149.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.150.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.151.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.152.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.153.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.154.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.155.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.156.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.157.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.158.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.159.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.160.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.161.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.162.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.163.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.164.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.165.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.166.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.167.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.168.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.169.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.170.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.171.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.172.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.173.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.174.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.175.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.176.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.177.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.178.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.179.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.180.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.181.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.182.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.183.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.184.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.185.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.186.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.187.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.188.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.189.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.190.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.191.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.192.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.193.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.194.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.195.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.196.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.197.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.198.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.199.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.200.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.201.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.202.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.203.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.204.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.205.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.206.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.207.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.208.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.209.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.210.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.211.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.212.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.213.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.214.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.215.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.216.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.217.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.218.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.219.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.220.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.221.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.222.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.223.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.224.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.225.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.226.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.227.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.228.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.229.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.230.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.231.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.232.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.233.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.234.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.235.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.236.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.237.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.238.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.239.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.240.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.241.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.242.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.243.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.244.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.245.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.246.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.247.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.248.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.249.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.250.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.251.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.252.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.253.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.254.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    } '
+ echo '  ],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ host == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=15
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ touch /home/service/tud/mini_internet_project/platform/groups/g15/routinator.txt
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
++ subnet_host_router 15 0 host
++ local n_grp=15 n_router=0 device=host
++ '[' host = host ']'
++ echo 15.101.0.1/24
+ subnet=15.101.0.1/24
+ echo 15.101.0.1
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [ '
++ seq 1 253
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.1.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.2.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.3.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.4.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.5.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.6.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.7.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.8.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.9.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.10.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.11.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.12.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.13.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.14.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.15.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.16.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.17.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.18.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.19.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.20.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.21.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.22.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.23.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.24.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.25.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.26.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.27.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.28.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.29.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.30.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.31.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.32.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.33.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.34.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.35.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.36.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.37.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.38.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.39.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.40.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.41.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.42.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.43.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.44.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.45.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.46.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.47.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.48.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.49.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.50.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.51.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.52.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.53.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.54.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.55.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.56.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.57.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.58.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.59.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.60.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.61.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.62.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.63.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.64.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.65.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.66.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.67.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.68.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.69.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.70.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.71.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.72.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.73.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.74.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.75.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.76.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.77.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.78.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.79.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.80.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.81.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.82.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.83.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.84.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.85.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.86.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.87.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.88.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.89.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.90.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.91.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.92.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.93.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.94.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.95.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.96.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.97.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.98.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.99.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.100.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.101.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.102.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.103.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.104.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.105.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.106.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.107.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.108.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.109.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.110.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.111.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.112.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.113.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.114.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.115.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.116.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.117.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.118.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.119.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.120.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.121.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.122.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.123.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.124.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.125.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.126.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.127.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.128.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.129.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.130.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.131.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.132.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.133.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.134.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.135.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.136.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.137.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.138.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.139.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.140.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.141.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.142.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.143.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.144.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.145.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.146.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.147.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.148.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.149.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.150.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.151.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.152.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.153.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.154.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.155.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.156.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.157.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.158.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.159.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.160.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.161.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.162.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.163.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.164.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.165.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.166.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.167.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.168.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.169.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.170.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.171.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.172.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.173.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.174.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.175.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.176.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.177.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.178.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.179.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.180.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.181.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.182.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.183.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.184.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.185.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.186.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.187.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.188.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.189.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.190.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.191.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.192.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.193.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.194.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.195.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.196.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.197.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.198.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.199.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.200.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.201.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.202.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.203.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.204.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.205.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.206.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.207.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.208.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.209.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.210.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.211.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.212.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.213.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.214.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.215.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.216.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.217.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.218.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.219.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.220.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.221.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.222.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.223.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.224.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.225.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.226.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.227.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.228.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.229.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.230.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.231.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.232.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.233.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.234.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.235.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.236.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.237.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.238.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.239.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.240.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.241.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.242.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.243.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.244.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.245.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.246.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.247.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.248.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.249.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.250.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.251.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.252.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.253.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.254.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    } '
+ echo '  ],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=16
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ touch /home/service/tud/mini_internet_project/platform/groups/g16/routinator.txt
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray intern_links
+ n_routers=4
+ n_intern_links=0
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
++ subnet_host_router 16 0 host
++ local n_grp=16 n_router=0 device=host
++ '[' host = host ']'
++ echo 16.101.0.1/24
+ subnet=16.101.0.1/24
+ echo 16.101.0.1
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ echo '{'
+ echo '  "slurmVersion": 1,'
+ echo '  "validationOutputFilters": {'
+ echo '    "prefixFilters": [],'
+ echo '    "bgpsecFilters": []'
+ echo '  },'
+ echo '  "locallyAddedAssertions": {'
+ echo '    "prefixAssertions": [ '
++ seq 1 253
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.1.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.2.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.3.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.4.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.5.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.6.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.7.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.8.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.9.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.10.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.11.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.12.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.13.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.14.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.15.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.16.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.17.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.18.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.19.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.20.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.21.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.22.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.23.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.24.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.25.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.26.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.27.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.28.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.29.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.30.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.31.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.32.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.33.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.34.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.35.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.36.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.37.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.38.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.39.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.40.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.41.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.42.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.43.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.44.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.45.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.46.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.47.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.48.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.49.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.50.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.51.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.52.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.53.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.54.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.55.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.56.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.57.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.58.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.59.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.60.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.61.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.62.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.63.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.64.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.65.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.66.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.67.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.68.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.69.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.70.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.71.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.72.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.73.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.74.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.75.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.76.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.77.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.78.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.79.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.80.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.81.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.82.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.83.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.84.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.85.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.86.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.87.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.88.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.89.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.90.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.91.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.92.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.93.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.94.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.95.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.96.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.97.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.98.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.99.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.100.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.101.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.102.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.103.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.104.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.105.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.106.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.107.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.108.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.109.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.110.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.111.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.112.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.113.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.114.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.115.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.116.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.117.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.118.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.119.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.120.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.121.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.122.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.123.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.124.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.125.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.126.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.127.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.128.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.129.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.130.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.131.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.132.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.133.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.134.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.135.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.136.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.137.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.138.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.139.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.140.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.141.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.142.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.143.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.144.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.145.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.146.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.147.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.148.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.149.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.150.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.151.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.152.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.153.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.154.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.155.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.156.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.157.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.158.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.159.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.160.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.161.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.162.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.163.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.164.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.165.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.166.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.167.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.168.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.169.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.170.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.171.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.172.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.173.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.174.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.175.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.176.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.177.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.178.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.179.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.180.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.181.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.182.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.183.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.184.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.185.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.186.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.187.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.188.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.189.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.190.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.191.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.192.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.193.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.194.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.195.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.196.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.197.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.198.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.199.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.200.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.201.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.202.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.203.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.204.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.205.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.206.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.207.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.208.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.209.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.210.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.211.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.212.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.213.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.214.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.215.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.216.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.217.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.218.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.219.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.220.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.221.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.222.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.223.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.224.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.225.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.226.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.227.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.228.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.229.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.230.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.231.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.232.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.233.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.234.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.235.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.236.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.237.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.238.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.239.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.240.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.241.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.242.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.243.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.244.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.245.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.246.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.247.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.248.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.249.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.250.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.251.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.252.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ for seqv in $(seq 1 253)
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.253.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    }, '
+ echo '    { '
+ echo '      "asn": 10000, '
+ echo '      "prefix": "200.254.0.0/16", '
+ echo '      "maxPrefixLength": 16, '
+ echo '      "comment": "used by the autograder container" '
+ echo '    } '
+ echo '  ],'
+ echo '    "bgpsecAssertions": []'
+ echo '  }'
+ echo '}'
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ [[ N/A == *\k\r\i\l\l* ]]
+ (( i++ ))
+ (( i < n_routers ))
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=80
+ group_as=IXP
+ group_router_config=N/A
+ group_internal_links=N/A
+ touch /home/service/tud/mini_internet_project/platform/groups/g80/routinator.txt
+ '[' IXP '!=' IXP ']'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=81
+ group_as=IXP
+ group_router_config=N/A
+ group_internal_links=N/A
+ touch /home/service/tud/mini_internet_project/platform/groups/g81/routinator.txt
+ '[' IXP '!=' IXP ']'
+ (( j++ ))
+ (( j < n_groups ))
+ group_j=(${groups[$j]})
+ group_number=82
+ group_as=IXP
+ group_router_config=N/A
+ group_internal_links=N/A
+ touch /home/service/tud/mini_internet_project/platform/groups/g82/routinator.txt
+ '[' IXP '!=' IXP ']'
+ (( j++ ))
+ (( j < n_groups ))
+ wait

real	0m3.419s
user	0m3.092s
sys	0m0.353s
+ echo ''

+ echo ''

++ date +%s%N
+ echo 'goto_scripts.sh 1735322397484'
+ echo 'goto_scripts.sh: '
goto_scripts.sh: 
+ /home/service/tud/mini_internet_project/platform/setup/goto_scripts.sh /home/service/tud/mini_internet_project/platform /home/service/tud/mini_internet_project/platform/config
+ set -o nounset
+ DIRECTORY=/home/service/tud/mini_internet_project/platform
+ CONFIG_DIRECTORY=/home/service/tud/mini_internet_project/platform/config
+ source /home/service/tud/mini_internet_project/platform/config/subnet_config.sh
++ set -o errexit
++ set -o pipefail
++ set -o nounset
+ readarray groups
+ n_groups=15
+ (( k=0 ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=1
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_krill.txt
+ group_internal_links=l3_links_krill.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g1/goto.sh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo 'location=${1,,}'
+ echo 'device=${2:-router}'
+ echo 'device=${device,,}'
+ echo ''
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g1/goto.sh
+ declare -A l2_id
+ declare -A l2_cur
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=krill:miniinterneteth/d_krill
++ echo krill:miniinterneteth/d_krill
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=krill
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ ! -z miniinterneteth/d_routinator ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host0" ]; then'
++ subnet_sshContainer_groupContainer 1 0 -1 L3-host
++ local n_grp=1 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.1.10.2/16
+ echo '  subnet=158.1.10.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ true == \t\r\u\e ]]
+ [[ 0 -gt 0 ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 1 0 -1 router
++ local n_grp=1 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.1.10.1/16
+ echo '  subnet=158.1.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=krill:miniinterneteth/d_krill
+ rcmd=vtysh
++ echo krill:miniinterneteth/d_krill
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_krill
++ echo krill:miniinterneteth/d_krill
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=krill
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ ! -z miniinterneteth/d_krill ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=1
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host1" ]; then'
++ subnet_sshContainer_groupContainer 1 1 -1 L3-host
++ local n_grp=1 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.1.11.2/16
+ echo '  subnet=158.1.11.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ true == \t\r\u\e ]]
+ [[ 1 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=2
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 2 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 2 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 3 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ last_l2name_s=
+ last_sname_s=
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ last_l2name_h=
+ last_hname=
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo 'if [ "${location}" == "measurement" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 1 -1 -1 MEASUREMENT
++ local n_grp=1 n_router=-1 n_layer2=-1 device=MEASUREMENT
++ '[' MEASUREMENT = sshContainer ']'
++ '[' MEASUREMENT = MEASUREMENT ']'
++ echo 158.1.0.3/16
+ echo '  subnet=158.1.0.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ echo 'echo "invalid arguments"'
+ echo 'echo "valid examples:"'
+ echo 'echo "./goto.sh zuri"'
+ echo 'echo "./goto.sh zuri router"'
+ echo 'echo "./goto.sh zuri host"'
+ '[' '' '!=' '' ']'
+ echo 'echo "./goto.sh measurement"'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=2
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g2/goto.sh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo 'location=${1,,}'
+ echo 'device=${2:-router}'
+ echo 'device=${device,,}'
+ echo ''
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g2/goto.sh
+ declare -A l2_id
+ declare -A l2_cur
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ ! -z miniinterneteth/d_routinator ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host0" ]; then'
++ subnet_sshContainer_groupContainer 2 0 -1 L3-host
++ local n_grp=2 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.2.10.2/16
+ echo '  subnet=158.2.10.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ true == \t\r\u\e ]]
+ [[ 0 -gt 0 ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 2 0 -1 router
++ local n_grp=2 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.2.10.1/16
+ echo '  subnet=158.2.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 1 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 2 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 3 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ last_l2name_s=
+ last_sname_s=
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ last_l2name_h=
+ last_hname=
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo 'if [ "${location}" == "measurement" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 2 -1 -1 MEASUREMENT
++ local n_grp=2 n_router=-1 n_layer2=-1 device=MEASUREMENT
++ '[' MEASUREMENT = sshContainer ']'
++ '[' MEASUREMENT = MEASUREMENT ']'
++ echo 158.2.0.3/16
+ echo '  subnet=158.2.0.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ echo 'echo "invalid arguments"'
+ echo 'echo "valid examples:"'
+ echo 'echo "./goto.sh zuri"'
+ echo 'echo "./goto.sh zuri router"'
+ echo 'echo "./goto.sh zuri host"'
+ '[' '' '!=' '' ']'
+ echo 'echo "./goto.sh measurement"'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=3
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ group_layer2_switches=l2_switches.txt
+ group_layer2_hosts=l2_hosts.txt
+ group_layer2_links=l2_links.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g3/goto.sh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=8
+ n_l2_switches=4
+ n_l2_hosts=11
+ n_l2_links=3
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo 'location=${1,,}'
+ echo 'device=${2:-router}'
+ echo 'device=${device,,}'
+ echo ''
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g3/goto.sh
+ declare -A l2_id
+ declare -A l2_cur
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=base
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=gene
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=luga
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=muni
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=lyon
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=vien
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=mila
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 3 0 -1 L3-host
++ local n_grp=3 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.10.2/16
+ echo '  subnet=158.3.10.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' linux == vtysh ']'
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 3 0 -1 router
++ local n_grp=3 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.10.1/16
+ echo '  subnet=158.3.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "container" ]; then'
++ subnet_sshContainer_groupContainer 3 0 -1 router
++ local n_grp=3 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.10.1/16
+ echo '  subnet=158.3.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" bash'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=base
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=vtysh
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 0 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "base" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 3 1 -1 L3-host
++ local n_grp=3 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.11.2/16
+ echo '  subnet=158.3.11.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "base" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 3 1 -1 router
++ local n_grp=3 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.11.1/16
+ echo '  subnet=158.3.11.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=gene
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCS:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=2
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "gene" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 3 2 -1 L3-host
++ local n_grp=3 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.12.2/16
+ echo '  subnet=158.3.12.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' linux == vtysh ']'
+ echo 'if [ "${location}" == "gene" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 3 2 -1 router
++ local n_grp=3 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.12.1/16
+ echo '  subnet=158.3.12.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ echo 'if [ "${location}" == "gene" ] && [ "${device}" == "container" ]; then'
++ subnet_sshContainer_groupContainer 3 2 -1 router
++ local n_grp=3 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.12.1/16
+ echo '  subnet=158.3.12.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" bash'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=luga
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=3
+ [[ ! -z miniinterneteth/d_routinator ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "luga" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 3 3 -1 L3-host
++ local n_grp=3 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.13.2/16
+ echo '  subnet=158.3.13.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "luga" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 3 3 -1 router
++ local n_grp=3 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.13.1/16
+ echo '  subnet=158.3.13.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=muni
+ property1=N/A
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=4
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "muni" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 3 4 -1 L3-host
++ local n_grp=3 n_router=4 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.14.2/16
+ echo '  subnet=158.3.14.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "muni" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 3 4 -1 router
++ local n_grp=3 n_router=4 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.14.1/16
+ echo '  subnet=158.3.14.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=lyon
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 4 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "lyon" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 3 5 -1 L3-host
++ local n_grp=3 n_router=5 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.15.2/16
+ echo '  subnet=158.3.15.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "lyon" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 3 5 -1 router
++ local n_grp=3 n_router=5 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.15.1/16
+ echo '  subnet=158.3.15.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=vien
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 4 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "vien" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 3 6 -1 L3-host
++ local n_grp=3 n_router=6 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.16.2/16
+ echo '  subnet=158.3.16.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "vien" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 3 6 -1 router
++ local n_grp=3 n_router=6 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.16.1/16
+ echo '  subnet=158.3.16.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=mila
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 4 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "mila" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 3 7 -1 L3-host
++ local n_grp=3 n_router=7 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.17.2/16
+ echo '  subnet=158.3.17.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "mila" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 3 7 -1 router
++ local n_grp=3 n_router=7 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.17.1/16
+ echo '  subnet=158.3.17.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ last_l2name_s=
+ last_sname_s=
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ l2_lower=dcn
+ sname=s1
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "s1" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 0 switch
++ local n_grp=3 n_router=-1 n_layer2=0 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.3.100.3/16
+ echo '  subnet=158.3.100.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=1
+ last_l2name_s=DCN
+ last_sname_s=s1
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ l2_lower=dcn
+ sname=s2
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "s2" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 1 switch
++ local n_grp=3 n_router=-1 n_layer2=1 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.3.100.4/16
+ echo '  subnet=158.3.100.4/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=2
+ last_l2name_s=DCN
+ last_sname_s=s2
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ l2_lower=dcn
+ sname=s3
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "s3" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 2 switch
++ local n_grp=3 n_router=-1 n_layer2=2 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.3.100.5/16
+ echo '  subnet=158.3.100.5/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=3
+ last_l2name_s=DCN
+ last_sname_s=s3
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCS
+ l2_lower=dcs
+ sname=s4
+ echo 'if [ "${location}" == "dcs" ] && [ "${device}" == "s4" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 3 switch
++ local n_grp=3 n_router=-1 n_layer2=3 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.3.100.6/16
+ echo '  subnet=158.3.100.6/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=1
+ last_l2name_s=DCS
+ last_sname_s=s4
+ (( l++ ))
+ (( l<n_l2_switches ))
+ last_l2name_h=
+ last_hname=
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_1
+ [[ fifa_1 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "fifa_1" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 0 L2-host
++ local n_grp=3 n_router=-1 n_layer2=0 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.3/16
+ echo '  subnet=158.3.200.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=4
+ last_l2name_h=DCN
+ last_hname=fifa_1
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_1
+ [[ uefa_1 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "uefa_1" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 1 L2-host
++ local n_grp=3 n_router=-1 n_layer2=1 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.4/16
+ echo '  subnet=158.3.200.4/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=5
+ last_l2name_h=DCN
+ last_hname=uefa_1
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_1
+ [[ vpn_1 != *vpn* ]]
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_2
+ [[ fifa_2 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "fifa_2" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 3 L2-host
++ local n_grp=3 n_router=-1 n_layer2=3 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.6/16
+ echo '  subnet=158.3.200.6/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=6
+ last_l2name_h=DCN
+ last_hname=fifa_2
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_2
+ [[ uefa_2 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "uefa_2" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 4 L2-host
++ local n_grp=3 n_router=-1 n_layer2=4 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.7/16
+ echo '  subnet=158.3.200.7/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=7
+ last_l2name_h=DCN
+ last_hname=uefa_2
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_2
+ [[ vpn_2 != *vpn* ]]
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_3
+ [[ fifa_3 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "fifa_3" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 6 L2-host
++ local n_grp=3 n_router=-1 n_layer2=6 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.9/16
+ echo '  subnet=158.3.200.9/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=8
+ last_l2name_h=DCN
+ last_hname=fifa_3
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_3
+ [[ uefa_3 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "uefa_3" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 7 L2-host
++ local n_grp=3 n_router=-1 n_layer2=7 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.10/16
+ echo '  subnet=158.3.200.10/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=9
+ last_l2name_h=DCN
+ last_hname=uefa_3
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_3
+ [[ vpn_3 != *vpn* ]]
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_4
+ [[ fifa_4 != *vpn* ]]
+ l2_name=DCS
+ l2_lower=dcs
+ echo 'if [ "${location}" == "dcs" ] && [ "${device}" == "fifa_4" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 9 L2-host
++ local n_grp=3 n_router=-1 n_layer2=9 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.12/16
+ echo '  subnet=158.3.200.12/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=2
+ last_l2name_h=DCS
+ last_hname=fifa_4
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_4
+ [[ uefa_4 != *vpn* ]]
+ l2_name=DCS
+ l2_lower=dcs
+ echo 'if [ "${location}" == "dcs" ] && [ "${device}" == "uefa_4" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 10 L2-host
++ local n_grp=3 n_router=-1 n_layer2=10 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.13/16
+ echo '  subnet=158.3.200.13/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=3
+ last_l2name_h=DCS
+ last_hname=uefa_4
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ echo 'if [ "${location}" == "measurement" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 3 -1 -1 MEASUREMENT
++ local n_grp=3 n_router=-1 n_layer2=-1 device=MEASUREMENT
++ '[' MEASUREMENT = sshContainer ']'
++ '[' MEASUREMENT = MEASUREMENT ']'
++ echo 158.3.0.3/16
+ echo '  subnet=158.3.0.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ echo 'echo "invalid arguments"'
+ echo 'echo "valid examples:"'
+ echo 'echo "./goto.sh mila"'
+ echo 'echo "./goto.sh mila router"'
+ echo 'echo "./goto.sh mila host"'
+ '[' DCS '!=' '' ']'
+ echo 'echo "./goto.sh DCS s4"'
+ echo 'echo "./goto.sh DCS uefa_4"'
+ echo 'echo "./goto.sh measurement"'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=4
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ group_layer2_switches=l2_switches.txt
+ group_layer2_hosts=l2_hosts.txt
+ group_layer2_links=l2_links.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g4/goto.sh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=8
+ n_l2_switches=4
+ n_l2_hosts=11
+ n_l2_links=3
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo 'location=${1,,}'
+ echo 'device=${2:-router}'
+ echo 'device=${device,,}'
+ echo ''
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g4/goto.sh
+ declare -A l2_id
+ declare -A l2_cur
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=base
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=gene
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=luga
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=muni
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=lyon
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=vien
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=mila
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 4 0 -1 L3-host
++ local n_grp=4 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.10.2/16
+ echo '  subnet=158.4.10.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' linux == vtysh ']'
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 4 0 -1 router
++ local n_grp=4 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.10.1/16
+ echo '  subnet=158.4.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "container" ]; then'
++ subnet_sshContainer_groupContainer 4 0 -1 router
++ local n_grp=4 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.10.1/16
+ echo '  subnet=158.4.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" bash'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=base
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=vtysh
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 0 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "base" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 4 1 -1 L3-host
++ local n_grp=4 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.11.2/16
+ echo '  subnet=158.4.11.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "base" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 4 1 -1 router
++ local n_grp=4 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.11.1/16
+ echo '  subnet=158.4.11.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=gene
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCS:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=2
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "gene" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 4 2 -1 L3-host
++ local n_grp=4 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.12.2/16
+ echo '  subnet=158.4.12.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' linux == vtysh ']'
+ echo 'if [ "${location}" == "gene" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 4 2 -1 router
++ local n_grp=4 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.12.1/16
+ echo '  subnet=158.4.12.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ echo 'if [ "${location}" == "gene" ] && [ "${device}" == "container" ]; then'
++ subnet_sshContainer_groupContainer 4 2 -1 router
++ local n_grp=4 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.12.1/16
+ echo '  subnet=158.4.12.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" bash'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=luga
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=3
+ [[ ! -z miniinterneteth/d_routinator ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "luga" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 4 3 -1 L3-host
++ local n_grp=4 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.13.2/16
+ echo '  subnet=158.4.13.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "luga" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 4 3 -1 router
++ local n_grp=4 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.13.1/16
+ echo '  subnet=158.4.13.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=muni
+ property1=N/A
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=4
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "muni" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 4 4 -1 L3-host
++ local n_grp=4 n_router=4 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.14.2/16
+ echo '  subnet=158.4.14.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "muni" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 4 4 -1 router
++ local n_grp=4 n_router=4 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.14.1/16
+ echo '  subnet=158.4.14.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=lyon
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 4 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "lyon" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 4 5 -1 L3-host
++ local n_grp=4 n_router=5 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.15.2/16
+ echo '  subnet=158.4.15.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "lyon" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 4 5 -1 router
++ local n_grp=4 n_router=5 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.15.1/16
+ echo '  subnet=158.4.15.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=vien
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 4 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "vien" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 4 6 -1 L3-host
++ local n_grp=4 n_router=6 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.16.2/16
+ echo '  subnet=158.4.16.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "vien" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 4 6 -1 router
++ local n_grp=4 n_router=6 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.16.1/16
+ echo '  subnet=158.4.16.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=mila
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 4 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "mila" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 4 7 -1 L3-host
++ local n_grp=4 n_router=7 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.17.2/16
+ echo '  subnet=158.4.17.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "mila" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 4 7 -1 router
++ local n_grp=4 n_router=7 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.17.1/16
+ echo '  subnet=158.4.17.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ last_l2name_s=
+ last_sname_s=
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ l2_lower=dcn
+ sname=s1
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "s1" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 0 switch
++ local n_grp=4 n_router=-1 n_layer2=0 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.4.100.3/16
+ echo '  subnet=158.4.100.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=1
+ last_l2name_s=DCN
+ last_sname_s=s1
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ l2_lower=dcn
+ sname=s2
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "s2" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 1 switch
++ local n_grp=4 n_router=-1 n_layer2=1 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.4.100.4/16
+ echo '  subnet=158.4.100.4/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=2
+ last_l2name_s=DCN
+ last_sname_s=s2
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ l2_lower=dcn
+ sname=s3
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "s3" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 2 switch
++ local n_grp=4 n_router=-1 n_layer2=2 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.4.100.5/16
+ echo '  subnet=158.4.100.5/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=3
+ last_l2name_s=DCN
+ last_sname_s=s3
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCS
+ l2_lower=dcs
+ sname=s4
+ echo 'if [ "${location}" == "dcs" ] && [ "${device}" == "s4" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 3 switch
++ local n_grp=4 n_router=-1 n_layer2=3 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.4.100.6/16
+ echo '  subnet=158.4.100.6/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=1
+ last_l2name_s=DCS
+ last_sname_s=s4
+ (( l++ ))
+ (( l<n_l2_switches ))
+ last_l2name_h=
+ last_hname=
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_1
+ [[ fifa_1 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "fifa_1" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 0 L2-host
++ local n_grp=4 n_router=-1 n_layer2=0 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.3/16
+ echo '  subnet=158.4.200.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=4
+ last_l2name_h=DCN
+ last_hname=fifa_1
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_1
+ [[ uefa_1 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "uefa_1" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 1 L2-host
++ local n_grp=4 n_router=-1 n_layer2=1 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.4/16
+ echo '  subnet=158.4.200.4/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=5
+ last_l2name_h=DCN
+ last_hname=uefa_1
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_1
+ [[ vpn_1 != *vpn* ]]
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_2
+ [[ fifa_2 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "fifa_2" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 3 L2-host
++ local n_grp=4 n_router=-1 n_layer2=3 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.6/16
+ echo '  subnet=158.4.200.6/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=6
+ last_l2name_h=DCN
+ last_hname=fifa_2
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_2
+ [[ uefa_2 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "uefa_2" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 4 L2-host
++ local n_grp=4 n_router=-1 n_layer2=4 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.7/16
+ echo '  subnet=158.4.200.7/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=7
+ last_l2name_h=DCN
+ last_hname=uefa_2
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_2
+ [[ vpn_2 != *vpn* ]]
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_3
+ [[ fifa_3 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "fifa_3" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 6 L2-host
++ local n_grp=4 n_router=-1 n_layer2=6 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.9/16
+ echo '  subnet=158.4.200.9/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=8
+ last_l2name_h=DCN
+ last_hname=fifa_3
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_3
+ [[ uefa_3 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "uefa_3" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 7 L2-host
++ local n_grp=4 n_router=-1 n_layer2=7 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.10/16
+ echo '  subnet=158.4.200.10/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=9
+ last_l2name_h=DCN
+ last_hname=uefa_3
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_3
+ [[ vpn_3 != *vpn* ]]
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_4
+ [[ fifa_4 != *vpn* ]]
+ l2_name=DCS
+ l2_lower=dcs
+ echo 'if [ "${location}" == "dcs" ] && [ "${device}" == "fifa_4" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 9 L2-host
++ local n_grp=4 n_router=-1 n_layer2=9 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.12/16
+ echo '  subnet=158.4.200.12/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=2
+ last_l2name_h=DCS
+ last_hname=fifa_4
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_4
+ [[ uefa_4 != *vpn* ]]
+ l2_name=DCS
+ l2_lower=dcs
+ echo 'if [ "${location}" == "dcs" ] && [ "${device}" == "uefa_4" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 10 L2-host
++ local n_grp=4 n_router=-1 n_layer2=10 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.13/16
+ echo '  subnet=158.4.200.13/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=3
+ last_l2name_h=DCS
+ last_hname=uefa_4
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ echo 'if [ "${location}" == "measurement" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 4 -1 -1 MEASUREMENT
++ local n_grp=4 n_router=-1 n_layer2=-1 device=MEASUREMENT
++ '[' MEASUREMENT = sshContainer ']'
++ '[' MEASUREMENT = MEASUREMENT ']'
++ echo 158.4.0.3/16
+ echo '  subnet=158.4.0.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ echo 'echo "invalid arguments"'
+ echo 'echo "valid examples:"'
+ echo 'echo "./goto.sh mila"'
+ echo 'echo "./goto.sh mila router"'
+ echo 'echo "./goto.sh mila host"'
+ '[' DCS '!=' '' ']'
+ echo 'echo "./goto.sh DCS s4"'
+ echo 'echo "./goto.sh DCS uefa_4"'
+ echo 'echo "./goto.sh measurement"'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=5
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g5/goto.sh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo 'location=${1,,}'
+ echo 'device=${2:-router}'
+ echo 'device=${device,,}'
+ echo ''
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g5/goto.sh
+ declare -A l2_id
+ declare -A l2_cur
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ ! -z miniinterneteth/d_routinator ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host0" ]; then'
++ subnet_sshContainer_groupContainer 5 0 -1 L3-host
++ local n_grp=5 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.5.10.2/16
+ echo '  subnet=158.5.10.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ true == \t\r\u\e ]]
+ [[ 0 -gt 0 ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 5 0 -1 router
++ local n_grp=5 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.5.10.1/16
+ echo '  subnet=158.5.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 1 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 2 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 3 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ last_l2name_s=
+ last_sname_s=
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ last_l2name_h=
+ last_hname=
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo 'if [ "${location}" == "measurement" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 5 -1 -1 MEASUREMENT
++ local n_grp=5 n_router=-1 n_layer2=-1 device=MEASUREMENT
++ '[' MEASUREMENT = sshContainer ']'
++ '[' MEASUREMENT = MEASUREMENT ']'
++ echo 158.5.0.3/16
+ echo '  subnet=158.5.0.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ echo 'echo "invalid arguments"'
+ echo 'echo "valid examples:"'
+ echo 'echo "./goto.sh zuri"'
+ echo 'echo "./goto.sh zuri router"'
+ echo 'echo "./goto.sh zuri host"'
+ '[' '' '!=' '' ']'
+ echo 'echo "./goto.sh measurement"'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=6
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g6/goto.sh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo 'location=${1,,}'
+ echo 'device=${2:-router}'
+ echo 'device=${device,,}'
+ echo ''
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g6/goto.sh
+ declare -A l2_id
+ declare -A l2_cur
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ ! -z miniinterneteth/d_routinator ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host0" ]; then'
++ subnet_sshContainer_groupContainer 6 0 -1 L3-host
++ local n_grp=6 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.6.10.2/16
+ echo '  subnet=158.6.10.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ true == \t\r\u\e ]]
+ [[ 0 -gt 0 ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 6 0 -1 router
++ local n_grp=6 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.6.10.1/16
+ echo '  subnet=158.6.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 1 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 2 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 3 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ last_l2name_s=
+ last_sname_s=
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ last_l2name_h=
+ last_hname=
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo 'if [ "${location}" == "measurement" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 6 -1 -1 MEASUREMENT
++ local n_grp=6 n_router=-1 n_layer2=-1 device=MEASUREMENT
++ '[' MEASUREMENT = sshContainer ']'
++ '[' MEASUREMENT = MEASUREMENT ']'
++ echo 158.6.0.3/16
+ echo '  subnet=158.6.0.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ echo 'echo "invalid arguments"'
+ echo 'echo "valid examples:"'
+ echo 'echo "./goto.sh zuri"'
+ echo 'echo "./goto.sh zuri router"'
+ echo 'echo "./goto.sh zuri host"'
+ '[' '' '!=' '' ']'
+ echo 'echo "./goto.sh measurement"'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=11
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g11/goto.sh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo 'location=${1,,}'
+ echo 'device=${2:-router}'
+ echo 'device=${device,,}'
+ echo ''
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g11/goto.sh
+ declare -A l2_id
+ declare -A l2_cur
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ ! -z miniinterneteth/d_routinator ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host0" ]; then'
++ subnet_sshContainer_groupContainer 11 0 -1 L3-host
++ local n_grp=11 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.11.10.2/16
+ echo '  subnet=158.11.10.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ true == \t\r\u\e ]]
+ [[ 0 -gt 0 ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 11 0 -1 router
++ local n_grp=11 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.11.10.1/16
+ echo '  subnet=158.11.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 1 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 2 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 3 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ last_l2name_s=
+ last_sname_s=
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ last_l2name_h=
+ last_hname=
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo 'if [ "${location}" == "measurement" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 11 -1 -1 MEASUREMENT
++ local n_grp=11 n_router=-1 n_layer2=-1 device=MEASUREMENT
++ '[' MEASUREMENT = sshContainer ']'
++ '[' MEASUREMENT = MEASUREMENT ']'
++ echo 158.11.0.3/16
+ echo '  subnet=158.11.0.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ echo 'echo "invalid arguments"'
+ echo 'echo "valid examples:"'
+ echo 'echo "./goto.sh zuri"'
+ echo 'echo "./goto.sh zuri router"'
+ echo 'echo "./goto.sh zuri host"'
+ '[' '' '!=' '' ']'
+ echo 'echo "./goto.sh measurement"'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=12
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g12/goto.sh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo 'location=${1,,}'
+ echo 'device=${2:-router}'
+ echo 'device=${device,,}'
+ echo ''
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g12/goto.sh
+ declare -A l2_id
+ declare -A l2_cur
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ ! -z miniinterneteth/d_routinator ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host0" ]; then'
++ subnet_sshContainer_groupContainer 12 0 -1 L3-host
++ local n_grp=12 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.12.10.2/16
+ echo '  subnet=158.12.10.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ true == \t\r\u\e ]]
+ [[ 0 -gt 0 ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 12 0 -1 router
++ local n_grp=12 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.12.10.1/16
+ echo '  subnet=158.12.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 1 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 2 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 3 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ last_l2name_s=
+ last_sname_s=
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ last_l2name_h=
+ last_hname=
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo 'if [ "${location}" == "measurement" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 12 -1 -1 MEASUREMENT
++ local n_grp=12 n_router=-1 n_layer2=-1 device=MEASUREMENT
++ '[' MEASUREMENT = sshContainer ']'
++ '[' MEASUREMENT = MEASUREMENT ']'
++ echo 158.12.0.3/16
+ echo '  subnet=158.12.0.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ echo 'echo "invalid arguments"'
+ echo 'echo "valid examples:"'
+ echo 'echo "./goto.sh zuri"'
+ echo 'echo "./goto.sh zuri router"'
+ echo 'echo "./goto.sh zuri host"'
+ '[' '' '!=' '' ']'
+ echo 'echo "./goto.sh measurement"'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=13
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ group_layer2_switches=l2_switches.txt
+ group_layer2_hosts=l2_hosts.txt
+ group_layer2_links=l2_links.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g13/goto.sh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=8
+ n_l2_switches=4
+ n_l2_hosts=11
+ n_l2_links=3
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo 'location=${1,,}'
+ echo 'device=${2:-router}'
+ echo 'device=${device,,}'
+ echo ''
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g13/goto.sh
+ declare -A l2_id
+ declare -A l2_cur
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=base
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=gene
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=luga
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=muni
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=lyon
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=vien
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=mila
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 13 0 -1 L3-host
++ local n_grp=13 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.10.2/16
+ echo '  subnet=158.13.10.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' linux == vtysh ']'
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 13 0 -1 router
++ local n_grp=13 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.10.1/16
+ echo '  subnet=158.13.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "container" ]; then'
++ subnet_sshContainer_groupContainer 13 0 -1 router
++ local n_grp=13 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.10.1/16
+ echo '  subnet=158.13.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" bash'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=base
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=vtysh
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 0 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "base" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 13 1 -1 L3-host
++ local n_grp=13 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.11.2/16
+ echo '  subnet=158.13.11.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "base" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 13 1 -1 router
++ local n_grp=13 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.11.1/16
+ echo '  subnet=158.13.11.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=gene
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCS:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=2
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "gene" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 13 2 -1 L3-host
++ local n_grp=13 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.12.2/16
+ echo '  subnet=158.13.12.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' linux == vtysh ']'
+ echo 'if [ "${location}" == "gene" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 13 2 -1 router
++ local n_grp=13 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.12.1/16
+ echo '  subnet=158.13.12.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ echo 'if [ "${location}" == "gene" ] && [ "${device}" == "container" ]; then'
++ subnet_sshContainer_groupContainer 13 2 -1 router
++ local n_grp=13 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.12.1/16
+ echo '  subnet=158.13.12.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" bash'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=luga
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=3
+ [[ ! -z miniinterneteth/d_routinator ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "luga" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 13 3 -1 L3-host
++ local n_grp=13 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.13.2/16
+ echo '  subnet=158.13.13.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "luga" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 13 3 -1 router
++ local n_grp=13 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.13.1/16
+ echo '  subnet=158.13.13.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=muni
+ property1=N/A
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=4
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "muni" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 13 4 -1 L3-host
++ local n_grp=13 n_router=4 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.14.2/16
+ echo '  subnet=158.13.14.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "muni" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 13 4 -1 router
++ local n_grp=13 n_router=4 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.14.1/16
+ echo '  subnet=158.13.14.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=lyon
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 4 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "lyon" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 13 5 -1 L3-host
++ local n_grp=13 n_router=5 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.15.2/16
+ echo '  subnet=158.13.15.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "lyon" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 13 5 -1 router
++ local n_grp=13 n_router=5 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.15.1/16
+ echo '  subnet=158.13.15.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=vien
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 4 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "vien" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 13 6 -1 L3-host
++ local n_grp=13 n_router=6 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.16.2/16
+ echo '  subnet=158.13.16.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "vien" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 13 6 -1 router
++ local n_grp=13 n_router=6 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.16.1/16
+ echo '  subnet=158.13.16.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=mila
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 4 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "mila" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 13 7 -1 L3-host
++ local n_grp=13 n_router=7 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.17.2/16
+ echo '  subnet=158.13.17.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "mila" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 13 7 -1 router
++ local n_grp=13 n_router=7 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.17.1/16
+ echo '  subnet=158.13.17.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ last_l2name_s=
+ last_sname_s=
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ l2_lower=dcn
+ sname=s1
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "s1" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 0 switch
++ local n_grp=13 n_router=-1 n_layer2=0 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.13.100.3/16
+ echo '  subnet=158.13.100.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=1
+ last_l2name_s=DCN
+ last_sname_s=s1
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ l2_lower=dcn
+ sname=s2
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "s2" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 1 switch
++ local n_grp=13 n_router=-1 n_layer2=1 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.13.100.4/16
+ echo '  subnet=158.13.100.4/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=2
+ last_l2name_s=DCN
+ last_sname_s=s2
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ l2_lower=dcn
+ sname=s3
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "s3" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 2 switch
++ local n_grp=13 n_router=-1 n_layer2=2 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.13.100.5/16
+ echo '  subnet=158.13.100.5/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=3
+ last_l2name_s=DCN
+ last_sname_s=s3
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCS
+ l2_lower=dcs
+ sname=s4
+ echo 'if [ "${location}" == "dcs" ] && [ "${device}" == "s4" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 3 switch
++ local n_grp=13 n_router=-1 n_layer2=3 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.13.100.6/16
+ echo '  subnet=158.13.100.6/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=1
+ last_l2name_s=DCS
+ last_sname_s=s4
+ (( l++ ))
+ (( l<n_l2_switches ))
+ last_l2name_h=
+ last_hname=
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_1
+ [[ fifa_1 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "fifa_1" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 0 L2-host
++ local n_grp=13 n_router=-1 n_layer2=0 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.3/16
+ echo '  subnet=158.13.200.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=4
+ last_l2name_h=DCN
+ last_hname=fifa_1
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_1
+ [[ uefa_1 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "uefa_1" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 1 L2-host
++ local n_grp=13 n_router=-1 n_layer2=1 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.4/16
+ echo '  subnet=158.13.200.4/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=5
+ last_l2name_h=DCN
+ last_hname=uefa_1
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_1
+ [[ vpn_1 != *vpn* ]]
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_2
+ [[ fifa_2 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "fifa_2" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 3 L2-host
++ local n_grp=13 n_router=-1 n_layer2=3 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.6/16
+ echo '  subnet=158.13.200.6/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=6
+ last_l2name_h=DCN
+ last_hname=fifa_2
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_2
+ [[ uefa_2 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "uefa_2" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 4 L2-host
++ local n_grp=13 n_router=-1 n_layer2=4 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.7/16
+ echo '  subnet=158.13.200.7/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=7
+ last_l2name_h=DCN
+ last_hname=uefa_2
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_2
+ [[ vpn_2 != *vpn* ]]
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_3
+ [[ fifa_3 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "fifa_3" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 6 L2-host
++ local n_grp=13 n_router=-1 n_layer2=6 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.9/16
+ echo '  subnet=158.13.200.9/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=8
+ last_l2name_h=DCN
+ last_hname=fifa_3
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_3
+ [[ uefa_3 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "uefa_3" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 7 L2-host
++ local n_grp=13 n_router=-1 n_layer2=7 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.10/16
+ echo '  subnet=158.13.200.10/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=9
+ last_l2name_h=DCN
+ last_hname=uefa_3
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_3
+ [[ vpn_3 != *vpn* ]]
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_4
+ [[ fifa_4 != *vpn* ]]
+ l2_name=DCS
+ l2_lower=dcs
+ echo 'if [ "${location}" == "dcs" ] && [ "${device}" == "fifa_4" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 9 L2-host
++ local n_grp=13 n_router=-1 n_layer2=9 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.12/16
+ echo '  subnet=158.13.200.12/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=2
+ last_l2name_h=DCS
+ last_hname=fifa_4
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_4
+ [[ uefa_4 != *vpn* ]]
+ l2_name=DCS
+ l2_lower=dcs
+ echo 'if [ "${location}" == "dcs" ] && [ "${device}" == "uefa_4" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 10 L2-host
++ local n_grp=13 n_router=-1 n_layer2=10 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.13/16
+ echo '  subnet=158.13.200.13/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=3
+ last_l2name_h=DCS
+ last_hname=uefa_4
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ echo 'if [ "${location}" == "measurement" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 13 -1 -1 MEASUREMENT
++ local n_grp=13 n_router=-1 n_layer2=-1 device=MEASUREMENT
++ '[' MEASUREMENT = sshContainer ']'
++ '[' MEASUREMENT = MEASUREMENT ']'
++ echo 158.13.0.3/16
+ echo '  subnet=158.13.0.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ echo 'echo "invalid arguments"'
+ echo 'echo "valid examples:"'
+ echo 'echo "./goto.sh mila"'
+ echo 'echo "./goto.sh mila router"'
+ echo 'echo "./goto.sh mila host"'
+ '[' DCS '!=' '' ']'
+ echo 'echo "./goto.sh DCS s4"'
+ echo 'echo "./goto.sh DCS uefa_4"'
+ echo 'echo "./goto.sh measurement"'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=14
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ group_layer2_switches=l2_switches.txt
+ group_layer2_hosts=l2_hosts.txt
+ group_layer2_links=l2_links.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g14/goto.sh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=8
+ n_l2_switches=4
+ n_l2_hosts=11
+ n_l2_links=3
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo 'location=${1,,}'
+ echo 'device=${2:-router}'
+ echo 'device=${device,,}'
+ echo ''
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g14/goto.sh
+ declare -A l2_id
+ declare -A l2_cur
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=base
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=gene
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=luga
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=muni
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=lyon
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=vien
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=mila
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 14 0 -1 L3-host
++ local n_grp=14 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.10.2/16
+ echo '  subnet=158.14.10.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' linux == vtysh ']'
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 14 0 -1 router
++ local n_grp=14 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.10.1/16
+ echo '  subnet=158.14.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "container" ]; then'
++ subnet_sshContainer_groupContainer 14 0 -1 router
++ local n_grp=14 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.10.1/16
+ echo '  subnet=158.14.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" bash'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=base
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=vtysh
++ echo L2-DCN:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 0 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "base" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 14 1 -1 L3-host
++ local n_grp=14 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.11.2/16
+ echo '  subnet=158.14.11.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "base" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 14 1 -1 router
++ local n_grp=14 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.11.1/16
+ echo '  subnet=158.14.11.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=gene
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCS:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=2
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "gene" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 14 2 -1 L3-host
++ local n_grp=14 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.12.2/16
+ echo '  subnet=158.14.12.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' linux == vtysh ']'
+ echo 'if [ "${location}" == "gene" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 14 2 -1 router
++ local n_grp=14 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.12.1/16
+ echo '  subnet=158.14.12.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ echo 'if [ "${location}" == "gene" ] && [ "${device}" == "container" ]; then'
++ subnet_sshContainer_groupContainer 14 2 -1 router
++ local n_grp=14 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.12.1/16
+ echo '  subnet=158.14.12.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" bash'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=luga
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=3
+ [[ ! -z miniinterneteth/d_routinator ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "luga" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 14 3 -1 L3-host
++ local n_grp=14 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.13.2/16
+ echo '  subnet=158.14.13.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "luga" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 14 3 -1 router
++ local n_grp=14 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.13.1/16
+ echo '  subnet=158.14.13.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=muni
+ property1=N/A
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=4
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "muni" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 14 4 -1 L3-host
++ local n_grp=14 n_router=4 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.14.2/16
+ echo '  subnet=158.14.14.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "muni" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 14 4 -1 router
++ local n_grp=14 n_router=4 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.14.1/16
+ echo '  subnet=158.14.14.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=lyon
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 4 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "lyon" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 14 5 -1 L3-host
++ local n_grp=14 n_router=5 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.15.2/16
+ echo '  subnet=158.14.15.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "lyon" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 14 5 -1 router
++ local n_grp=14 n_router=5 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.15.1/16
+ echo '  subnet=158.14.15.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=vien
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 4 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "vien" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 14 6 -1 L3-host
++ local n_grp=14 n_router=6 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.16.2/16
+ echo '  subnet=158.14.16.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "vien" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 14 6 -1 router
++ local n_grp=14 n_router=6 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.16.1/16
+ echo '  subnet=158.14.16.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=mila
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ 4 == 1000000 ]]
+ [[ ! -z miniinterneteth/d_host ]]
+ extra=
+ [[ false == \t\r\u\e ]]
+ echo 'if [ "${location}" == "mila" ] && [ "${device}" == "host" ]; then'
++ subnet_sshContainer_groupContainer 14 7 -1 L3-host
++ local n_grp=14 n_router=7 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.17.2/16
+ echo '  subnet=158.14.17.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ false == \t\r\u\e ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "mila" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 14 7 -1 router
++ local n_grp=14 n_router=7 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.17.1/16
+ echo '  subnet=158.14.17.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ last_l2name_s=
+ last_sname_s=
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ l2_lower=dcn
+ sname=s1
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "s1" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 0 switch
++ local n_grp=14 n_router=-1 n_layer2=0 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.14.100.3/16
+ echo '  subnet=158.14.100.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=1
+ last_l2name_s=DCN
+ last_sname_s=s1
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ l2_lower=dcn
+ sname=s2
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "s2" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 1 switch
++ local n_grp=14 n_router=-1 n_layer2=1 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.14.100.4/16
+ echo '  subnet=158.14.100.4/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=2
+ last_l2name_s=DCN
+ last_sname_s=s2
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ l2_lower=dcn
+ sname=s3
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "s3" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 2 switch
++ local n_grp=14 n_router=-1 n_layer2=2 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.14.100.5/16
+ echo '  subnet=158.14.100.5/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=3
+ last_l2name_s=DCN
+ last_sname_s=s3
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCS
+ l2_lower=dcs
+ sname=s4
+ echo 'if [ "${location}" == "dcs" ] && [ "${device}" == "s4" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 3 switch
++ local n_grp=14 n_router=-1 n_layer2=3 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.14.100.6/16
+ echo '  subnet=158.14.100.6/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=1
+ last_l2name_s=DCS
+ last_sname_s=s4
+ (( l++ ))
+ (( l<n_l2_switches ))
+ last_l2name_h=
+ last_hname=
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_1
+ [[ fifa_1 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "fifa_1" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 0 L2-host
++ local n_grp=14 n_router=-1 n_layer2=0 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.3/16
+ echo '  subnet=158.14.200.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=4
+ last_l2name_h=DCN
+ last_hname=fifa_1
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_1
+ [[ uefa_1 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "uefa_1" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 1 L2-host
++ local n_grp=14 n_router=-1 n_layer2=1 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.4/16
+ echo '  subnet=158.14.200.4/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=5
+ last_l2name_h=DCN
+ last_hname=uefa_1
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_1
+ [[ vpn_1 != *vpn* ]]
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_2
+ [[ fifa_2 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "fifa_2" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 3 L2-host
++ local n_grp=14 n_router=-1 n_layer2=3 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.6/16
+ echo '  subnet=158.14.200.6/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=6
+ last_l2name_h=DCN
+ last_hname=fifa_2
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_2
+ [[ uefa_2 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "uefa_2" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 4 L2-host
++ local n_grp=14 n_router=-1 n_layer2=4 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.7/16
+ echo '  subnet=158.14.200.7/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=7
+ last_l2name_h=DCN
+ last_hname=uefa_2
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_2
+ [[ vpn_2 != *vpn* ]]
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_3
+ [[ fifa_3 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "fifa_3" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 6 L2-host
++ local n_grp=14 n_router=-1 n_layer2=6 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.9/16
+ echo '  subnet=158.14.200.9/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=8
+ last_l2name_h=DCN
+ last_hname=fifa_3
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_3
+ [[ uefa_3 != *vpn* ]]
+ l2_name=DCN
+ l2_lower=dcn
+ echo 'if [ "${location}" == "dcn" ] && [ "${device}" == "uefa_3" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 7 L2-host
++ local n_grp=14 n_router=-1 n_layer2=7 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.10/16
+ echo '  subnet=158.14.200.10/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=9
+ last_l2name_h=DCN
+ last_hname=uefa_3
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_3
+ [[ vpn_3 != *vpn* ]]
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=fifa_4
+ [[ fifa_4 != *vpn* ]]
+ l2_name=DCS
+ l2_lower=dcs
+ echo 'if [ "${location}" == "dcs" ] && [ "${device}" == "fifa_4" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 9 L2-host
++ local n_grp=14 n_router=-1 n_layer2=9 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.12/16
+ echo '  subnet=158.14.200.12/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=2
+ last_l2name_h=DCS
+ last_hname=fifa_4
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=uefa_4
+ [[ uefa_4 != *vpn* ]]
+ l2_name=DCS
+ l2_lower=dcs
+ echo 'if [ "${location}" == "dcs" ] && [ "${device}" == "uefa_4" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 10 L2-host
++ local n_grp=14 n_router=-1 n_layer2=10 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.13/16
+ echo '  subnet=158.14.200.13/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ l2_cur[$l2_name]=3
+ last_l2name_h=DCS
+ last_hname=uefa_4
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ echo 'if [ "${location}" == "measurement" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 14 -1 -1 MEASUREMENT
++ local n_grp=14 n_router=-1 n_layer2=-1 device=MEASUREMENT
++ '[' MEASUREMENT = sshContainer ']'
++ '[' MEASUREMENT = MEASUREMENT ']'
++ echo 158.14.0.3/16
+ echo '  subnet=158.14.0.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ echo 'echo "invalid arguments"'
+ echo 'echo "valid examples:"'
+ echo 'echo "./goto.sh mila"'
+ echo 'echo "./goto.sh mila router"'
+ echo 'echo "./goto.sh mila host"'
+ '[' DCS '!=' '' ']'
+ echo 'echo "./goto.sh DCS s4"'
+ echo 'echo "./goto.sh DCS uefa_4"'
+ echo 'echo "./goto.sh measurement"'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=15
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g15/goto.sh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo 'location=${1,,}'
+ echo 'device=${2:-router}'
+ echo 'device=${device,,}'
+ echo ''
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g15/goto.sh
+ declare -A l2_id
+ declare -A l2_cur
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ ! -z miniinterneteth/d_routinator ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host0" ]; then'
++ subnet_sshContainer_groupContainer 15 0 -1 L3-host
++ local n_grp=15 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.15.10.2/16
+ echo '  subnet=158.15.10.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ true == \t\r\u\e ]]
+ [[ 0 -gt 0 ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 15 0 -1 router
++ local n_grp=15 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.15.10.1/16
+ echo '  subnet=158.15.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 1 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 2 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 3 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ last_l2name_s=
+ last_sname_s=
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ last_l2name_h=
+ last_hname=
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo 'if [ "${location}" == "measurement" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 15 -1 -1 MEASUREMENT
++ local n_grp=15 n_router=-1 n_layer2=-1 device=MEASUREMENT
++ '[' MEASUREMENT = sshContainer ']'
++ '[' MEASUREMENT = MEASUREMENT ']'
++ echo 158.15.0.3/16
+ echo '  subnet=158.15.0.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ echo 'echo "invalid arguments"'
+ echo 'echo "valid examples:"'
+ echo 'echo "./goto.sh zuri"'
+ echo 'echo "./goto.sh zuri router"'
+ echo 'echo "./goto.sh zuri host"'
+ '[' '' '!=' '' ']'
+ echo 'echo "./goto.sh measurement"'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=16
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g16/goto.sh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo 'location=${1,,}'
+ echo 'device=${2:-router}'
+ echo 'device=${device,,}'
+ echo ''
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g16/goto.sh
+ declare -A l2_id
+ declare -A l2_cur
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ l2_cur[$l2_name]=0
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -s -d : -f 2
+ dname=miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ ! -z miniinterneteth/d_routinator ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "host0" ]; then'
++ subnet_sshContainer_groupContainer 16 0 -1 L3-host
++ local n_grp=16 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.16.10.2/16
+ echo '  subnet=158.16.10.2/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ [[ true == \t\r\u\e ]]
+ [[ 0 -gt 0 ]]
+ '[' vtysh == vtysh ']'
+ echo 'if [ "${location}" == "zuri" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 16 0 -1 router
++ local n_grp=16 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.16.10.1/16
+ echo '  subnet=158.16.10.1/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}" vtysh'
+ echo fi
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 1 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 2 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=zuri
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -s -d : -f 2
+ dname=
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ 1 == 1000000 ]]
+ [[ ! -z '' ]]
+ [[ true == \t\r\u\e ]]
+ [[ 3 -gt 0 ]]
+ :
+ (( i++ ))
+ (( i<n_routers ))
+ last_l2name_s=
+ last_sname_s=
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ last_l2name_h=
+ last_hname=
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo 'if [ "${location}" == "measurement" ] && [ "${device}" == "router" ]; then'
++ subnet_sshContainer_groupContainer 16 -1 -1 MEASUREMENT
++ local n_grp=16 n_router=-1 n_layer2=-1 device=MEASUREMENT
++ '[' MEASUREMENT = sshContainer ']'
++ '[' MEASUREMENT = MEASUREMENT ']'
++ echo 158.16.0.3/16
+ echo '  subnet=158.16.0.3/16'
+ echo '  exec ssh -t -o StrictHostKeyChecking=no root@"${subnet%???}"'
+ echo fi
+ echo 'echo "invalid arguments"'
+ echo 'echo "valid examples:"'
+ echo 'echo "./goto.sh zuri"'
+ echo 'echo "./goto.sh zuri router"'
+ echo 'echo "./goto.sh zuri host"'
+ '[' '' '!=' '' ']'
+ echo 'echo "./goto.sh measurement"'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=80
+ group_as=IXP
+ group_config=Config
+ group_router_config=N/A
+ group_internal_links=N/A
+ group_layer2_switches=N/A
+ group_layer2_hosts=N/A
+ group_layer2_links=N/A
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g80/goto.sh
+ '[' IXP '!=' IXP ']'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=81
+ group_as=IXP
+ group_config=Config
+ group_router_config=N/A
+ group_internal_links=N/A
+ group_layer2_switches=N/A
+ group_layer2_hosts=N/A
+ group_layer2_links=N/A
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g81/goto.sh
+ '[' IXP '!=' IXP ']'
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=82
+ group_as=IXP
+ group_config=Config
+ group_router_config=N/A
+ group_internal_links=N/A
+ group_layer2_switches=N/A
+ group_layer2_hosts=N/A
+ group_layer2_links=N/A
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g82/goto.sh
+ '[' IXP '!=' IXP ']'
+ (( k++ ))
+ (( k<n_groups ))

real	0m0.452s
user	0m0.484s
sys	0m0.140s
+ echo ''

+ echo ''

++ date +%s%N
+ echo 'save_configs.sh 1735322397937'
+ echo 'save_configs.sh: '
save_configs.sh: 
+ /home/service/tud/mini_internet_project/platform/setup/save_configs.sh /home/service/tud/mini_internet_project/platform /home/service/tud/mini_internet_project/platform/config
++ readlink -f /home/service/tud/mini_internet_project/platform
+ DIRECTORY=/home/service/tud/mini_internet_project/platform
+ CONFIG_DIRECTORY=/home/service/tud/mini_internet_project/platform/config
++ readlink -f /home/service/tud/mini_internet_project/platform/config
+ CONFIG_DIRECTORY=/home/service/tud/mini_internet_project/platform/config
+ source /home/service/tud/mini_internet_project/platform/config/variables.sh
++ DOCKERHUB_PREFIX=miniinterneteth/
++ SSH_URL=172.26.123.85
++ WEBSERVER_HOSTNAME=172.26.123.85
++ WEBSERVER_ACME_MAIL=
++ WEBSERVER_PORT_HTTP=80
++ WEBSERVER_PORT_HTTPS=443
++ WEBSERVER_PORT_KRILL=3000
++ WEBSERVER_TZ=Europe/Zurich
++ DEFAULT_THROUGHPUT=10mbit
++ DEFAULT_DELAY=10ms
++ DEFAULT_BUFFER=50ms
++ MATRIX_FREQUENCY=300
++ MATRIX_CONCURRENT_PINGS=500
++ MATRIX_PING_FLAGS='-c 3 -i 0.01'
++ MATRIX_PAUSE_AFTER_START=false
++ HISTORY_ENABLED=true
++ HISTORY_PAUSE_AFTER_START=false
++ HISTORY_UPDATE_FREQUENCY=3600
++ HISTORY_TIMEOUT=300s
++ HISTORY_GIT_USER=
++ HISTORY_GIT_EMAIL=
++ HISTORY_GIT_URL=
++ HISTORY_GIT_BRANCH=main
++ HISTORY_FORGET_BINARIES=true
+ source /home/service/tud/mini_internet_project/platform/config/subnet_config.sh
++ set -o errexit
++ set -o pipefail
++ set -o nounset
+ readarray groups
+ n_groups=15
+ (( k=0 ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=1
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_krill.txt
+ group_internal_links=l3_links_krill.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g1/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g1/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g1/restart_ospfd.sh
+ '[' AS == IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo ''
+ echo 'dirname=configs_${1:-$(date +%m-%d-%Y_%H-%M-%S)}'
+ echo 'mkdir -p $dirname'
+ echo ''
+ echo '# Arguments: filename, subnet, command'
+ echo 'save() { eval "ssh -q -o StrictHostKeyChecking=no root@${2%???} ${@:3} > $1" ; }'
+ echo ''
+ cp /home/service/tud/mini_internet_project/platform/setup/restore_configs.sh /home/service/tud/mini_internet_project/platform/groups/g1/restore_configs.sh
+ cp /home/service/tud/mini_internet_project/platform/setup/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g1/restart_ospfd.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g1/save_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g1/restore_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g1/restart_ospfd.sh
+ declare -A l2_id
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=krill:miniinterneteth/d_krill
++ echo krill:miniinterneteth/d_krill
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=krill
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
++ subnet_sshContainer_groupContainer 1 0 -1 router
++ local n_grp=1 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.1.10.1/16
+ subnet_router=158.1.10.1/16
++ subnet_sshContainer_groupContainer 1 0 -1 L3-host
++ local n_grp=1 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.1.10.2/16
+ subnet_host=158.1.10.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ 0 == 0 ]]
+ echo 'echo ZURI router'
+ echo 'mkdir -p ${dirname}/ZURI'
+ echo 'save ${dirname}/ZURI/router.conf      158.1.10.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/ZURI/router.rib.json  158.1.10.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host0
+ echo 'echo ZURI host0'
+ echo 'save ${dirname}/ZURI/host0.ip         158.1.10.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host0.route      158.1.10.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host0.route6     158.1.10.2/16 ip -6 route'
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'save ${dirname}/ZURI/host0.rpki_cache 158.1.10.2/16 "tar -czC /root/.rpki-cache repository"'
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g1/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g1/restore_configs.sh
+ echo '  restore_router_config 158.1.10.1/16 ZURI vtysh'
+ echo '  main 158.1.10.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g1/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g1/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=krill:miniinterneteth/d_krill
+ rcmd=vtysh
++ echo krill:miniinterneteth/d_krill
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=krill
++ subnet_sshContainer_groupContainer 1 1 -1 router
++ local n_grp=1 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.1.11.1/16
+ subnet_router=158.1.11.1/16
++ subnet_sshContainer_groupContainer 1 1 -1 L3-host
++ local n_grp=1 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.1.11.2/16
+ subnet_host=158.1.11.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ 1 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host1
+ echo 'echo ZURI host1'
+ echo 'save ${dirname}/ZURI/host1.ip         158.1.11.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host1.route      158.1.11.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host1.route6     158.1.11.2/16 ip -6 route'
++ echo krill:miniinterneteth/d_krill
++ cut -d : -f 1
+ htype=krill
++ echo krill:miniinterneteth/d_krill
++ cut -d : -f 2
+ dname=miniinterneteth/d_krill
+ [[ ! -z miniinterneteth/d_krill ]]
+ [[ krill == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g1/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g1/restore_configs.sh
+ echo '  restore_router_config 158.1.11.1/16 ZURI vtysh'
+ echo '  main 158.1.11.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g1/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g1/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 1 2 -1 router
++ local n_grp=1 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.1.12.1/16
+ subnet_router=158.1.12.1/16
++ subnet_sshContainer_groupContainer 1 2 -1 L3-host
++ local n_grp=1 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.1.12.2/16
+ subnet_host=158.1.12.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=2
+ [[ 2 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host2
+ echo 'echo ZURI host2'
+ echo 'save ${dirname}/ZURI/host2.ip         158.1.12.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host2.route      158.1.12.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host2.route6     158.1.12.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g1/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g1/restore_configs.sh
+ echo '  restore_router_config 158.1.12.1/16 ZURI vtysh'
+ echo '  main 158.1.12.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g1/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g1/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 1 3 -1 router
++ local n_grp=1 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.1.13.1/16
+ subnet_router=158.1.13.1/16
++ subnet_sshContainer_groupContainer 1 3 -1 L3-host
++ local n_grp=1 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.1.13.2/16
+ subnet_host=158.1.13.2/16
+ savedir='${dirname}/ZURI'
+ [[ 2 == 1000000 ]]
+ [[ 3 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host3
+ echo 'echo ZURI host3'
+ echo 'save ${dirname}/ZURI/host3.ip         158.1.13.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host3.route      158.1.13.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host3.route6     158.1.13.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g1/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g1/restore_configs.sh
+ echo '  restore_router_config 158.1.13.1/16 ZURI vtysh'
+ echo '  main 158.1.13.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g1/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g1/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo ''
+ echo 'tar -czf ${dirname}.tar.gz ${dirname}/*'
+ echo ''
+ echo 'echo '\''Saving complete!'\'''
+ echo 'echo '\'''\'''
+ echo 'echo "Download the archive file (run these commands from your own computer):"'
+ echo 'echo "    scp -O -P 2001 root@172.26.123.85:${dirname}.tar.gz ."'
+ echo 'echo '\''Extract the archive:'\'''
+ echo 'echo "    tar -xzf ${dirname}.tar.gz"'
+ echo 'echo "Alternatively, to directly update the "config" folder in the current local directory:"'
+ echo 'echo "    scp -O -r -P 2001 root@172.26.123.85:${dirname} config"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If the scp commands do not work for you, use ssh (also from your own computer):'\'''
+ echo 'echo '\''(Reliable only on UNIX systems. On Windows, you may use WinSCP instead)'\'''
+ echo 'echo "Download the archive:"'
+ echo 'echo "    ssh -q -p 2001 root@172.26.123.85 cat ${dirname}.tar.gz > ${dirname}.tar.gz"'
+ echo 'echo "Download and unpack the archive:"'
+ echo 'echo "    ssh -q -p 2001 root@172.26.123.85 cat ${dirname}.tar.gz | tar -xz"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If you are using an ssh config file, you may need to update the scp and ssh commands above to match your configuration.'\'''
+ echo 'echo '\''For example, you may need to replace "root@172.26.123.85" with the hostname you have defined in your ssh config file.'\'''
+ echo 'echo '\''Contact the TAs if you are unable to download your files!'\'''
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=2
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g2/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g2/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g2/restart_ospfd.sh
+ '[' AS == IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo ''
+ echo 'dirname=configs_${1:-$(date +%m-%d-%Y_%H-%M-%S)}'
+ echo 'mkdir -p $dirname'
+ echo ''
+ echo '# Arguments: filename, subnet, command'
+ echo 'save() { eval "ssh -q -o StrictHostKeyChecking=no root@${2%???} ${@:3} > $1" ; }'
+ echo ''
+ cp /home/service/tud/mini_internet_project/platform/setup/restore_configs.sh /home/service/tud/mini_internet_project/platform/groups/g2/restore_configs.sh
+ cp /home/service/tud/mini_internet_project/platform/setup/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g2/restart_ospfd.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g2/save_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g2/restore_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g2/restart_ospfd.sh
+ declare -A l2_id
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
++ subnet_sshContainer_groupContainer 2 0 -1 router
++ local n_grp=2 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.2.10.1/16
+ subnet_router=158.2.10.1/16
++ subnet_sshContainer_groupContainer 2 0 -1 L3-host
++ local n_grp=2 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.2.10.2/16
+ subnet_host=158.2.10.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ 0 == 0 ]]
+ echo 'echo ZURI router'
+ echo 'mkdir -p ${dirname}/ZURI'
+ echo 'save ${dirname}/ZURI/router.conf      158.2.10.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/ZURI/router.rib.json  158.2.10.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host0
+ echo 'echo ZURI host0'
+ echo 'save ${dirname}/ZURI/host0.ip         158.2.10.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host0.route      158.2.10.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host0.route6     158.2.10.2/16 ip -6 route'
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'save ${dirname}/ZURI/host0.rpki_cache 158.2.10.2/16 "tar -czC /root/.rpki-cache repository"'
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g2/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g2/restore_configs.sh
+ echo '  restore_router_config 158.2.10.1/16 ZURI vtysh'
+ echo '  main 158.2.10.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g2/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g2/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 2 1 -1 router
++ local n_grp=2 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.2.11.1/16
+ subnet_router=158.2.11.1/16
++ subnet_sshContainer_groupContainer 2 1 -1 L3-host
++ local n_grp=2 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.2.11.2/16
+ subnet_host=158.2.11.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ 1 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host1
+ echo 'echo ZURI host1'
+ echo 'save ${dirname}/ZURI/host1.ip         158.2.11.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host1.route      158.2.11.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host1.route6     158.2.11.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g2/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g2/restore_configs.sh
+ echo '  restore_router_config 158.2.11.1/16 ZURI vtysh'
+ echo '  main 158.2.11.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g2/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g2/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 2 2 -1 router
++ local n_grp=2 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.2.12.1/16
+ subnet_router=158.2.12.1/16
++ subnet_sshContainer_groupContainer 2 2 -1 L3-host
++ local n_grp=2 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.2.12.2/16
+ subnet_host=158.2.12.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 2 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host2
+ echo 'echo ZURI host2'
+ echo 'save ${dirname}/ZURI/host2.ip         158.2.12.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host2.route      158.2.12.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host2.route6     158.2.12.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g2/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g2/restore_configs.sh
+ echo '  restore_router_config 158.2.12.1/16 ZURI vtysh'
+ echo '  main 158.2.12.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g2/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g2/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 2 3 -1 router
++ local n_grp=2 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.2.13.1/16
+ subnet_router=158.2.13.1/16
++ subnet_sshContainer_groupContainer 2 3 -1 L3-host
++ local n_grp=2 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.2.13.2/16
+ subnet_host=158.2.13.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 3 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host3
+ echo 'echo ZURI host3'
+ echo 'save ${dirname}/ZURI/host3.ip         158.2.13.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host3.route      158.2.13.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host3.route6     158.2.13.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g2/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g2/restore_configs.sh
+ echo '  restore_router_config 158.2.13.1/16 ZURI vtysh'
+ echo '  main 158.2.13.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g2/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g2/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo ''
+ echo 'tar -czf ${dirname}.tar.gz ${dirname}/*'
+ echo ''
+ echo 'echo '\''Saving complete!'\'''
+ echo 'echo '\'''\'''
+ echo 'echo "Download the archive file (run these commands from your own computer):"'
+ echo 'echo "    scp -O -P 2002 root@172.26.123.85:${dirname}.tar.gz ."'
+ echo 'echo '\''Extract the archive:'\'''
+ echo 'echo "    tar -xzf ${dirname}.tar.gz"'
+ echo 'echo "Alternatively, to directly update the "config" folder in the current local directory:"'
+ echo 'echo "    scp -O -r -P 2002 root@172.26.123.85:${dirname} config"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If the scp commands do not work for you, use ssh (also from your own computer):'\'''
+ echo 'echo '\''(Reliable only on UNIX systems. On Windows, you may use WinSCP instead)'\'''
+ echo 'echo "Download the archive:"'
+ echo 'echo "    ssh -q -p 2002 root@172.26.123.85 cat ${dirname}.tar.gz > ${dirname}.tar.gz"'
+ echo 'echo "Download and unpack the archive:"'
+ echo 'echo "    ssh -q -p 2002 root@172.26.123.85 cat ${dirname}.tar.gz | tar -xz"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If you are using an ssh config file, you may need to update the scp and ssh commands above to match your configuration.'\'''
+ echo 'echo '\''For example, you may need to replace "root@172.26.123.85" with the hostname you have defined in your ssh config file.'\'''
+ echo 'echo '\''Contact the TAs if you are unable to download your files!'\'''
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=3
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ group_layer2_switches=l2_switches.txt
+ group_layer2_hosts=l2_hosts.txt
+ group_layer2_links=l2_links.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g3/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh
+ '[' AS == IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=8
+ n_l2_switches=4
+ n_l2_hosts=11
+ n_l2_links=3
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo ''
+ echo 'dirname=configs_${1:-$(date +%m-%d-%Y_%H-%M-%S)}'
+ echo 'mkdir -p $dirname'
+ echo ''
+ echo '# Arguments: filename, subnet, command'
+ echo 'save() { eval "ssh -q -o StrictHostKeyChecking=no root@${2%???} ${@:3} > $1" ; }'
+ echo ''
+ cp /home/service/tud/mini_internet_project/platform/setup/restore_configs.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ cp /home/service/tud/mini_internet_project/platform/setup/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g3/save_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh
+ declare -A l2_id
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 3 0 -1 router
++ local n_grp=3 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.10.1/16
+ subnet_router=158.3.10.1/16
++ subnet_sshContainer_groupContainer 3 0 -1 L3-host
++ local n_grp=3 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.10.2/16
+ subnet_host=158.3.10.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ 0 == 0 ]]
+ echo 'echo ZURI router'
+ echo 'mkdir -p ${dirname}/ZURI'
+ echo 'save ${dirname}/ZURI/router.conf      158.3.10.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/ZURI/router.rib.json  158.3.10.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' linux == linux ']'
+ echo 'save ${dirname}/ZURI/router.rib6.json 158.3.10.1/16 \"vtysh -c \'\''sh ipv6 route json\'\''\" \| grep -v uptime'
+ echo 'save ${dirname}/ZURI/router.tunnels   158.3.10.1/16 ip tunnel show'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo ZURI host'
+ echo 'save ${dirname}/ZURI/host.ip         158.3.10.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host.route      158.3.10.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host.route6     158.3.10.2/16 ip -6 route'
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ echo '  restore_router_config 158.3.10.1/16 ZURI linux'
+ echo '  main 158.3.10.1/16 ZURI linux'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=vtysh
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 3 1 -1 router
++ local n_grp=3 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.11.1/16
+ subnet_router=158.3.11.1/16
++ subnet_sshContainer_groupContainer 3 1 -1 L3-host
++ local n_grp=3 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.11.2/16
+ subnet_host=158.3.11.2/16
+ savedir='${dirname}/BASE'
+ [[ 0 == 1000000 ]]
+ [[ 1 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo BASE router'
+ echo 'mkdir -p ${dirname}/BASE'
+ echo 'save ${dirname}/BASE/router.conf      158.3.11.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/BASE/router.rib.json  158.3.11.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo BASE host'
+ echo 'save ${dirname}/BASE/host.ip         158.3.11.2/16 ip addr'
+ echo 'save ${dirname}/BASE/host.route      158.3.11.2/16 ip route'
+ echo 'save ${dirname}/BASE/host.route6     158.3.11.2/16 ip -6 route'
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "BASE" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ echo '  restore_router_config 158.3.11.1/16 BASE vtysh'
+ echo '  main 158.3.11.1/16 BASE vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
++ subnet_sshContainer_groupContainer 3 2 -1 router
++ local n_grp=3 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.12.1/16
+ subnet_router=158.3.12.1/16
++ subnet_sshContainer_groupContainer 3 2 -1 L3-host
++ local n_grp=3 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.12.2/16
+ subnet_host=158.3.12.2/16
+ savedir='${dirname}/GENE'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=2
+ [[ 2 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo GENE router'
+ echo 'mkdir -p ${dirname}/GENE'
+ echo 'save ${dirname}/GENE/router.conf      158.3.12.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/GENE/router.rib.json  158.3.12.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' linux == linux ']'
+ echo 'save ${dirname}/GENE/router.rib6.json 158.3.12.1/16 \"vtysh -c \'\''sh ipv6 route json\'\''\" \| grep -v uptime'
+ echo 'save ${dirname}/GENE/router.tunnels   158.3.12.1/16 ip tunnel show'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo GENE host'
+ echo 'save ${dirname}/GENE/host.ip         158.3.12.2/16 ip addr'
+ echo 'save ${dirname}/GENE/host.route      158.3.12.2/16 ip route'
+ echo 'save ${dirname}/GENE/host.route6     158.3.12.2/16 ip -6 route'
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCS
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCS == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "GENE" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ echo '  restore_router_config 158.3.12.1/16 GENE linux'
+ echo '  main 158.3.12.1/16 GENE linux'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
++ subnet_sshContainer_groupContainer 3 3 -1 router
++ local n_grp=3 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.13.1/16
+ subnet_router=158.3.13.1/16
++ subnet_sshContainer_groupContainer 3 3 -1 L3-host
++ local n_grp=3 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.13.2/16
+ subnet_host=158.3.13.2/16
+ savedir='${dirname}/LUGA'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=3
+ [[ 3 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo LUGA router'
+ echo 'mkdir -p ${dirname}/LUGA'
+ echo 'save ${dirname}/LUGA/router.conf      158.3.13.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/LUGA/router.rib.json  158.3.13.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo LUGA host'
+ echo 'save ${dirname}/LUGA/host.ip         158.3.13.2/16 ip addr'
+ echo 'save ${dirname}/LUGA/host.route      158.3.13.2/16 ip route'
+ echo 'save ${dirname}/LUGA/host.route6     158.3.13.2/16 ip -6 route'
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'save ${dirname}/LUGA/host.rpki_cache 158.3.13.2/16 "tar -czC /root/.rpki-cache repository"'
+ echo 'if [[ "$device_name" == "LUGA" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ echo '  restore_router_config 158.3.13.1/16 LUGA vtysh'
+ echo '  main 158.3.13.1/16 LUGA vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 3 4 -1 router
++ local n_grp=3 n_router=4 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.14.1/16
+ subnet_router=158.3.14.1/16
++ subnet_sshContainer_groupContainer 3 4 -1 L3-host
++ local n_grp=3 n_router=4 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.14.2/16
+ subnet_host=158.3.14.2/16
+ savedir='${dirname}/MUNI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=4
+ [[ 4 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo MUNI router'
+ echo 'mkdir -p ${dirname}/MUNI'
+ echo 'save ${dirname}/MUNI/router.conf      158.3.14.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/MUNI/router.rib.json  158.3.14.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo MUNI host'
+ echo 'save ${dirname}/MUNI/host.ip         158.3.14.2/16 ip addr'
+ echo 'save ${dirname}/MUNI/host.route      158.3.14.2/16 ip route'
+ echo 'save ${dirname}/MUNI/host.route6     158.3.14.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "MUNI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ echo '  restore_router_config 158.3.14.1/16 MUNI vtysh'
+ echo '  main 158.3.14.1/16 MUNI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 3 5 -1 router
++ local n_grp=3 n_router=5 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.15.1/16
+ subnet_router=158.3.15.1/16
++ subnet_sshContainer_groupContainer 3 5 -1 L3-host
++ local n_grp=3 n_router=5 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.15.2/16
+ subnet_host=158.3.15.2/16
+ savedir='${dirname}/LYON'
+ [[ 4 == 1000000 ]]
+ [[ 5 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo LYON router'
+ echo 'mkdir -p ${dirname}/LYON'
+ echo 'save ${dirname}/LYON/router.conf      158.3.15.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/LYON/router.rib.json  158.3.15.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo LYON host'
+ echo 'save ${dirname}/LYON/host.ip         158.3.15.2/16 ip addr'
+ echo 'save ${dirname}/LYON/host.route      158.3.15.2/16 ip route'
+ echo 'save ${dirname}/LYON/host.route6     158.3.15.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "LYON" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ echo '  restore_router_config 158.3.15.1/16 LYON vtysh'
+ echo '  main 158.3.15.1/16 LYON vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 3 6 -1 router
++ local n_grp=3 n_router=6 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.16.1/16
+ subnet_router=158.3.16.1/16
++ subnet_sshContainer_groupContainer 3 6 -1 L3-host
++ local n_grp=3 n_router=6 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.16.2/16
+ subnet_host=158.3.16.2/16
+ savedir='${dirname}/VIEN'
+ [[ 4 == 1000000 ]]
+ [[ 6 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo VIEN router'
+ echo 'mkdir -p ${dirname}/VIEN'
+ echo 'save ${dirname}/VIEN/router.conf      158.3.16.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/VIEN/router.rib.json  158.3.16.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo VIEN host'
+ echo 'save ${dirname}/VIEN/host.ip         158.3.16.2/16 ip addr'
+ echo 'save ${dirname}/VIEN/host.route      158.3.16.2/16 ip route'
+ echo 'save ${dirname}/VIEN/host.route6     158.3.16.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "VIEN" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ echo '  restore_router_config 158.3.16.1/16 VIEN vtysh'
+ echo '  main 158.3.16.1/16 VIEN vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 3 7 -1 router
++ local n_grp=3 n_router=7 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.17.1/16
+ subnet_router=158.3.17.1/16
++ subnet_sshContainer_groupContainer 3 7 -1 L3-host
++ local n_grp=3 n_router=7 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.17.2/16
+ subnet_host=158.3.17.2/16
+ savedir='${dirname}/MILA'
+ [[ 4 == 1000000 ]]
+ [[ 7 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo MILA router'
+ echo 'mkdir -p ${dirname}/MILA'
+ echo 'save ${dirname}/MILA/router.conf      158.3.17.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/MILA/router.rib.json  158.3.17.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo MILA host'
+ echo 'save ${dirname}/MILA/host.ip         158.3.17.2/16 ip addr'
+ echo 'save ${dirname}/MILA/host.route      158.3.17.2/16 ip route'
+ echo 'save ${dirname}/MILA/host.route6     158.3.17.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "MILA" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ echo '  restore_router_config 158.3.17.1/16 MILA vtysh'
+ echo '  main 158.3.17.1/16 MILA vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ s_name=S1
++ subnet_sshContainer_groupContainer 3 0 0 switch
++ local n_grp=3 n_router=0 n_layer2=0 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.3.100.3/16
+ subnet=158.3.100.3/16
+ savedir='${dirname}/S1'
+ echo 'echo S1'
+ echo 'mkdir -p ${dirname}/S1'
+ echo 'save ${dirname}/S1/switch.db      158.3.100.3/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S1/switch.summary 158.3.100.3/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ s_name=S2
++ subnet_sshContainer_groupContainer 3 0 1 switch
++ local n_grp=3 n_router=0 n_layer2=1 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.3.100.4/16
+ subnet=158.3.100.4/16
+ savedir='${dirname}/S2'
+ echo 'echo S2'
+ echo 'mkdir -p ${dirname}/S2'
+ echo 'save ${dirname}/S2/switch.db      158.3.100.4/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S2/switch.summary 158.3.100.4/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ s_name=S3
++ subnet_sshContainer_groupContainer 3 0 2 switch
++ local n_grp=3 n_router=0 n_layer2=2 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.3.100.5/16
+ subnet=158.3.100.5/16
+ savedir='${dirname}/S3'
+ echo 'echo S3'
+ echo 'mkdir -p ${dirname}/S3'
+ echo 'save ${dirname}/S3/switch.db      158.3.100.5/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S3/switch.summary 158.3.100.5/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCS
+ s_name=S4
++ subnet_sshContainer_groupContainer 3 2 3 switch
++ local n_grp=3 n_router=2 n_layer2=3 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.3.100.6/16
+ subnet=158.3.100.6/16
+ savedir='${dirname}/S4'
+ echo 'echo S4'
+ echo 'mkdir -p ${dirname}/S4'
+ echo 'save ${dirname}/S4/switch.db      158.3.100.6/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S4/switch.summary 158.3.100.6/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_1
+ [[ FIFA_1 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 3 0 0 L2-host
++ local n_grp=3 n_router=0 n_layer2=0 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.3/16
+ subnet=158.3.200.3/16
+ savedir='${dirname}/FIFA_1'
+ echo 'echo FIFA_1'
+ echo 'mkdir -p ${dirname}/FIFA_1'
+ echo 'save ${dirname}/FIFA_1/host.ip     158.3.200.3/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_1/host.route  158.3.200.3/16 "ip route"'
+ echo 'save ${dirname}/FIFA_1/host.route6 158.3.200.3/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_1
+ [[ UEFA_1 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 3 0 1 L2-host
++ local n_grp=3 n_router=0 n_layer2=1 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.4/16
+ subnet=158.3.200.4/16
+ savedir='${dirname}/UEFA_1'
+ echo 'echo UEFA_1'
+ echo 'mkdir -p ${dirname}/UEFA_1'
+ echo 'save ${dirname}/UEFA_1/host.ip     158.3.200.4/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_1/host.route  158.3.200.4/16 "ip route"'
+ echo 'save ${dirname}/UEFA_1/host.route6 158.3.200.4/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_1
+ [[ vpn_1 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 3 0 2 L2-host
++ local n_grp=3 n_router=0 n_layer2=2 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.5/16
+ subnet=158.3.200.5/16
+ savedir='${dirname}/vpn_1'
+ echo 'echo vpn_1'
+ echo 'mkdir -p ${dirname}/vpn_1'
+ echo 'save ${dirname}/vpn_1/host.ip     158.3.200.5/16 "ip addr"'
+ echo 'save ${dirname}/vpn_1/host.route  158.3.200.5/16 "ip route"'
+ echo 'save ${dirname}/vpn_1/host.route6 158.3.200.5/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_2
+ [[ FIFA_2 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 3 0 3 L2-host
++ local n_grp=3 n_router=0 n_layer2=3 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.6/16
+ subnet=158.3.200.6/16
+ savedir='${dirname}/FIFA_2'
+ echo 'echo FIFA_2'
+ echo 'mkdir -p ${dirname}/FIFA_2'
+ echo 'save ${dirname}/FIFA_2/host.ip     158.3.200.6/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_2/host.route  158.3.200.6/16 "ip route"'
+ echo 'save ${dirname}/FIFA_2/host.route6 158.3.200.6/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_2
+ [[ UEFA_2 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 3 0 4 L2-host
++ local n_grp=3 n_router=0 n_layer2=4 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.7/16
+ subnet=158.3.200.7/16
+ savedir='${dirname}/UEFA_2'
+ echo 'echo UEFA_2'
+ echo 'mkdir -p ${dirname}/UEFA_2'
+ echo 'save ${dirname}/UEFA_2/host.ip     158.3.200.7/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_2/host.route  158.3.200.7/16 "ip route"'
+ echo 'save ${dirname}/UEFA_2/host.route6 158.3.200.7/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_2
+ [[ vpn_2 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 3 0 5 L2-host
++ local n_grp=3 n_router=0 n_layer2=5 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.8/16
+ subnet=158.3.200.8/16
+ savedir='${dirname}/vpn_2'
+ echo 'echo vpn_2'
+ echo 'mkdir -p ${dirname}/vpn_2'
+ echo 'save ${dirname}/vpn_2/host.ip     158.3.200.8/16 "ip addr"'
+ echo 'save ${dirname}/vpn_2/host.route  158.3.200.8/16 "ip route"'
+ echo 'save ${dirname}/vpn_2/host.route6 158.3.200.8/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_3
+ [[ FIFA_3 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 3 0 6 L2-host
++ local n_grp=3 n_router=0 n_layer2=6 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.9/16
+ subnet=158.3.200.9/16
+ savedir='${dirname}/FIFA_3'
+ echo 'echo FIFA_3'
+ echo 'mkdir -p ${dirname}/FIFA_3'
+ echo 'save ${dirname}/FIFA_3/host.ip     158.3.200.9/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_3/host.route  158.3.200.9/16 "ip route"'
+ echo 'save ${dirname}/FIFA_3/host.route6 158.3.200.9/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_3
+ [[ UEFA_3 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 3 0 7 L2-host
++ local n_grp=3 n_router=0 n_layer2=7 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.10/16
+ subnet=158.3.200.10/16
+ savedir='${dirname}/UEFA_3'
+ echo 'echo UEFA_3'
+ echo 'mkdir -p ${dirname}/UEFA_3'
+ echo 'save ${dirname}/UEFA_3/host.ip     158.3.200.10/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_3/host.route  158.3.200.10/16 "ip route"'
+ echo 'save ${dirname}/UEFA_3/host.route6 158.3.200.10/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_3
+ [[ vpn_3 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 3 0 8 L2-host
++ local n_grp=3 n_router=0 n_layer2=8 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.11/16
+ subnet=158.3.200.11/16
+ savedir='${dirname}/vpn_3'
+ echo 'echo vpn_3'
+ echo 'mkdir -p ${dirname}/vpn_3'
+ echo 'save ${dirname}/vpn_3/host.ip     158.3.200.11/16 "ip addr"'
+ echo 'save ${dirname}/vpn_3/host.route  158.3.200.11/16 "ip route"'
+ echo 'save ${dirname}/vpn_3/host.route6 158.3.200.11/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_4
+ [[ FIFA_4 != *VPN* ]]
+ l2_name=DCS
++ subnet_sshContainer_groupContainer 3 2 9 L2-host
++ local n_grp=3 n_router=2 n_layer2=9 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.12/16
+ subnet=158.3.200.12/16
+ savedir='${dirname}/FIFA_4'
+ echo 'echo FIFA_4'
+ echo 'mkdir -p ${dirname}/FIFA_4'
+ echo 'save ${dirname}/FIFA_4/host.ip     158.3.200.12/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_4/host.route  158.3.200.12/16 "ip route"'
+ echo 'save ${dirname}/FIFA_4/host.route6 158.3.200.12/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_4
+ [[ UEFA_4 != *VPN* ]]
+ l2_name=DCS
++ subnet_sshContainer_groupContainer 3 2 10 L2-host
++ local n_grp=3 n_router=2 n_layer2=10 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.13/16
+ subnet=158.3.200.13/16
+ savedir='${dirname}/UEFA_4'
+ echo 'echo UEFA_4'
+ echo 'mkdir -p ${dirname}/UEFA_4'
+ echo 'save ${dirname}/UEFA_4/host.ip     158.3.200.13/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_4/host.route  158.3.200.13/16 "ip route"'
+ echo 'save ${dirname}/UEFA_4/host.route6 158.3.200.13/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ echo ''
+ echo 'tar -czf ${dirname}.tar.gz ${dirname}/*'
+ echo ''
+ echo 'echo '\''Saving complete!'\'''
+ echo 'echo '\'''\'''
+ echo 'echo "Download the archive file (run these commands from your own computer):"'
+ echo 'echo "    scp -O -P 2003 root@172.26.123.85:${dirname}.tar.gz ."'
+ echo 'echo '\''Extract the archive:'\'''
+ echo 'echo "    tar -xzf ${dirname}.tar.gz"'
+ echo 'echo "Alternatively, to directly update the "config" folder in the current local directory:"'
+ echo 'echo "    scp -O -r -P 2003 root@172.26.123.85:${dirname} config"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If the scp commands do not work for you, use ssh (also from your own computer):'\'''
+ echo 'echo '\''(Reliable only on UNIX systems. On Windows, you may use WinSCP instead)'\'''
+ echo 'echo "Download the archive:"'
+ echo 'echo "    ssh -q -p 2003 root@172.26.123.85 cat ${dirname}.tar.gz > ${dirname}.tar.gz"'
+ echo 'echo "Download and unpack the archive:"'
+ echo 'echo "    ssh -q -p 2003 root@172.26.123.85 cat ${dirname}.tar.gz | tar -xz"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If you are using an ssh config file, you may need to update the scp and ssh commands above to match your configuration.'\'''
+ echo 'echo '\''For example, you may need to replace "root@172.26.123.85" with the hostname you have defined in your ssh config file.'\'''
+ echo 'echo '\''Contact the TAs if you are unable to download your files!'\'''
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=4
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ group_layer2_switches=l2_switches.txt
+ group_layer2_hosts=l2_hosts.txt
+ group_layer2_links=l2_links.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g4/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh
+ '[' AS == IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=8
+ n_l2_switches=4
+ n_l2_hosts=11
+ n_l2_links=3
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo ''
+ echo 'dirname=configs_${1:-$(date +%m-%d-%Y_%H-%M-%S)}'
+ echo 'mkdir -p $dirname'
+ echo ''
+ echo '# Arguments: filename, subnet, command'
+ echo 'save() { eval "ssh -q -o StrictHostKeyChecking=no root@${2%???} ${@:3} > $1" ; }'
+ echo ''
+ cp /home/service/tud/mini_internet_project/platform/setup/restore_configs.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ cp /home/service/tud/mini_internet_project/platform/setup/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g4/save_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh
+ declare -A l2_id
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 4 0 -1 router
++ local n_grp=4 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.10.1/16
+ subnet_router=158.4.10.1/16
++ subnet_sshContainer_groupContainer 4 0 -1 L3-host
++ local n_grp=4 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.10.2/16
+ subnet_host=158.4.10.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ 0 == 0 ]]
+ echo 'echo ZURI router'
+ echo 'mkdir -p ${dirname}/ZURI'
+ echo 'save ${dirname}/ZURI/router.conf      158.4.10.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/ZURI/router.rib.json  158.4.10.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' linux == linux ']'
+ echo 'save ${dirname}/ZURI/router.rib6.json 158.4.10.1/16 \"vtysh -c \'\''sh ipv6 route json\'\''\" \| grep -v uptime'
+ echo 'save ${dirname}/ZURI/router.tunnels   158.4.10.1/16 ip tunnel show'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo ZURI host'
+ echo 'save ${dirname}/ZURI/host.ip         158.4.10.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host.route      158.4.10.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host.route6     158.4.10.2/16 ip -6 route'
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ echo '  restore_router_config 158.4.10.1/16 ZURI linux'
+ echo '  main 158.4.10.1/16 ZURI linux'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=vtysh
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 4 1 -1 router
++ local n_grp=4 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.11.1/16
+ subnet_router=158.4.11.1/16
++ subnet_sshContainer_groupContainer 4 1 -1 L3-host
++ local n_grp=4 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.11.2/16
+ subnet_host=158.4.11.2/16
+ savedir='${dirname}/BASE'
+ [[ 0 == 1000000 ]]
+ [[ 1 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo BASE router'
+ echo 'mkdir -p ${dirname}/BASE'
+ echo 'save ${dirname}/BASE/router.conf      158.4.11.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/BASE/router.rib.json  158.4.11.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo BASE host'
+ echo 'save ${dirname}/BASE/host.ip         158.4.11.2/16 ip addr'
+ echo 'save ${dirname}/BASE/host.route      158.4.11.2/16 ip route'
+ echo 'save ${dirname}/BASE/host.route6     158.4.11.2/16 ip -6 route'
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "BASE" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ echo '  restore_router_config 158.4.11.1/16 BASE vtysh'
+ echo '  main 158.4.11.1/16 BASE vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
++ subnet_sshContainer_groupContainer 4 2 -1 router
++ local n_grp=4 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.12.1/16
+ subnet_router=158.4.12.1/16
++ subnet_sshContainer_groupContainer 4 2 -1 L3-host
++ local n_grp=4 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.12.2/16
+ subnet_host=158.4.12.2/16
+ savedir='${dirname}/GENE'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=2
+ [[ 2 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo GENE router'
+ echo 'mkdir -p ${dirname}/GENE'
+ echo 'save ${dirname}/GENE/router.conf      158.4.12.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/GENE/router.rib.json  158.4.12.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' linux == linux ']'
+ echo 'save ${dirname}/GENE/router.rib6.json 158.4.12.1/16 \"vtysh -c \'\''sh ipv6 route json\'\''\" \| grep -v uptime'
+ echo 'save ${dirname}/GENE/router.tunnels   158.4.12.1/16 ip tunnel show'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo GENE host'
+ echo 'save ${dirname}/GENE/host.ip         158.4.12.2/16 ip addr'
+ echo 'save ${dirname}/GENE/host.route      158.4.12.2/16 ip route'
+ echo 'save ${dirname}/GENE/host.route6     158.4.12.2/16 ip -6 route'
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCS
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCS == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "GENE" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ echo '  restore_router_config 158.4.12.1/16 GENE linux'
+ echo '  main 158.4.12.1/16 GENE linux'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
++ subnet_sshContainer_groupContainer 4 3 -1 router
++ local n_grp=4 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.13.1/16
+ subnet_router=158.4.13.1/16
++ subnet_sshContainer_groupContainer 4 3 -1 L3-host
++ local n_grp=4 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.13.2/16
+ subnet_host=158.4.13.2/16
+ savedir='${dirname}/LUGA'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=3
+ [[ 3 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo LUGA router'
+ echo 'mkdir -p ${dirname}/LUGA'
+ echo 'save ${dirname}/LUGA/router.conf      158.4.13.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/LUGA/router.rib.json  158.4.13.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo LUGA host'
+ echo 'save ${dirname}/LUGA/host.ip         158.4.13.2/16 ip addr'
+ echo 'save ${dirname}/LUGA/host.route      158.4.13.2/16 ip route'
+ echo 'save ${dirname}/LUGA/host.route6     158.4.13.2/16 ip -6 route'
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'save ${dirname}/LUGA/host.rpki_cache 158.4.13.2/16 "tar -czC /root/.rpki-cache repository"'
+ echo 'if [[ "$device_name" == "LUGA" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ echo '  restore_router_config 158.4.13.1/16 LUGA vtysh'
+ echo '  main 158.4.13.1/16 LUGA vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 4 4 -1 router
++ local n_grp=4 n_router=4 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.14.1/16
+ subnet_router=158.4.14.1/16
++ subnet_sshContainer_groupContainer 4 4 -1 L3-host
++ local n_grp=4 n_router=4 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.14.2/16
+ subnet_host=158.4.14.2/16
+ savedir='${dirname}/MUNI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=4
+ [[ 4 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo MUNI router'
+ echo 'mkdir -p ${dirname}/MUNI'
+ echo 'save ${dirname}/MUNI/router.conf      158.4.14.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/MUNI/router.rib.json  158.4.14.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo MUNI host'
+ echo 'save ${dirname}/MUNI/host.ip         158.4.14.2/16 ip addr'
+ echo 'save ${dirname}/MUNI/host.route      158.4.14.2/16 ip route'
+ echo 'save ${dirname}/MUNI/host.route6     158.4.14.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "MUNI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ echo '  restore_router_config 158.4.14.1/16 MUNI vtysh'
+ echo '  main 158.4.14.1/16 MUNI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 4 5 -1 router
++ local n_grp=4 n_router=5 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.15.1/16
+ subnet_router=158.4.15.1/16
++ subnet_sshContainer_groupContainer 4 5 -1 L3-host
++ local n_grp=4 n_router=5 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.15.2/16
+ subnet_host=158.4.15.2/16
+ savedir='${dirname}/LYON'
+ [[ 4 == 1000000 ]]
+ [[ 5 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo LYON router'
+ echo 'mkdir -p ${dirname}/LYON'
+ echo 'save ${dirname}/LYON/router.conf      158.4.15.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/LYON/router.rib.json  158.4.15.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo LYON host'
+ echo 'save ${dirname}/LYON/host.ip         158.4.15.2/16 ip addr'
+ echo 'save ${dirname}/LYON/host.route      158.4.15.2/16 ip route'
+ echo 'save ${dirname}/LYON/host.route6     158.4.15.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "LYON" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ echo '  restore_router_config 158.4.15.1/16 LYON vtysh'
+ echo '  main 158.4.15.1/16 LYON vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 4 6 -1 router
++ local n_grp=4 n_router=6 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.16.1/16
+ subnet_router=158.4.16.1/16
++ subnet_sshContainer_groupContainer 4 6 -1 L3-host
++ local n_grp=4 n_router=6 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.16.2/16
+ subnet_host=158.4.16.2/16
+ savedir='${dirname}/VIEN'
+ [[ 4 == 1000000 ]]
+ [[ 6 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo VIEN router'
+ echo 'mkdir -p ${dirname}/VIEN'
+ echo 'save ${dirname}/VIEN/router.conf      158.4.16.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/VIEN/router.rib.json  158.4.16.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo VIEN host'
+ echo 'save ${dirname}/VIEN/host.ip         158.4.16.2/16 ip addr'
+ echo 'save ${dirname}/VIEN/host.route      158.4.16.2/16 ip route'
+ echo 'save ${dirname}/VIEN/host.route6     158.4.16.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "VIEN" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ echo '  restore_router_config 158.4.16.1/16 VIEN vtysh'
+ echo '  main 158.4.16.1/16 VIEN vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 4 7 -1 router
++ local n_grp=4 n_router=7 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.17.1/16
+ subnet_router=158.4.17.1/16
++ subnet_sshContainer_groupContainer 4 7 -1 L3-host
++ local n_grp=4 n_router=7 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.17.2/16
+ subnet_host=158.4.17.2/16
+ savedir='${dirname}/MILA'
+ [[ 4 == 1000000 ]]
+ [[ 7 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo MILA router'
+ echo 'mkdir -p ${dirname}/MILA'
+ echo 'save ${dirname}/MILA/router.conf      158.4.17.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/MILA/router.rib.json  158.4.17.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo MILA host'
+ echo 'save ${dirname}/MILA/host.ip         158.4.17.2/16 ip addr'
+ echo 'save ${dirname}/MILA/host.route      158.4.17.2/16 ip route'
+ echo 'save ${dirname}/MILA/host.route6     158.4.17.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "MILA" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ echo '  restore_router_config 158.4.17.1/16 MILA vtysh'
+ echo '  main 158.4.17.1/16 MILA vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ s_name=S1
++ subnet_sshContainer_groupContainer 4 0 0 switch
++ local n_grp=4 n_router=0 n_layer2=0 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.4.100.3/16
+ subnet=158.4.100.3/16
+ savedir='${dirname}/S1'
+ echo 'echo S1'
+ echo 'mkdir -p ${dirname}/S1'
+ echo 'save ${dirname}/S1/switch.db      158.4.100.3/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S1/switch.summary 158.4.100.3/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ s_name=S2
++ subnet_sshContainer_groupContainer 4 0 1 switch
++ local n_grp=4 n_router=0 n_layer2=1 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.4.100.4/16
+ subnet=158.4.100.4/16
+ savedir='${dirname}/S2'
+ echo 'echo S2'
+ echo 'mkdir -p ${dirname}/S2'
+ echo 'save ${dirname}/S2/switch.db      158.4.100.4/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S2/switch.summary 158.4.100.4/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ s_name=S3
++ subnet_sshContainer_groupContainer 4 0 2 switch
++ local n_grp=4 n_router=0 n_layer2=2 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.4.100.5/16
+ subnet=158.4.100.5/16
+ savedir='${dirname}/S3'
+ echo 'echo S3'
+ echo 'mkdir -p ${dirname}/S3'
+ echo 'save ${dirname}/S3/switch.db      158.4.100.5/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S3/switch.summary 158.4.100.5/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCS
+ s_name=S4
++ subnet_sshContainer_groupContainer 4 2 3 switch
++ local n_grp=4 n_router=2 n_layer2=3 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.4.100.6/16
+ subnet=158.4.100.6/16
+ savedir='${dirname}/S4'
+ echo 'echo S4'
+ echo 'mkdir -p ${dirname}/S4'
+ echo 'save ${dirname}/S4/switch.db      158.4.100.6/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S4/switch.summary 158.4.100.6/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_1
+ [[ FIFA_1 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 4 0 0 L2-host
++ local n_grp=4 n_router=0 n_layer2=0 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.3/16
+ subnet=158.4.200.3/16
+ savedir='${dirname}/FIFA_1'
+ echo 'echo FIFA_1'
+ echo 'mkdir -p ${dirname}/FIFA_1'
+ echo 'save ${dirname}/FIFA_1/host.ip     158.4.200.3/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_1/host.route  158.4.200.3/16 "ip route"'
+ echo 'save ${dirname}/FIFA_1/host.route6 158.4.200.3/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_1
+ [[ UEFA_1 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 4 0 1 L2-host
++ local n_grp=4 n_router=0 n_layer2=1 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.4/16
+ subnet=158.4.200.4/16
+ savedir='${dirname}/UEFA_1'
+ echo 'echo UEFA_1'
+ echo 'mkdir -p ${dirname}/UEFA_1'
+ echo 'save ${dirname}/UEFA_1/host.ip     158.4.200.4/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_1/host.route  158.4.200.4/16 "ip route"'
+ echo 'save ${dirname}/UEFA_1/host.route6 158.4.200.4/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_1
+ [[ vpn_1 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 4 0 2 L2-host
++ local n_grp=4 n_router=0 n_layer2=2 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.5/16
+ subnet=158.4.200.5/16
+ savedir='${dirname}/vpn_1'
+ echo 'echo vpn_1'
+ echo 'mkdir -p ${dirname}/vpn_1'
+ echo 'save ${dirname}/vpn_1/host.ip     158.4.200.5/16 "ip addr"'
+ echo 'save ${dirname}/vpn_1/host.route  158.4.200.5/16 "ip route"'
+ echo 'save ${dirname}/vpn_1/host.route6 158.4.200.5/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_2
+ [[ FIFA_2 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 4 0 3 L2-host
++ local n_grp=4 n_router=0 n_layer2=3 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.6/16
+ subnet=158.4.200.6/16
+ savedir='${dirname}/FIFA_2'
+ echo 'echo FIFA_2'
+ echo 'mkdir -p ${dirname}/FIFA_2'
+ echo 'save ${dirname}/FIFA_2/host.ip     158.4.200.6/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_2/host.route  158.4.200.6/16 "ip route"'
+ echo 'save ${dirname}/FIFA_2/host.route6 158.4.200.6/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_2
+ [[ UEFA_2 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 4 0 4 L2-host
++ local n_grp=4 n_router=0 n_layer2=4 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.7/16
+ subnet=158.4.200.7/16
+ savedir='${dirname}/UEFA_2'
+ echo 'echo UEFA_2'
+ echo 'mkdir -p ${dirname}/UEFA_2'
+ echo 'save ${dirname}/UEFA_2/host.ip     158.4.200.7/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_2/host.route  158.4.200.7/16 "ip route"'
+ echo 'save ${dirname}/UEFA_2/host.route6 158.4.200.7/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_2
+ [[ vpn_2 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 4 0 5 L2-host
++ local n_grp=4 n_router=0 n_layer2=5 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.8/16
+ subnet=158.4.200.8/16
+ savedir='${dirname}/vpn_2'
+ echo 'echo vpn_2'
+ echo 'mkdir -p ${dirname}/vpn_2'
+ echo 'save ${dirname}/vpn_2/host.ip     158.4.200.8/16 "ip addr"'
+ echo 'save ${dirname}/vpn_2/host.route  158.4.200.8/16 "ip route"'
+ echo 'save ${dirname}/vpn_2/host.route6 158.4.200.8/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_3
+ [[ FIFA_3 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 4 0 6 L2-host
++ local n_grp=4 n_router=0 n_layer2=6 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.9/16
+ subnet=158.4.200.9/16
+ savedir='${dirname}/FIFA_3'
+ echo 'echo FIFA_3'
+ echo 'mkdir -p ${dirname}/FIFA_3'
+ echo 'save ${dirname}/FIFA_3/host.ip     158.4.200.9/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_3/host.route  158.4.200.9/16 "ip route"'
+ echo 'save ${dirname}/FIFA_3/host.route6 158.4.200.9/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_3
+ [[ UEFA_3 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 4 0 7 L2-host
++ local n_grp=4 n_router=0 n_layer2=7 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.10/16
+ subnet=158.4.200.10/16
+ savedir='${dirname}/UEFA_3'
+ echo 'echo UEFA_3'
+ echo 'mkdir -p ${dirname}/UEFA_3'
+ echo 'save ${dirname}/UEFA_3/host.ip     158.4.200.10/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_3/host.route  158.4.200.10/16 "ip route"'
+ echo 'save ${dirname}/UEFA_3/host.route6 158.4.200.10/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_3
+ [[ vpn_3 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 4 0 8 L2-host
++ local n_grp=4 n_router=0 n_layer2=8 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.11/16
+ subnet=158.4.200.11/16
+ savedir='${dirname}/vpn_3'
+ echo 'echo vpn_3'
+ echo 'mkdir -p ${dirname}/vpn_3'
+ echo 'save ${dirname}/vpn_3/host.ip     158.4.200.11/16 "ip addr"'
+ echo 'save ${dirname}/vpn_3/host.route  158.4.200.11/16 "ip route"'
+ echo 'save ${dirname}/vpn_3/host.route6 158.4.200.11/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_4
+ [[ FIFA_4 != *VPN* ]]
+ l2_name=DCS
++ subnet_sshContainer_groupContainer 4 2 9 L2-host
++ local n_grp=4 n_router=2 n_layer2=9 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.12/16
+ subnet=158.4.200.12/16
+ savedir='${dirname}/FIFA_4'
+ echo 'echo FIFA_4'
+ echo 'mkdir -p ${dirname}/FIFA_4'
+ echo 'save ${dirname}/FIFA_4/host.ip     158.4.200.12/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_4/host.route  158.4.200.12/16 "ip route"'
+ echo 'save ${dirname}/FIFA_4/host.route6 158.4.200.12/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_4
+ [[ UEFA_4 != *VPN* ]]
+ l2_name=DCS
++ subnet_sshContainer_groupContainer 4 2 10 L2-host
++ local n_grp=4 n_router=2 n_layer2=10 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.13/16
+ subnet=158.4.200.13/16
+ savedir='${dirname}/UEFA_4'
+ echo 'echo UEFA_4'
+ echo 'mkdir -p ${dirname}/UEFA_4'
+ echo 'save ${dirname}/UEFA_4/host.ip     158.4.200.13/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_4/host.route  158.4.200.13/16 "ip route"'
+ echo 'save ${dirname}/UEFA_4/host.route6 158.4.200.13/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ echo ''
+ echo 'tar -czf ${dirname}.tar.gz ${dirname}/*'
+ echo ''
+ echo 'echo '\''Saving complete!'\'''
+ echo 'echo '\'''\'''
+ echo 'echo "Download the archive file (run these commands from your own computer):"'
+ echo 'echo "    scp -O -P 2004 root@172.26.123.85:${dirname}.tar.gz ."'
+ echo 'echo '\''Extract the archive:'\'''
+ echo 'echo "    tar -xzf ${dirname}.tar.gz"'
+ echo 'echo "Alternatively, to directly update the "config" folder in the current local directory:"'
+ echo 'echo "    scp -O -r -P 2004 root@172.26.123.85:${dirname} config"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If the scp commands do not work for you, use ssh (also from your own computer):'\'''
+ echo 'echo '\''(Reliable only on UNIX systems. On Windows, you may use WinSCP instead)'\'''
+ echo 'echo "Download the archive:"'
+ echo 'echo "    ssh -q -p 2004 root@172.26.123.85 cat ${dirname}.tar.gz > ${dirname}.tar.gz"'
+ echo 'echo "Download and unpack the archive:"'
+ echo 'echo "    ssh -q -p 2004 root@172.26.123.85 cat ${dirname}.tar.gz | tar -xz"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If you are using an ssh config file, you may need to update the scp and ssh commands above to match your configuration.'\'''
+ echo 'echo '\''For example, you may need to replace "root@172.26.123.85" with the hostname you have defined in your ssh config file.'\'''
+ echo 'echo '\''Contact the TAs if you are unable to download your files!'\'''
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=5
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g5/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g5/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g5/restart_ospfd.sh
+ '[' AS == IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo ''
+ echo 'dirname=configs_${1:-$(date +%m-%d-%Y_%H-%M-%S)}'
+ echo 'mkdir -p $dirname'
+ echo ''
+ echo '# Arguments: filename, subnet, command'
+ echo 'save() { eval "ssh -q -o StrictHostKeyChecking=no root@${2%???} ${@:3} > $1" ; }'
+ echo ''
+ cp /home/service/tud/mini_internet_project/platform/setup/restore_configs.sh /home/service/tud/mini_internet_project/platform/groups/g5/restore_configs.sh
+ cp /home/service/tud/mini_internet_project/platform/setup/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g5/restart_ospfd.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g5/save_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g5/restore_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g5/restart_ospfd.sh
+ declare -A l2_id
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
++ subnet_sshContainer_groupContainer 5 0 -1 router
++ local n_grp=5 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.5.10.1/16
+ subnet_router=158.5.10.1/16
++ subnet_sshContainer_groupContainer 5 0 -1 L3-host
++ local n_grp=5 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.5.10.2/16
+ subnet_host=158.5.10.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ 0 == 0 ]]
+ echo 'echo ZURI router'
+ echo 'mkdir -p ${dirname}/ZURI'
+ echo 'save ${dirname}/ZURI/router.conf      158.5.10.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/ZURI/router.rib.json  158.5.10.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host0
+ echo 'echo ZURI host0'
+ echo 'save ${dirname}/ZURI/host0.ip         158.5.10.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host0.route      158.5.10.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host0.route6     158.5.10.2/16 ip -6 route'
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'save ${dirname}/ZURI/host0.rpki_cache 158.5.10.2/16 "tar -czC /root/.rpki-cache repository"'
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g5/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g5/restore_configs.sh
+ echo '  restore_router_config 158.5.10.1/16 ZURI vtysh'
+ echo '  main 158.5.10.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g5/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g5/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 5 1 -1 router
++ local n_grp=5 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.5.11.1/16
+ subnet_router=158.5.11.1/16
++ subnet_sshContainer_groupContainer 5 1 -1 L3-host
++ local n_grp=5 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.5.11.2/16
+ subnet_host=158.5.11.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ 1 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host1
+ echo 'echo ZURI host1'
+ echo 'save ${dirname}/ZURI/host1.ip         158.5.11.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host1.route      158.5.11.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host1.route6     158.5.11.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g5/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g5/restore_configs.sh
+ echo '  restore_router_config 158.5.11.1/16 ZURI vtysh'
+ echo '  main 158.5.11.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g5/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g5/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 5 2 -1 router
++ local n_grp=5 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.5.12.1/16
+ subnet_router=158.5.12.1/16
++ subnet_sshContainer_groupContainer 5 2 -1 L3-host
++ local n_grp=5 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.5.12.2/16
+ subnet_host=158.5.12.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 2 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host2
+ echo 'echo ZURI host2'
+ echo 'save ${dirname}/ZURI/host2.ip         158.5.12.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host2.route      158.5.12.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host2.route6     158.5.12.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g5/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g5/restore_configs.sh
+ echo '  restore_router_config 158.5.12.1/16 ZURI vtysh'
+ echo '  main 158.5.12.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g5/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g5/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 5 3 -1 router
++ local n_grp=5 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.5.13.1/16
+ subnet_router=158.5.13.1/16
++ subnet_sshContainer_groupContainer 5 3 -1 L3-host
++ local n_grp=5 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.5.13.2/16
+ subnet_host=158.5.13.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 3 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host3
+ echo 'echo ZURI host3'
+ echo 'save ${dirname}/ZURI/host3.ip         158.5.13.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host3.route      158.5.13.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host3.route6     158.5.13.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g5/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g5/restore_configs.sh
+ echo '  restore_router_config 158.5.13.1/16 ZURI vtysh'
+ echo '  main 158.5.13.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g5/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g5/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo ''
+ echo 'tar -czf ${dirname}.tar.gz ${dirname}/*'
+ echo ''
+ echo 'echo '\''Saving complete!'\'''
+ echo 'echo '\'''\'''
+ echo 'echo "Download the archive file (run these commands from your own computer):"'
+ echo 'echo "    scp -O -P 2005 root@172.26.123.85:${dirname}.tar.gz ."'
+ echo 'echo '\''Extract the archive:'\'''
+ echo 'echo "    tar -xzf ${dirname}.tar.gz"'
+ echo 'echo "Alternatively, to directly update the "config" folder in the current local directory:"'
+ echo 'echo "    scp -O -r -P 2005 root@172.26.123.85:${dirname} config"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If the scp commands do not work for you, use ssh (also from your own computer):'\'''
+ echo 'echo '\''(Reliable only on UNIX systems. On Windows, you may use WinSCP instead)'\'''
+ echo 'echo "Download the archive:"'
+ echo 'echo "    ssh -q -p 2005 root@172.26.123.85 cat ${dirname}.tar.gz > ${dirname}.tar.gz"'
+ echo 'echo "Download and unpack the archive:"'
+ echo 'echo "    ssh -q -p 2005 root@172.26.123.85 cat ${dirname}.tar.gz | tar -xz"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If you are using an ssh config file, you may need to update the scp and ssh commands above to match your configuration.'\'''
+ echo 'echo '\''For example, you may need to replace "root@172.26.123.85" with the hostname you have defined in your ssh config file.'\'''
+ echo 'echo '\''Contact the TAs if you are unable to download your files!'\'''
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=6
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g6/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g6/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g6/restart_ospfd.sh
+ '[' AS == IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo ''
+ echo 'dirname=configs_${1:-$(date +%m-%d-%Y_%H-%M-%S)}'
+ echo 'mkdir -p $dirname'
+ echo ''
+ echo '# Arguments: filename, subnet, command'
+ echo 'save() { eval "ssh -q -o StrictHostKeyChecking=no root@${2%???} ${@:3} > $1" ; }'
+ echo ''
+ cp /home/service/tud/mini_internet_project/platform/setup/restore_configs.sh /home/service/tud/mini_internet_project/platform/groups/g6/restore_configs.sh
+ cp /home/service/tud/mini_internet_project/platform/setup/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g6/restart_ospfd.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g6/save_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g6/restore_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g6/restart_ospfd.sh
+ declare -A l2_id
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
++ subnet_sshContainer_groupContainer 6 0 -1 router
++ local n_grp=6 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.6.10.1/16
+ subnet_router=158.6.10.1/16
++ subnet_sshContainer_groupContainer 6 0 -1 L3-host
++ local n_grp=6 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.6.10.2/16
+ subnet_host=158.6.10.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ 0 == 0 ]]
+ echo 'echo ZURI router'
+ echo 'mkdir -p ${dirname}/ZURI'
+ echo 'save ${dirname}/ZURI/router.conf      158.6.10.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/ZURI/router.rib.json  158.6.10.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host0
+ echo 'echo ZURI host0'
+ echo 'save ${dirname}/ZURI/host0.ip         158.6.10.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host0.route      158.6.10.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host0.route6     158.6.10.2/16 ip -6 route'
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'save ${dirname}/ZURI/host0.rpki_cache 158.6.10.2/16 "tar -czC /root/.rpki-cache repository"'
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g6/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g6/restore_configs.sh
+ echo '  restore_router_config 158.6.10.1/16 ZURI vtysh'
+ echo '  main 158.6.10.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g6/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g6/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 6 1 -1 router
++ local n_grp=6 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.6.11.1/16
+ subnet_router=158.6.11.1/16
++ subnet_sshContainer_groupContainer 6 1 -1 L3-host
++ local n_grp=6 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.6.11.2/16
+ subnet_host=158.6.11.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ 1 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host1
+ echo 'echo ZURI host1'
+ echo 'save ${dirname}/ZURI/host1.ip         158.6.11.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host1.route      158.6.11.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host1.route6     158.6.11.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g6/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g6/restore_configs.sh
+ echo '  restore_router_config 158.6.11.1/16 ZURI vtysh'
+ echo '  main 158.6.11.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g6/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g6/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 6 2 -1 router
++ local n_grp=6 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.6.12.1/16
+ subnet_router=158.6.12.1/16
++ subnet_sshContainer_groupContainer 6 2 -1 L3-host
++ local n_grp=6 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.6.12.2/16
+ subnet_host=158.6.12.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 2 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host2
+ echo 'echo ZURI host2'
+ echo 'save ${dirname}/ZURI/host2.ip         158.6.12.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host2.route      158.6.12.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host2.route6     158.6.12.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g6/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g6/restore_configs.sh
+ echo '  restore_router_config 158.6.12.1/16 ZURI vtysh'
+ echo '  main 158.6.12.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g6/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g6/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 6 3 -1 router
++ local n_grp=6 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.6.13.1/16
+ subnet_router=158.6.13.1/16
++ subnet_sshContainer_groupContainer 6 3 -1 L3-host
++ local n_grp=6 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.6.13.2/16
+ subnet_host=158.6.13.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 3 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host3
+ echo 'echo ZURI host3'
+ echo 'save ${dirname}/ZURI/host3.ip         158.6.13.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host3.route      158.6.13.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host3.route6     158.6.13.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g6/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g6/restore_configs.sh
+ echo '  restore_router_config 158.6.13.1/16 ZURI vtysh'
+ echo '  main 158.6.13.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g6/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g6/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo ''
+ echo 'tar -czf ${dirname}.tar.gz ${dirname}/*'
+ echo ''
+ echo 'echo '\''Saving complete!'\'''
+ echo 'echo '\'''\'''
+ echo 'echo "Download the archive file (run these commands from your own computer):"'
+ echo 'echo "    scp -O -P 2006 root@172.26.123.85:${dirname}.tar.gz ."'
+ echo 'echo '\''Extract the archive:'\'''
+ echo 'echo "    tar -xzf ${dirname}.tar.gz"'
+ echo 'echo "Alternatively, to directly update the "config" folder in the current local directory:"'
+ echo 'echo "    scp -O -r -P 2006 root@172.26.123.85:${dirname} config"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If the scp commands do not work for you, use ssh (also from your own computer):'\'''
+ echo 'echo '\''(Reliable only on UNIX systems. On Windows, you may use WinSCP instead)'\'''
+ echo 'echo "Download the archive:"'
+ echo 'echo "    ssh -q -p 2006 root@172.26.123.85 cat ${dirname}.tar.gz > ${dirname}.tar.gz"'
+ echo 'echo "Download and unpack the archive:"'
+ echo 'echo "    ssh -q -p 2006 root@172.26.123.85 cat ${dirname}.tar.gz | tar -xz"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If you are using an ssh config file, you may need to update the scp and ssh commands above to match your configuration.'\'''
+ echo 'echo '\''For example, you may need to replace "root@172.26.123.85" with the hostname you have defined in your ssh config file.'\'''
+ echo 'echo '\''Contact the TAs if you are unable to download your files!'\'''
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=11
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g11/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g11/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g11/restart_ospfd.sh
+ '[' AS == IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo ''
+ echo 'dirname=configs_${1:-$(date +%m-%d-%Y_%H-%M-%S)}'
+ echo 'mkdir -p $dirname'
+ echo ''
+ echo '# Arguments: filename, subnet, command'
+ echo 'save() { eval "ssh -q -o StrictHostKeyChecking=no root@${2%???} ${@:3} > $1" ; }'
+ echo ''
+ cp /home/service/tud/mini_internet_project/platform/setup/restore_configs.sh /home/service/tud/mini_internet_project/platform/groups/g11/restore_configs.sh
+ cp /home/service/tud/mini_internet_project/platform/setup/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g11/restart_ospfd.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g11/save_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g11/restore_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g11/restart_ospfd.sh
+ declare -A l2_id
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
++ subnet_sshContainer_groupContainer 11 0 -1 router
++ local n_grp=11 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.11.10.1/16
+ subnet_router=158.11.10.1/16
++ subnet_sshContainer_groupContainer 11 0 -1 L3-host
++ local n_grp=11 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.11.10.2/16
+ subnet_host=158.11.10.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ 0 == 0 ]]
+ echo 'echo ZURI router'
+ echo 'mkdir -p ${dirname}/ZURI'
+ echo 'save ${dirname}/ZURI/router.conf      158.11.10.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/ZURI/router.rib.json  158.11.10.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host0
+ echo 'echo ZURI host0'
+ echo 'save ${dirname}/ZURI/host0.ip         158.11.10.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host0.route      158.11.10.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host0.route6     158.11.10.2/16 ip -6 route'
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'save ${dirname}/ZURI/host0.rpki_cache 158.11.10.2/16 "tar -czC /root/.rpki-cache repository"'
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g11/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g11/restore_configs.sh
+ echo '  restore_router_config 158.11.10.1/16 ZURI vtysh'
+ echo '  main 158.11.10.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g11/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g11/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 11 1 -1 router
++ local n_grp=11 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.11.11.1/16
+ subnet_router=158.11.11.1/16
++ subnet_sshContainer_groupContainer 11 1 -1 L3-host
++ local n_grp=11 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.11.11.2/16
+ subnet_host=158.11.11.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ 1 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host1
+ echo 'echo ZURI host1'
+ echo 'save ${dirname}/ZURI/host1.ip         158.11.11.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host1.route      158.11.11.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host1.route6     158.11.11.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g11/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g11/restore_configs.sh
+ echo '  restore_router_config 158.11.11.1/16 ZURI vtysh'
+ echo '  main 158.11.11.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g11/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g11/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 11 2 -1 router
++ local n_grp=11 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.11.12.1/16
+ subnet_router=158.11.12.1/16
++ subnet_sshContainer_groupContainer 11 2 -1 L3-host
++ local n_grp=11 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.11.12.2/16
+ subnet_host=158.11.12.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 2 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host2
+ echo 'echo ZURI host2'
+ echo 'save ${dirname}/ZURI/host2.ip         158.11.12.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host2.route      158.11.12.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host2.route6     158.11.12.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g11/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g11/restore_configs.sh
+ echo '  restore_router_config 158.11.12.1/16 ZURI vtysh'
+ echo '  main 158.11.12.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g11/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g11/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 11 3 -1 router
++ local n_grp=11 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.11.13.1/16
+ subnet_router=158.11.13.1/16
++ subnet_sshContainer_groupContainer 11 3 -1 L3-host
++ local n_grp=11 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.11.13.2/16
+ subnet_host=158.11.13.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 3 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host3
+ echo 'echo ZURI host3'
+ echo 'save ${dirname}/ZURI/host3.ip         158.11.13.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host3.route      158.11.13.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host3.route6     158.11.13.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g11/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g11/restore_configs.sh
+ echo '  restore_router_config 158.11.13.1/16 ZURI vtysh'
+ echo '  main 158.11.13.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g11/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g11/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo ''
+ echo 'tar -czf ${dirname}.tar.gz ${dirname}/*'
+ echo ''
+ echo 'echo '\''Saving complete!'\'''
+ echo 'echo '\'''\'''
+ echo 'echo "Download the archive file (run these commands from your own computer):"'
+ echo 'echo "    scp -O -P 2011 root@172.26.123.85:${dirname}.tar.gz ."'
+ echo 'echo '\''Extract the archive:'\'''
+ echo 'echo "    tar -xzf ${dirname}.tar.gz"'
+ echo 'echo "Alternatively, to directly update the "config" folder in the current local directory:"'
+ echo 'echo "    scp -O -r -P 2011 root@172.26.123.85:${dirname} config"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If the scp commands do not work for you, use ssh (also from your own computer):'\'''
+ echo 'echo '\''(Reliable only on UNIX systems. On Windows, you may use WinSCP instead)'\'''
+ echo 'echo "Download the archive:"'
+ echo 'echo "    ssh -q -p 2011 root@172.26.123.85 cat ${dirname}.tar.gz > ${dirname}.tar.gz"'
+ echo 'echo "Download and unpack the archive:"'
+ echo 'echo "    ssh -q -p 2011 root@172.26.123.85 cat ${dirname}.tar.gz | tar -xz"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If you are using an ssh config file, you may need to update the scp and ssh commands above to match your configuration.'\'''
+ echo 'echo '\''For example, you may need to replace "root@172.26.123.85" with the hostname you have defined in your ssh config file.'\'''
+ echo 'echo '\''Contact the TAs if you are unable to download your files!'\'''
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=12
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g12/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g12/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g12/restart_ospfd.sh
+ '[' AS == IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo ''
+ echo 'dirname=configs_${1:-$(date +%m-%d-%Y_%H-%M-%S)}'
+ echo 'mkdir -p $dirname'
+ echo ''
+ echo '# Arguments: filename, subnet, command'
+ echo 'save() { eval "ssh -q -o StrictHostKeyChecking=no root@${2%???} ${@:3} > $1" ; }'
+ echo ''
+ cp /home/service/tud/mini_internet_project/platform/setup/restore_configs.sh /home/service/tud/mini_internet_project/platform/groups/g12/restore_configs.sh
+ cp /home/service/tud/mini_internet_project/platform/setup/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g12/restart_ospfd.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g12/save_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g12/restore_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g12/restart_ospfd.sh
+ declare -A l2_id
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
++ subnet_sshContainer_groupContainer 12 0 -1 router
++ local n_grp=12 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.12.10.1/16
+ subnet_router=158.12.10.1/16
++ subnet_sshContainer_groupContainer 12 0 -1 L3-host
++ local n_grp=12 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.12.10.2/16
+ subnet_host=158.12.10.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ 0 == 0 ]]
+ echo 'echo ZURI router'
+ echo 'mkdir -p ${dirname}/ZURI'
+ echo 'save ${dirname}/ZURI/router.conf      158.12.10.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/ZURI/router.rib.json  158.12.10.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host0
+ echo 'echo ZURI host0'
+ echo 'save ${dirname}/ZURI/host0.ip         158.12.10.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host0.route      158.12.10.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host0.route6     158.12.10.2/16 ip -6 route'
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'save ${dirname}/ZURI/host0.rpki_cache 158.12.10.2/16 "tar -czC /root/.rpki-cache repository"'
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g12/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g12/restore_configs.sh
+ echo '  restore_router_config 158.12.10.1/16 ZURI vtysh'
+ echo '  main 158.12.10.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g12/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g12/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 12 1 -1 router
++ local n_grp=12 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.12.11.1/16
+ subnet_router=158.12.11.1/16
++ subnet_sshContainer_groupContainer 12 1 -1 L3-host
++ local n_grp=12 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.12.11.2/16
+ subnet_host=158.12.11.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ 1 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host1
+ echo 'echo ZURI host1'
+ echo 'save ${dirname}/ZURI/host1.ip         158.12.11.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host1.route      158.12.11.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host1.route6     158.12.11.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g12/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g12/restore_configs.sh
+ echo '  restore_router_config 158.12.11.1/16 ZURI vtysh'
+ echo '  main 158.12.11.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g12/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g12/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 12 2 -1 router
++ local n_grp=12 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.12.12.1/16
+ subnet_router=158.12.12.1/16
++ subnet_sshContainer_groupContainer 12 2 -1 L3-host
++ local n_grp=12 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.12.12.2/16
+ subnet_host=158.12.12.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 2 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host2
+ echo 'echo ZURI host2'
+ echo 'save ${dirname}/ZURI/host2.ip         158.12.12.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host2.route      158.12.12.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host2.route6     158.12.12.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g12/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g12/restore_configs.sh
+ echo '  restore_router_config 158.12.12.1/16 ZURI vtysh'
+ echo '  main 158.12.12.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g12/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g12/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 12 3 -1 router
++ local n_grp=12 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.12.13.1/16
+ subnet_router=158.12.13.1/16
++ subnet_sshContainer_groupContainer 12 3 -1 L3-host
++ local n_grp=12 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.12.13.2/16
+ subnet_host=158.12.13.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 3 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host3
+ echo 'echo ZURI host3'
+ echo 'save ${dirname}/ZURI/host3.ip         158.12.13.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host3.route      158.12.13.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host3.route6     158.12.13.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g12/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g12/restore_configs.sh
+ echo '  restore_router_config 158.12.13.1/16 ZURI vtysh'
+ echo '  main 158.12.13.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g12/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g12/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo ''
+ echo 'tar -czf ${dirname}.tar.gz ${dirname}/*'
+ echo ''
+ echo 'echo '\''Saving complete!'\'''
+ echo 'echo '\'''\'''
+ echo 'echo "Download the archive file (run these commands from your own computer):"'
+ echo 'echo "    scp -O -P 2012 root@172.26.123.85:${dirname}.tar.gz ."'
+ echo 'echo '\''Extract the archive:'\'''
+ echo 'echo "    tar -xzf ${dirname}.tar.gz"'
+ echo 'echo "Alternatively, to directly update the "config" folder in the current local directory:"'
+ echo 'echo "    scp -O -r -P 2012 root@172.26.123.85:${dirname} config"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If the scp commands do not work for you, use ssh (also from your own computer):'\'''
+ echo 'echo '\''(Reliable only on UNIX systems. On Windows, you may use WinSCP instead)'\'''
+ echo 'echo "Download the archive:"'
+ echo 'echo "    ssh -q -p 2012 root@172.26.123.85 cat ${dirname}.tar.gz > ${dirname}.tar.gz"'
+ echo 'echo "Download and unpack the archive:"'
+ echo 'echo "    ssh -q -p 2012 root@172.26.123.85 cat ${dirname}.tar.gz | tar -xz"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If you are using an ssh config file, you may need to update the scp and ssh commands above to match your configuration.'\'''
+ echo 'echo '\''For example, you may need to replace "root@172.26.123.85" with the hostname you have defined in your ssh config file.'\'''
+ echo 'echo '\''Contact the TAs if you are unable to download your files!'\'''
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=13
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ group_layer2_switches=l2_switches.txt
+ group_layer2_hosts=l2_hosts.txt
+ group_layer2_links=l2_links.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g13/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh
+ '[' AS == IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=8
+ n_l2_switches=4
+ n_l2_hosts=11
+ n_l2_links=3
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo ''
+ echo 'dirname=configs_${1:-$(date +%m-%d-%Y_%H-%M-%S)}'
+ echo 'mkdir -p $dirname'
+ echo ''
+ echo '# Arguments: filename, subnet, command'
+ echo 'save() { eval "ssh -q -o StrictHostKeyChecking=no root@${2%???} ${@:3} > $1" ; }'
+ echo ''
+ cp /home/service/tud/mini_internet_project/platform/setup/restore_configs.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ cp /home/service/tud/mini_internet_project/platform/setup/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g13/save_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh
+ declare -A l2_id
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 13 0 -1 router
++ local n_grp=13 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.10.1/16
+ subnet_router=158.13.10.1/16
++ subnet_sshContainer_groupContainer 13 0 -1 L3-host
++ local n_grp=13 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.10.2/16
+ subnet_host=158.13.10.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ 0 == 0 ]]
+ echo 'echo ZURI router'
+ echo 'mkdir -p ${dirname}/ZURI'
+ echo 'save ${dirname}/ZURI/router.conf      158.13.10.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/ZURI/router.rib.json  158.13.10.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' linux == linux ']'
+ echo 'save ${dirname}/ZURI/router.rib6.json 158.13.10.1/16 \"vtysh -c \'\''sh ipv6 route json\'\''\" \| grep -v uptime'
+ echo 'save ${dirname}/ZURI/router.tunnels   158.13.10.1/16 ip tunnel show'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo ZURI host'
+ echo 'save ${dirname}/ZURI/host.ip         158.13.10.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host.route      158.13.10.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host.route6     158.13.10.2/16 ip -6 route'
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ echo '  restore_router_config 158.13.10.1/16 ZURI linux'
+ echo '  main 158.13.10.1/16 ZURI linux'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=vtysh
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 13 1 -1 router
++ local n_grp=13 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.11.1/16
+ subnet_router=158.13.11.1/16
++ subnet_sshContainer_groupContainer 13 1 -1 L3-host
++ local n_grp=13 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.11.2/16
+ subnet_host=158.13.11.2/16
+ savedir='${dirname}/BASE'
+ [[ 0 == 1000000 ]]
+ [[ 1 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo BASE router'
+ echo 'mkdir -p ${dirname}/BASE'
+ echo 'save ${dirname}/BASE/router.conf      158.13.11.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/BASE/router.rib.json  158.13.11.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo BASE host'
+ echo 'save ${dirname}/BASE/host.ip         158.13.11.2/16 ip addr'
+ echo 'save ${dirname}/BASE/host.route      158.13.11.2/16 ip route'
+ echo 'save ${dirname}/BASE/host.route6     158.13.11.2/16 ip -6 route'
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "BASE" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ echo '  restore_router_config 158.13.11.1/16 BASE vtysh'
+ echo '  main 158.13.11.1/16 BASE vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
++ subnet_sshContainer_groupContainer 13 2 -1 router
++ local n_grp=13 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.12.1/16
+ subnet_router=158.13.12.1/16
++ subnet_sshContainer_groupContainer 13 2 -1 L3-host
++ local n_grp=13 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.12.2/16
+ subnet_host=158.13.12.2/16
+ savedir='${dirname}/GENE'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=2
+ [[ 2 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo GENE router'
+ echo 'mkdir -p ${dirname}/GENE'
+ echo 'save ${dirname}/GENE/router.conf      158.13.12.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/GENE/router.rib.json  158.13.12.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' linux == linux ']'
+ echo 'save ${dirname}/GENE/router.rib6.json 158.13.12.1/16 \"vtysh -c \'\''sh ipv6 route json\'\''\" \| grep -v uptime'
+ echo 'save ${dirname}/GENE/router.tunnels   158.13.12.1/16 ip tunnel show'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo GENE host'
+ echo 'save ${dirname}/GENE/host.ip         158.13.12.2/16 ip addr'
+ echo 'save ${dirname}/GENE/host.route      158.13.12.2/16 ip route'
+ echo 'save ${dirname}/GENE/host.route6     158.13.12.2/16 ip -6 route'
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCS
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCS == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "GENE" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ echo '  restore_router_config 158.13.12.1/16 GENE linux'
+ echo '  main 158.13.12.1/16 GENE linux'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
++ subnet_sshContainer_groupContainer 13 3 -1 router
++ local n_grp=13 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.13.1/16
+ subnet_router=158.13.13.1/16
++ subnet_sshContainer_groupContainer 13 3 -1 L3-host
++ local n_grp=13 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.13.2/16
+ subnet_host=158.13.13.2/16
+ savedir='${dirname}/LUGA'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=3
+ [[ 3 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo LUGA router'
+ echo 'mkdir -p ${dirname}/LUGA'
+ echo 'save ${dirname}/LUGA/router.conf      158.13.13.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/LUGA/router.rib.json  158.13.13.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo LUGA host'
+ echo 'save ${dirname}/LUGA/host.ip         158.13.13.2/16 ip addr'
+ echo 'save ${dirname}/LUGA/host.route      158.13.13.2/16 ip route'
+ echo 'save ${dirname}/LUGA/host.route6     158.13.13.2/16 ip -6 route'
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'save ${dirname}/LUGA/host.rpki_cache 158.13.13.2/16 "tar -czC /root/.rpki-cache repository"'
+ echo 'if [[ "$device_name" == "LUGA" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ echo '  restore_router_config 158.13.13.1/16 LUGA vtysh'
+ echo '  main 158.13.13.1/16 LUGA vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 13 4 -1 router
++ local n_grp=13 n_router=4 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.14.1/16
+ subnet_router=158.13.14.1/16
++ subnet_sshContainer_groupContainer 13 4 -1 L3-host
++ local n_grp=13 n_router=4 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.14.2/16
+ subnet_host=158.13.14.2/16
+ savedir='${dirname}/MUNI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=4
+ [[ 4 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo MUNI router'
+ echo 'mkdir -p ${dirname}/MUNI'
+ echo 'save ${dirname}/MUNI/router.conf      158.13.14.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/MUNI/router.rib.json  158.13.14.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo MUNI host'
+ echo 'save ${dirname}/MUNI/host.ip         158.13.14.2/16 ip addr'
+ echo 'save ${dirname}/MUNI/host.route      158.13.14.2/16 ip route'
+ echo 'save ${dirname}/MUNI/host.route6     158.13.14.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "MUNI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ echo '  restore_router_config 158.13.14.1/16 MUNI vtysh'
+ echo '  main 158.13.14.1/16 MUNI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 13 5 -1 router
++ local n_grp=13 n_router=5 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.15.1/16
+ subnet_router=158.13.15.1/16
++ subnet_sshContainer_groupContainer 13 5 -1 L3-host
++ local n_grp=13 n_router=5 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.15.2/16
+ subnet_host=158.13.15.2/16
+ savedir='${dirname}/LYON'
+ [[ 4 == 1000000 ]]
+ [[ 5 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo LYON router'
+ echo 'mkdir -p ${dirname}/LYON'
+ echo 'save ${dirname}/LYON/router.conf      158.13.15.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/LYON/router.rib.json  158.13.15.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo LYON host'
+ echo 'save ${dirname}/LYON/host.ip         158.13.15.2/16 ip addr'
+ echo 'save ${dirname}/LYON/host.route      158.13.15.2/16 ip route'
+ echo 'save ${dirname}/LYON/host.route6     158.13.15.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "LYON" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ echo '  restore_router_config 158.13.15.1/16 LYON vtysh'
+ echo '  main 158.13.15.1/16 LYON vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 13 6 -1 router
++ local n_grp=13 n_router=6 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.16.1/16
+ subnet_router=158.13.16.1/16
++ subnet_sshContainer_groupContainer 13 6 -1 L3-host
++ local n_grp=13 n_router=6 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.16.2/16
+ subnet_host=158.13.16.2/16
+ savedir='${dirname}/VIEN'
+ [[ 4 == 1000000 ]]
+ [[ 6 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo VIEN router'
+ echo 'mkdir -p ${dirname}/VIEN'
+ echo 'save ${dirname}/VIEN/router.conf      158.13.16.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/VIEN/router.rib.json  158.13.16.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo VIEN host'
+ echo 'save ${dirname}/VIEN/host.ip         158.13.16.2/16 ip addr'
+ echo 'save ${dirname}/VIEN/host.route      158.13.16.2/16 ip route'
+ echo 'save ${dirname}/VIEN/host.route6     158.13.16.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "VIEN" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ echo '  restore_router_config 158.13.16.1/16 VIEN vtysh'
+ echo '  main 158.13.16.1/16 VIEN vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 13 7 -1 router
++ local n_grp=13 n_router=7 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.17.1/16
+ subnet_router=158.13.17.1/16
++ subnet_sshContainer_groupContainer 13 7 -1 L3-host
++ local n_grp=13 n_router=7 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.17.2/16
+ subnet_host=158.13.17.2/16
+ savedir='${dirname}/MILA'
+ [[ 4 == 1000000 ]]
+ [[ 7 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo MILA router'
+ echo 'mkdir -p ${dirname}/MILA'
+ echo 'save ${dirname}/MILA/router.conf      158.13.17.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/MILA/router.rib.json  158.13.17.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo MILA host'
+ echo 'save ${dirname}/MILA/host.ip         158.13.17.2/16 ip addr'
+ echo 'save ${dirname}/MILA/host.route      158.13.17.2/16 ip route'
+ echo 'save ${dirname}/MILA/host.route6     158.13.17.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "MILA" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ echo '  restore_router_config 158.13.17.1/16 MILA vtysh'
+ echo '  main 158.13.17.1/16 MILA vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ s_name=S1
++ subnet_sshContainer_groupContainer 13 0 0 switch
++ local n_grp=13 n_router=0 n_layer2=0 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.13.100.3/16
+ subnet=158.13.100.3/16
+ savedir='${dirname}/S1'
+ echo 'echo S1'
+ echo 'mkdir -p ${dirname}/S1'
+ echo 'save ${dirname}/S1/switch.db      158.13.100.3/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S1/switch.summary 158.13.100.3/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ s_name=S2
++ subnet_sshContainer_groupContainer 13 0 1 switch
++ local n_grp=13 n_router=0 n_layer2=1 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.13.100.4/16
+ subnet=158.13.100.4/16
+ savedir='${dirname}/S2'
+ echo 'echo S2'
+ echo 'mkdir -p ${dirname}/S2'
+ echo 'save ${dirname}/S2/switch.db      158.13.100.4/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S2/switch.summary 158.13.100.4/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ s_name=S3
++ subnet_sshContainer_groupContainer 13 0 2 switch
++ local n_grp=13 n_router=0 n_layer2=2 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.13.100.5/16
+ subnet=158.13.100.5/16
+ savedir='${dirname}/S3'
+ echo 'echo S3'
+ echo 'mkdir -p ${dirname}/S3'
+ echo 'save ${dirname}/S3/switch.db      158.13.100.5/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S3/switch.summary 158.13.100.5/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCS
+ s_name=S4
++ subnet_sshContainer_groupContainer 13 2 3 switch
++ local n_grp=13 n_router=2 n_layer2=3 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.13.100.6/16
+ subnet=158.13.100.6/16
+ savedir='${dirname}/S4'
+ echo 'echo S4'
+ echo 'mkdir -p ${dirname}/S4'
+ echo 'save ${dirname}/S4/switch.db      158.13.100.6/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S4/switch.summary 158.13.100.6/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_1
+ [[ FIFA_1 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 13 0 0 L2-host
++ local n_grp=13 n_router=0 n_layer2=0 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.3/16
+ subnet=158.13.200.3/16
+ savedir='${dirname}/FIFA_1'
+ echo 'echo FIFA_1'
+ echo 'mkdir -p ${dirname}/FIFA_1'
+ echo 'save ${dirname}/FIFA_1/host.ip     158.13.200.3/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_1/host.route  158.13.200.3/16 "ip route"'
+ echo 'save ${dirname}/FIFA_1/host.route6 158.13.200.3/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_1
+ [[ UEFA_1 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 13 0 1 L2-host
++ local n_grp=13 n_router=0 n_layer2=1 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.4/16
+ subnet=158.13.200.4/16
+ savedir='${dirname}/UEFA_1'
+ echo 'echo UEFA_1'
+ echo 'mkdir -p ${dirname}/UEFA_1'
+ echo 'save ${dirname}/UEFA_1/host.ip     158.13.200.4/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_1/host.route  158.13.200.4/16 "ip route"'
+ echo 'save ${dirname}/UEFA_1/host.route6 158.13.200.4/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_1
+ [[ vpn_1 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 13 0 2 L2-host
++ local n_grp=13 n_router=0 n_layer2=2 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.5/16
+ subnet=158.13.200.5/16
+ savedir='${dirname}/vpn_1'
+ echo 'echo vpn_1'
+ echo 'mkdir -p ${dirname}/vpn_1'
+ echo 'save ${dirname}/vpn_1/host.ip     158.13.200.5/16 "ip addr"'
+ echo 'save ${dirname}/vpn_1/host.route  158.13.200.5/16 "ip route"'
+ echo 'save ${dirname}/vpn_1/host.route6 158.13.200.5/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_2
+ [[ FIFA_2 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 13 0 3 L2-host
++ local n_grp=13 n_router=0 n_layer2=3 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.6/16
+ subnet=158.13.200.6/16
+ savedir='${dirname}/FIFA_2'
+ echo 'echo FIFA_2'
+ echo 'mkdir -p ${dirname}/FIFA_2'
+ echo 'save ${dirname}/FIFA_2/host.ip     158.13.200.6/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_2/host.route  158.13.200.6/16 "ip route"'
+ echo 'save ${dirname}/FIFA_2/host.route6 158.13.200.6/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_2
+ [[ UEFA_2 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 13 0 4 L2-host
++ local n_grp=13 n_router=0 n_layer2=4 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.7/16
+ subnet=158.13.200.7/16
+ savedir='${dirname}/UEFA_2'
+ echo 'echo UEFA_2'
+ echo 'mkdir -p ${dirname}/UEFA_2'
+ echo 'save ${dirname}/UEFA_2/host.ip     158.13.200.7/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_2/host.route  158.13.200.7/16 "ip route"'
+ echo 'save ${dirname}/UEFA_2/host.route6 158.13.200.7/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_2
+ [[ vpn_2 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 13 0 5 L2-host
++ local n_grp=13 n_router=0 n_layer2=5 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.8/16
+ subnet=158.13.200.8/16
+ savedir='${dirname}/vpn_2'
+ echo 'echo vpn_2'
+ echo 'mkdir -p ${dirname}/vpn_2'
+ echo 'save ${dirname}/vpn_2/host.ip     158.13.200.8/16 "ip addr"'
+ echo 'save ${dirname}/vpn_2/host.route  158.13.200.8/16 "ip route"'
+ echo 'save ${dirname}/vpn_2/host.route6 158.13.200.8/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_3
+ [[ FIFA_3 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 13 0 6 L2-host
++ local n_grp=13 n_router=0 n_layer2=6 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.9/16
+ subnet=158.13.200.9/16
+ savedir='${dirname}/FIFA_3'
+ echo 'echo FIFA_3'
+ echo 'mkdir -p ${dirname}/FIFA_3'
+ echo 'save ${dirname}/FIFA_3/host.ip     158.13.200.9/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_3/host.route  158.13.200.9/16 "ip route"'
+ echo 'save ${dirname}/FIFA_3/host.route6 158.13.200.9/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_3
+ [[ UEFA_3 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 13 0 7 L2-host
++ local n_grp=13 n_router=0 n_layer2=7 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.10/16
+ subnet=158.13.200.10/16
+ savedir='${dirname}/UEFA_3'
+ echo 'echo UEFA_3'
+ echo 'mkdir -p ${dirname}/UEFA_3'
+ echo 'save ${dirname}/UEFA_3/host.ip     158.13.200.10/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_3/host.route  158.13.200.10/16 "ip route"'
+ echo 'save ${dirname}/UEFA_3/host.route6 158.13.200.10/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_3
+ [[ vpn_3 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 13 0 8 L2-host
++ local n_grp=13 n_router=0 n_layer2=8 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.11/16
+ subnet=158.13.200.11/16
+ savedir='${dirname}/vpn_3'
+ echo 'echo vpn_3'
+ echo 'mkdir -p ${dirname}/vpn_3'
+ echo 'save ${dirname}/vpn_3/host.ip     158.13.200.11/16 "ip addr"'
+ echo 'save ${dirname}/vpn_3/host.route  158.13.200.11/16 "ip route"'
+ echo 'save ${dirname}/vpn_3/host.route6 158.13.200.11/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_4
+ [[ FIFA_4 != *VPN* ]]
+ l2_name=DCS
++ subnet_sshContainer_groupContainer 13 2 9 L2-host
++ local n_grp=13 n_router=2 n_layer2=9 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.12/16
+ subnet=158.13.200.12/16
+ savedir='${dirname}/FIFA_4'
+ echo 'echo FIFA_4'
+ echo 'mkdir -p ${dirname}/FIFA_4'
+ echo 'save ${dirname}/FIFA_4/host.ip     158.13.200.12/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_4/host.route  158.13.200.12/16 "ip route"'
+ echo 'save ${dirname}/FIFA_4/host.route6 158.13.200.12/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_4
+ [[ UEFA_4 != *VPN* ]]
+ l2_name=DCS
++ subnet_sshContainer_groupContainer 13 2 10 L2-host
++ local n_grp=13 n_router=2 n_layer2=10 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.13/16
+ subnet=158.13.200.13/16
+ savedir='${dirname}/UEFA_4'
+ echo 'echo UEFA_4'
+ echo 'mkdir -p ${dirname}/UEFA_4'
+ echo 'save ${dirname}/UEFA_4/host.ip     158.13.200.13/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_4/host.route  158.13.200.13/16 "ip route"'
+ echo 'save ${dirname}/UEFA_4/host.route6 158.13.200.13/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ echo ''
+ echo 'tar -czf ${dirname}.tar.gz ${dirname}/*'
+ echo ''
+ echo 'echo '\''Saving complete!'\'''
+ echo 'echo '\'''\'''
+ echo 'echo "Download the archive file (run these commands from your own computer):"'
+ echo 'echo "    scp -O -P 2013 root@172.26.123.85:${dirname}.tar.gz ."'
+ echo 'echo '\''Extract the archive:'\'''
+ echo 'echo "    tar -xzf ${dirname}.tar.gz"'
+ echo 'echo "Alternatively, to directly update the "config" folder in the current local directory:"'
+ echo 'echo "    scp -O -r -P 2013 root@172.26.123.85:${dirname} config"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If the scp commands do not work for you, use ssh (also from your own computer):'\'''
+ echo 'echo '\''(Reliable only on UNIX systems. On Windows, you may use WinSCP instead)'\'''
+ echo 'echo "Download the archive:"'
+ echo 'echo "    ssh -q -p 2013 root@172.26.123.85 cat ${dirname}.tar.gz > ${dirname}.tar.gz"'
+ echo 'echo "Download and unpack the archive:"'
+ echo 'echo "    ssh -q -p 2013 root@172.26.123.85 cat ${dirname}.tar.gz | tar -xz"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If you are using an ssh config file, you may need to update the scp and ssh commands above to match your configuration.'\'''
+ echo 'echo '\''For example, you may need to replace "root@172.26.123.85" with the hostname you have defined in your ssh config file.'\'''
+ echo 'echo '\''Contact the TAs if you are unable to download your files!'\'''
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=14
+ group_as=AS
+ group_config=NoConfig
+ group_router_config=l3_routers.txt
+ group_internal_links=l3_links.txt
+ group_layer2_switches=l2_switches.txt
+ group_layer2_hosts=l2_hosts.txt
+ group_layer2_links=l2_links.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g14/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh
+ '[' AS == IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=8
+ n_l2_switches=4
+ n_l2_hosts=11
+ n_l2_links=3
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo ''
+ echo 'dirname=configs_${1:-$(date +%m-%d-%Y_%H-%M-%S)}'
+ echo 'mkdir -p $dirname'
+ echo ''
+ echo '# Arguments: filename, subnet, command'
+ echo 'save() { eval "ssh -q -o StrictHostKeyChecking=no root@${2%???} ${@:3} > $1" ; }'
+ echo ''
+ cp /home/service/tud/mini_internet_project/platform/setup/restore_configs.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ cp /home/service/tud/mini_internet_project/platform/setup/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g14/save_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh
+ declare -A l2_id
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 14 0 -1 router
++ local n_grp=14 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.10.1/16
+ subnet_router=158.14.10.1/16
++ subnet_sshContainer_groupContainer 14 0 -1 L3-host
++ local n_grp=14 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.10.2/16
+ subnet_host=158.14.10.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ 0 == 0 ]]
+ echo 'echo ZURI router'
+ echo 'mkdir -p ${dirname}/ZURI'
+ echo 'save ${dirname}/ZURI/router.conf      158.14.10.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/ZURI/router.rib.json  158.14.10.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' linux == linux ']'
+ echo 'save ${dirname}/ZURI/router.rib6.json 158.14.10.1/16 \"vtysh -c \'\''sh ipv6 route json\'\''\" \| grep -v uptime'
+ echo 'save ${dirname}/ZURI/router.tunnels   158.14.10.1/16 ip tunnel show'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo ZURI host'
+ echo 'save ${dirname}/ZURI/host.ip         158.14.10.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host.route      158.14.10.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host.route6     158.14.10.2/16 ip -6 route'
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ echo '  restore_router_config 158.14.10.1/16 ZURI linux'
+ echo '  main 158.14.10.1/16 ZURI linux'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
+ rcmd=vtysh
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 14 1 -1 router
++ local n_grp=14 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.11.1/16
+ subnet_router=158.14.11.1/16
++ subnet_sshContainer_groupContainer 14 1 -1 L3-host
++ local n_grp=14 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.11.2/16
+ subnet_host=158.14.11.2/16
+ savedir='${dirname}/BASE'
+ [[ 0 == 1000000 ]]
+ [[ 1 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo BASE router'
+ echo 'mkdir -p ${dirname}/BASE'
+ echo 'save ${dirname}/BASE/router.conf      158.14.11.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/BASE/router.rib.json  158.14.11.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo BASE host'
+ echo 'save ${dirname}/BASE/host.ip         158.14.11.2/16 ip addr'
+ echo 'save ${dirname}/BASE/host.route      158.14.11.2/16 ip route'
+ echo 'save ${dirname}/BASE/host.route6     158.14.11.2/16 ip -6 route'
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "BASE" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ echo '  restore_router_config 158.14.11.1/16 BASE vtysh'
+ echo '  main 158.14.11.1/16 BASE vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
+ rcmd=linux
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=DCS
++ subnet_sshContainer_groupContainer 14 2 -1 router
++ local n_grp=14 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.12.1/16
+ subnet_router=158.14.12.1/16
++ subnet_sshContainer_groupContainer 14 2 -1 L3-host
++ local n_grp=14 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.12.2/16
+ subnet_host=158.14.12.2/16
+ savedir='${dirname}/GENE'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=2
+ [[ 2 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo GENE router'
+ echo 'mkdir -p ${dirname}/GENE'
+ echo 'save ${dirname}/GENE/router.conf      158.14.12.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/GENE/router.rib.json  158.14.12.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' linux == linux ']'
+ echo 'save ${dirname}/GENE/router.rib6.json 158.14.12.1/16 \"vtysh -c \'\''sh ipv6 route json\'\''\" \| grep -v uptime'
+ echo 'save ${dirname}/GENE/router.tunnels   158.14.12.1/16 ip tunnel show'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo GENE host'
+ echo 'save ${dirname}/GENE/host.ip         158.14.12.2/16 ip addr'
+ echo 'save ${dirname}/GENE/host.route      158.14.12.2/16 ip route'
+ echo 'save ${dirname}/GENE/host.route6     158.14.12.2/16 ip -6 route'
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCS
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ L2-DCS == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "GENE" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ echo '  restore_router_config 158.14.12.1/16 GENE linux'
+ echo '  main 158.14.12.1/16 GENE linux'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
++ subnet_sshContainer_groupContainer 14 3 -1 router
++ local n_grp=14 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.13.1/16
+ subnet_router=158.14.13.1/16
++ subnet_sshContainer_groupContainer 14 3 -1 L3-host
++ local n_grp=14 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.13.2/16
+ subnet_host=158.14.13.2/16
+ savedir='${dirname}/LUGA'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=3
+ [[ 3 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo LUGA router'
+ echo 'mkdir -p ${dirname}/LUGA'
+ echo 'save ${dirname}/LUGA/router.conf      158.14.13.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/LUGA/router.rib.json  158.14.13.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo LUGA host'
+ echo 'save ${dirname}/LUGA/host.ip         158.14.13.2/16 ip addr'
+ echo 'save ${dirname}/LUGA/host.route      158.14.13.2/16 ip route'
+ echo 'save ${dirname}/LUGA/host.route6     158.14.13.2/16 ip -6 route'
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'save ${dirname}/LUGA/host.rpki_cache 158.14.13.2/16 "tar -czC /root/.rpki-cache repository"'
+ echo 'if [[ "$device_name" == "LUGA" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ echo '  restore_router_config 158.14.13.1/16 LUGA vtysh'
+ echo '  main 158.14.13.1/16 LUGA vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 14 4 -1 router
++ local n_grp=14 n_router=4 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.14.1/16
+ subnet_router=158.14.14.1/16
++ subnet_sshContainer_groupContainer 14 4 -1 L3-host
++ local n_grp=14 n_router=4 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.14.2/16
+ subnet_host=158.14.14.2/16
+ savedir='${dirname}/MUNI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=4
+ [[ 4 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo MUNI router'
+ echo 'mkdir -p ${dirname}/MUNI'
+ echo 'save ${dirname}/MUNI/router.conf      158.14.14.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/MUNI/router.rib.json  158.14.14.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo MUNI host'
+ echo 'save ${dirname}/MUNI/host.ip         158.14.14.2/16 ip addr'
+ echo 'save ${dirname}/MUNI/host.route      158.14.14.2/16 ip route'
+ echo 'save ${dirname}/MUNI/host.route6     158.14.14.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "MUNI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ echo '  restore_router_config 158.14.14.1/16 MUNI vtysh'
+ echo '  main 158.14.14.1/16 MUNI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 14 5 -1 router
++ local n_grp=14 n_router=5 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.15.1/16
+ subnet_router=158.14.15.1/16
++ subnet_sshContainer_groupContainer 14 5 -1 L3-host
++ local n_grp=14 n_router=5 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.15.2/16
+ subnet_host=158.14.15.2/16
+ savedir='${dirname}/LYON'
+ [[ 4 == 1000000 ]]
+ [[ 5 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo LYON router'
+ echo 'mkdir -p ${dirname}/LYON'
+ echo 'save ${dirname}/LYON/router.conf      158.14.15.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/LYON/router.rib.json  158.14.15.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo LYON host'
+ echo 'save ${dirname}/LYON/host.ip         158.14.15.2/16 ip addr'
+ echo 'save ${dirname}/LYON/host.route      158.14.15.2/16 ip route'
+ echo 'save ${dirname}/LYON/host.route6     158.14.15.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ cut -d : -f 2
++ echo host:miniinterneteth/d_host
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "LYON" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ echo '  restore_router_config 158.14.15.1/16 LYON vtysh'
+ echo '  main 158.14.15.1/16 LYON vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 14 6 -1 router
++ local n_grp=14 n_router=6 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.16.1/16
+ subnet_router=158.14.16.1/16
++ subnet_sshContainer_groupContainer 14 6 -1 L3-host
++ local n_grp=14 n_router=6 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.16.2/16
+ subnet_host=158.14.16.2/16
+ savedir='${dirname}/VIEN'
+ [[ 4 == 1000000 ]]
+ [[ 6 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo VIEN router'
+ echo 'mkdir -p ${dirname}/VIEN'
+ echo 'save ${dirname}/VIEN/router.conf      158.14.16.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/VIEN/router.rib.json  158.14.16.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo VIEN host'
+ echo 'save ${dirname}/VIEN/host.ip         158.14.16.2/16 ip addr'
+ echo 'save ${dirname}/VIEN/host.route      158.14.16.2/16 ip route'
+ echo 'save ${dirname}/VIEN/host.route6     158.14.16.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "VIEN" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ echo '  restore_router_config 158.14.16.1/16 VIEN vtysh'
+ echo '  main 158.14.16.1/16 VIEN vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
+ rcmd=vtysh
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=host
++ subnet_sshContainer_groupContainer 14 7 -1 router
++ local n_grp=14 n_router=7 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.17.1/16
+ subnet_router=158.14.17.1/16
++ subnet_sshContainer_groupContainer 14 7 -1 L3-host
++ local n_grp=14 n_router=7 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.17.2/16
+ subnet_host=158.14.17.2/16
+ savedir='${dirname}/MILA'
+ [[ 4 == 1000000 ]]
+ [[ 7 == 0 ]]
+ [[ 4 -le 4 ]]
+ echo 'echo MILA router'
+ echo 'mkdir -p ${dirname}/MILA'
+ echo 'save ${dirname}/MILA/router.conf      158.14.17.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/MILA/router.rib.json  158.14.17.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 4 -gt 4 ]]
+ echo 'echo MILA host'
+ echo 'save ${dirname}/MILA/host.ip         158.14.17.2/16 ip addr'
+ echo 'save ${dirname}/MILA/host.route      158.14.17.2/16 ip route'
+ echo 'save ${dirname}/MILA/host.route6     158.14.17.2/16 ip -6 route'
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ [[ ! -z miniinterneteth/d_host ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "MILA" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ echo '  restore_router_config 158.14.17.1/16 MILA vtysh'
+ echo '  main 158.14.17.1/16 MILA vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ s_name=S1
++ subnet_sshContainer_groupContainer 14 0 0 switch
++ local n_grp=14 n_router=0 n_layer2=0 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.14.100.3/16
+ subnet=158.14.100.3/16
+ savedir='${dirname}/S1'
+ echo 'echo S1'
+ echo 'mkdir -p ${dirname}/S1'
+ echo 'save ${dirname}/S1/switch.db      158.14.100.3/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S1/switch.summary 158.14.100.3/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ s_name=S2
++ subnet_sshContainer_groupContainer 14 0 1 switch
++ local n_grp=14 n_router=0 n_layer2=1 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.14.100.4/16
+ subnet=158.14.100.4/16
+ savedir='${dirname}/S2'
+ echo 'echo S2'
+ echo 'mkdir -p ${dirname}/S2'
+ echo 'save ${dirname}/S2/switch.db      158.14.100.4/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S2/switch.summary 158.14.100.4/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCN
+ s_name=S3
++ subnet_sshContainer_groupContainer 14 0 2 switch
++ local n_grp=14 n_router=0 n_layer2=2 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.14.100.5/16
+ subnet=158.14.100.5/16
+ savedir='${dirname}/S3'
+ echo 'echo S3'
+ echo 'mkdir -p ${dirname}/S3'
+ echo 'save ${dirname}/S3/switch.db      158.14.100.5/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S3/switch.summary 158.14.100.5/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2_name=DCS
+ s_name=S4
++ subnet_sshContainer_groupContainer 14 2 3 switch
++ local n_grp=14 n_router=2 n_layer2=3 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.14.100.6/16
+ subnet=158.14.100.6/16
+ savedir='${dirname}/S4'
+ echo 'echo S4'
+ echo 'mkdir -p ${dirname}/S4'
+ echo 'save ${dirname}/S4/switch.db      158.14.100.6/16 "ovsdb-client backup"'
+ echo 'save ${dirname}/S4/switch.summary 158.14.100.6/16 "ovs-vsctl show"'
+ (( l++ ))
+ (( l<n_l2_switches ))
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_1
+ [[ FIFA_1 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 14 0 0 L2-host
++ local n_grp=14 n_router=0 n_layer2=0 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.3/16
+ subnet=158.14.200.3/16
+ savedir='${dirname}/FIFA_1'
+ echo 'echo FIFA_1'
+ echo 'mkdir -p ${dirname}/FIFA_1'
+ echo 'save ${dirname}/FIFA_1/host.ip     158.14.200.3/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_1/host.route  158.14.200.3/16 "ip route"'
+ echo 'save ${dirname}/FIFA_1/host.route6 158.14.200.3/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_1
+ [[ UEFA_1 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 14 0 1 L2-host
++ local n_grp=14 n_router=0 n_layer2=1 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.4/16
+ subnet=158.14.200.4/16
+ savedir='${dirname}/UEFA_1'
+ echo 'echo UEFA_1'
+ echo 'mkdir -p ${dirname}/UEFA_1'
+ echo 'save ${dirname}/UEFA_1/host.ip     158.14.200.4/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_1/host.route  158.14.200.4/16 "ip route"'
+ echo 'save ${dirname}/UEFA_1/host.route6 158.14.200.4/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_1
+ [[ vpn_1 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 14 0 2 L2-host
++ local n_grp=14 n_router=0 n_layer2=2 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.5/16
+ subnet=158.14.200.5/16
+ savedir='${dirname}/vpn_1'
+ echo 'echo vpn_1'
+ echo 'mkdir -p ${dirname}/vpn_1'
+ echo 'save ${dirname}/vpn_1/host.ip     158.14.200.5/16 "ip addr"'
+ echo 'save ${dirname}/vpn_1/host.route  158.14.200.5/16 "ip route"'
+ echo 'save ${dirname}/vpn_1/host.route6 158.14.200.5/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_2
+ [[ FIFA_2 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 14 0 3 L2-host
++ local n_grp=14 n_router=0 n_layer2=3 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.6/16
+ subnet=158.14.200.6/16
+ savedir='${dirname}/FIFA_2'
+ echo 'echo FIFA_2'
+ echo 'mkdir -p ${dirname}/FIFA_2'
+ echo 'save ${dirname}/FIFA_2/host.ip     158.14.200.6/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_2/host.route  158.14.200.6/16 "ip route"'
+ echo 'save ${dirname}/FIFA_2/host.route6 158.14.200.6/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_2
+ [[ UEFA_2 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 14 0 4 L2-host
++ local n_grp=14 n_router=0 n_layer2=4 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.7/16
+ subnet=158.14.200.7/16
+ savedir='${dirname}/UEFA_2'
+ echo 'echo UEFA_2'
+ echo 'mkdir -p ${dirname}/UEFA_2'
+ echo 'save ${dirname}/UEFA_2/host.ip     158.14.200.7/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_2/host.route  158.14.200.7/16 "ip route"'
+ echo 'save ${dirname}/UEFA_2/host.route6 158.14.200.7/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_2
+ [[ vpn_2 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 14 0 5 L2-host
++ local n_grp=14 n_router=0 n_layer2=5 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.8/16
+ subnet=158.14.200.8/16
+ savedir='${dirname}/vpn_2'
+ echo 'echo vpn_2'
+ echo 'mkdir -p ${dirname}/vpn_2'
+ echo 'save ${dirname}/vpn_2/host.ip     158.14.200.8/16 "ip addr"'
+ echo 'save ${dirname}/vpn_2/host.route  158.14.200.8/16 "ip route"'
+ echo 'save ${dirname}/vpn_2/host.route6 158.14.200.8/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_3
+ [[ FIFA_3 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 14 0 6 L2-host
++ local n_grp=14 n_router=0 n_layer2=6 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.9/16
+ subnet=158.14.200.9/16
+ savedir='${dirname}/FIFA_3'
+ echo 'echo FIFA_3'
+ echo 'mkdir -p ${dirname}/FIFA_3'
+ echo 'save ${dirname}/FIFA_3/host.ip     158.14.200.9/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_3/host.route  158.14.200.9/16 "ip route"'
+ echo 'save ${dirname}/FIFA_3/host.route6 158.14.200.9/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_3
+ [[ UEFA_3 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 14 0 7 L2-host
++ local n_grp=14 n_router=0 n_layer2=7 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.10/16
+ subnet=158.14.200.10/16
+ savedir='${dirname}/UEFA_3'
+ echo 'echo UEFA_3'
+ echo 'mkdir -p ${dirname}/UEFA_3'
+ echo 'save ${dirname}/UEFA_3/host.ip     158.14.200.10/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_3/host.route  158.14.200.10/16 "ip route"'
+ echo 'save ${dirname}/UEFA_3/host.route6 158.14.200.10/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_3
+ [[ vpn_3 != *VPN* ]]
+ l2_name=DCN
++ subnet_sshContainer_groupContainer 14 0 8 L2-host
++ local n_grp=14 n_router=0 n_layer2=8 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.11/16
+ subnet=158.14.200.11/16
+ savedir='${dirname}/vpn_3'
+ echo 'echo vpn_3'
+ echo 'mkdir -p ${dirname}/vpn_3'
+ echo 'save ${dirname}/vpn_3/host.ip     158.14.200.11/16 "ip addr"'
+ echo 'save ${dirname}/vpn_3/host.route  158.14.200.11/16 "ip route"'
+ echo 'save ${dirname}/vpn_3/host.route6 158.14.200.11/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_4
+ [[ FIFA_4 != *VPN* ]]
+ l2_name=DCS
++ subnet_sshContainer_groupContainer 14 2 9 L2-host
++ local n_grp=14 n_router=2 n_layer2=9 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.12/16
+ subnet=158.14.200.12/16
+ savedir='${dirname}/FIFA_4'
+ echo 'echo FIFA_4'
+ echo 'mkdir -p ${dirname}/FIFA_4'
+ echo 'save ${dirname}/FIFA_4/host.ip     158.14.200.12/16 "ip addr"'
+ echo 'save ${dirname}/FIFA_4/host.route  158.14.200.12/16 "ip route"'
+ echo 'save ${dirname}/FIFA_4/host.route6 158.14.200.12/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_4
+ [[ UEFA_4 != *VPN* ]]
+ l2_name=DCS
++ subnet_sshContainer_groupContainer 14 2 10 L2-host
++ local n_grp=14 n_router=2 n_layer2=10 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.13/16
+ subnet=158.14.200.13/16
+ savedir='${dirname}/UEFA_4'
+ echo 'echo UEFA_4'
+ echo 'mkdir -p ${dirname}/UEFA_4'
+ echo 'save ${dirname}/UEFA_4/host.ip     158.14.200.13/16 "ip addr"'
+ echo 'save ${dirname}/UEFA_4/host.route  158.14.200.13/16 "ip route"'
+ echo 'save ${dirname}/UEFA_4/host.route6 158.14.200.13/16 "ip -6 route"'
+ (( l++ ))
+ (( l<n_l2_hosts ))
+ echo ''
+ echo 'tar -czf ${dirname}.tar.gz ${dirname}/*'
+ echo ''
+ echo 'echo '\''Saving complete!'\'''
+ echo 'echo '\'''\'''
+ echo 'echo "Download the archive file (run these commands from your own computer):"'
+ echo 'echo "    scp -O -P 2014 root@172.26.123.85:${dirname}.tar.gz ."'
+ echo 'echo '\''Extract the archive:'\'''
+ echo 'echo "    tar -xzf ${dirname}.tar.gz"'
+ echo 'echo "Alternatively, to directly update the "config" folder in the current local directory:"'
+ echo 'echo "    scp -O -r -P 2014 root@172.26.123.85:${dirname} config"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If the scp commands do not work for you, use ssh (also from your own computer):'\'''
+ echo 'echo '\''(Reliable only on UNIX systems. On Windows, you may use WinSCP instead)'\'''
+ echo 'echo "Download the archive:"'
+ echo 'echo "    ssh -q -p 2014 root@172.26.123.85 cat ${dirname}.tar.gz > ${dirname}.tar.gz"'
+ echo 'echo "Download and unpack the archive:"'
+ echo 'echo "    ssh -q -p 2014 root@172.26.123.85 cat ${dirname}.tar.gz | tar -xz"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If you are using an ssh config file, you may need to update the scp and ssh commands above to match your configuration.'\'''
+ echo 'echo '\''For example, you may need to replace "root@172.26.123.85" with the hostname you have defined in your ssh config file.'\'''
+ echo 'echo '\''Contact the TAs if you are unable to download your files!'\'''
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=15
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g15/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g15/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g15/restart_ospfd.sh
+ '[' AS == IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo ''
+ echo 'dirname=configs_${1:-$(date +%m-%d-%Y_%H-%M-%S)}'
+ echo 'mkdir -p $dirname'
+ echo ''
+ echo '# Arguments: filename, subnet, command'
+ echo 'save() { eval "ssh -q -o StrictHostKeyChecking=no root@${2%???} ${@:3} > $1" ; }'
+ echo ''
+ cp /home/service/tud/mini_internet_project/platform/setup/restore_configs.sh /home/service/tud/mini_internet_project/platform/groups/g15/restore_configs.sh
+ cp /home/service/tud/mini_internet_project/platform/setup/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g15/restart_ospfd.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g15/save_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g15/restore_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g15/restart_ospfd.sh
+ declare -A l2_id
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
++ subnet_sshContainer_groupContainer 15 0 -1 router
++ local n_grp=15 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.15.10.1/16
+ subnet_router=158.15.10.1/16
++ subnet_sshContainer_groupContainer 15 0 -1 L3-host
++ local n_grp=15 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.15.10.2/16
+ subnet_host=158.15.10.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ 0 == 0 ]]
+ echo 'echo ZURI router'
+ echo 'mkdir -p ${dirname}/ZURI'
+ echo 'save ${dirname}/ZURI/router.conf      158.15.10.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/ZURI/router.rib.json  158.15.10.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host0
+ echo 'echo ZURI host0'
+ echo 'save ${dirname}/ZURI/host0.ip         158.15.10.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host0.route      158.15.10.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host0.route6     158.15.10.2/16 ip -6 route'
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'save ${dirname}/ZURI/host0.rpki_cache 158.15.10.2/16 "tar -czC /root/.rpki-cache repository"'
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g15/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g15/restore_configs.sh
+ echo '  restore_router_config 158.15.10.1/16 ZURI vtysh'
+ echo '  main 158.15.10.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g15/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g15/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 15 1 -1 router
++ local n_grp=15 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.15.11.1/16
+ subnet_router=158.15.11.1/16
++ subnet_sshContainer_groupContainer 15 1 -1 L3-host
++ local n_grp=15 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.15.11.2/16
+ subnet_host=158.15.11.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ 1 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host1
+ echo 'echo ZURI host1'
+ echo 'save ${dirname}/ZURI/host1.ip         158.15.11.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host1.route      158.15.11.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host1.route6     158.15.11.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g15/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g15/restore_configs.sh
+ echo '  restore_router_config 158.15.11.1/16 ZURI vtysh'
+ echo '  main 158.15.11.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g15/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g15/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 15 2 -1 router
++ local n_grp=15 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.15.12.1/16
+ subnet_router=158.15.12.1/16
++ subnet_sshContainer_groupContainer 15 2 -1 L3-host
++ local n_grp=15 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.15.12.2/16
+ subnet_host=158.15.12.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 2 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host2
+ echo 'echo ZURI host2'
+ echo 'save ${dirname}/ZURI/host2.ip         158.15.12.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host2.route      158.15.12.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host2.route6     158.15.12.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g15/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g15/restore_configs.sh
+ echo '  restore_router_config 158.15.12.1/16 ZURI vtysh'
+ echo '  main 158.15.12.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g15/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g15/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 15 3 -1 router
++ local n_grp=15 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.15.13.1/16
+ subnet_router=158.15.13.1/16
++ subnet_sshContainer_groupContainer 15 3 -1 L3-host
++ local n_grp=15 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.15.13.2/16
+ subnet_host=158.15.13.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 3 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host3
+ echo 'echo ZURI host3'
+ echo 'save ${dirname}/ZURI/host3.ip         158.15.13.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host3.route      158.15.13.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host3.route6     158.15.13.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g15/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g15/restore_configs.sh
+ echo '  restore_router_config 158.15.13.1/16 ZURI vtysh'
+ echo '  main 158.15.13.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g15/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g15/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo ''
+ echo 'tar -czf ${dirname}.tar.gz ${dirname}/*'
+ echo ''
+ echo 'echo '\''Saving complete!'\'''
+ echo 'echo '\'''\'''
+ echo 'echo "Download the archive file (run these commands from your own computer):"'
+ echo 'echo "    scp -O -P 2015 root@172.26.123.85:${dirname}.tar.gz ."'
+ echo 'echo '\''Extract the archive:'\'''
+ echo 'echo "    tar -xzf ${dirname}.tar.gz"'
+ echo 'echo "Alternatively, to directly update the "config" folder in the current local directory:"'
+ echo 'echo "    scp -O -r -P 2015 root@172.26.123.85:${dirname} config"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If the scp commands do not work for you, use ssh (also from your own computer):'\'''
+ echo 'echo '\''(Reliable only on UNIX systems. On Windows, you may use WinSCP instead)'\'''
+ echo 'echo "Download the archive:"'
+ echo 'echo "    ssh -q -p 2015 root@172.26.123.85 cat ${dirname}.tar.gz > ${dirname}.tar.gz"'
+ echo 'echo "Download and unpack the archive:"'
+ echo 'echo "    ssh -q -p 2015 root@172.26.123.85 cat ${dirname}.tar.gz | tar -xz"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If you are using an ssh config file, you may need to update the scp and ssh commands above to match your configuration.'\'''
+ echo 'echo '\''For example, you may need to replace "root@172.26.123.85" with the hostname you have defined in your ssh config file.'\'''
+ echo 'echo '\''Contact the TAs if you are unable to download your files!'\'''
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=16
+ group_as=AS
+ group_config=Config
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_internal_links=l3_links_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ group_layer2_links=empty.txt
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g16/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g16/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g16/restart_ospfd.sh
+ '[' AS == IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ readarray l2_links
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ n_l2_links=0
+ l2_rname=-
+ echo '#!/bin/bash'
+ echo ''
+ echo 'dirname=configs_${1:-$(date +%m-%d-%Y_%H-%M-%S)}'
+ echo 'mkdir -p $dirname'
+ echo ''
+ echo '# Arguments: filename, subnet, command'
+ echo 'save() { eval "ssh -q -o StrictHostKeyChecking=no root@${2%???} ${@:3} > $1" ; }'
+ echo ''
+ cp /home/service/tud/mini_internet_project/platform/setup/restore_configs.sh /home/service/tud/mini_internet_project/platform/groups/g16/restore_configs.sh
+ cp /home/service/tud/mini_internet_project/platform/setup/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g16/restart_ospfd.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g16/save_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g16/restore_configs.sh
+ chmod 0755 /home/service/tud/mini_internet_project/platform/groups/g16/restart_ospfd.sh
+ declare -A l2_id
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
+ l2_id[$l2_name]=1000000
+ (( i++ ))
+ (( i<n_routers ))
+ (( i=0 ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
+ rcmd=vtysh
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=routinator
++ subnet_sshContainer_groupContainer 16 0 -1 router
++ local n_grp=16 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.16.10.1/16
+ subnet_router=158.16.10.1/16
++ subnet_sshContainer_groupContainer 16 0 -1 L3-host
++ local n_grp=16 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.16.10.2/16
+ subnet_host=158.16.10.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=0
+ [[ 0 == 0 ]]
+ echo 'echo ZURI router'
+ echo 'mkdir -p ${dirname}/ZURI'
+ echo 'save ${dirname}/ZURI/router.conf      158.16.10.1/16 \"vtysh -c \'\''sh run\'\''\"'
+ echo 'save ${dirname}/ZURI/router.rib.json  158.16.10.1/16 \"vtysh -c \'\''sh ip route json\'\''\" \| grep -v uptime'
+ '[' vtysh == linux ']'
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host0
+ echo 'echo ZURI host0'
+ echo 'save ${dirname}/ZURI/host0.ip         158.16.10.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host0.route      158.16.10.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host0.route6     158.16.10.2/16 ip -6 route'
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ [[ ! -z miniinterneteth/d_routinator ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'save ${dirname}/ZURI/host0.rpki_cache 158.16.10.2/16 "tar -czC /root/.rpki-cache repository"'
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g16/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g16/restore_configs.sh
+ echo '  restore_router_config 158.16.10.1/16 ZURI vtysh'
+ echo '  main 158.16.10.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g16/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g16/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 16 1 -1 router
++ local n_grp=16 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.16.11.1/16
+ subnet_router=158.16.11.1/16
++ subnet_sshContainer_groupContainer 16 1 -1 L3-host
++ local n_grp=16 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.16.11.2/16
+ subnet_host=158.16.11.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1000000 == 1000000 ]]
+ l2_id[$l2_name]=1
+ [[ 1 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host1
+ echo 'echo ZURI host1'
+ echo 'save ${dirname}/ZURI/host1.ip         158.16.11.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host1.route      158.16.11.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host1.route6     158.16.11.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g16/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g16/restore_configs.sh
+ echo '  restore_router_config 158.16.11.1/16 ZURI vtysh'
+ echo '  main 158.16.11.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g16/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g16/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 16 2 -1 router
++ local n_grp=16 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.16.12.1/16
+ subnet_router=158.16.12.1/16
++ subnet_sshContainer_groupContainer 16 2 -1 L3-host
++ local n_grp=16 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.16.12.2/16
+ subnet_host=158.16.12.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 2 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host2
+ echo 'echo ZURI host2'
+ echo 'save ${dirname}/ZURI/host2.ip         158.16.12.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host2.route      158.16.12.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host2.route6     158.16.12.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g16/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g16/restore_configs.sh
+ echo '  restore_router_config 158.16.12.1/16 ZURI vtysh'
+ echo '  main 158.16.12.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g16/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g16/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
+ rcmd=vtysh
++ echo N/A
++ cut -d : -f 1
++ cut -f 2 -d -
+ l2_name=N/A
++ subnet_sshContainer_groupContainer 16 3 -1 router
++ local n_grp=16 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.16.13.1/16
+ subnet_router=158.16.13.1/16
++ subnet_sshContainer_groupContainer 16 3 -1 L3-host
++ local n_grp=16 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.16.13.2/16
+ subnet_host=158.16.13.2/16
+ savedir='${dirname}/ZURI'
+ [[ 1 == 1000000 ]]
+ [[ 3 == 0 ]]
+ [[ 5 -le 4 ]]
+ [[ ALL != \A\L\L ]]
+ host=host
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ host=host3
+ echo 'echo ZURI host3'
+ echo 'save ${dirname}/ZURI/host3.ip         158.16.13.2/16 ip addr'
+ echo 'save ${dirname}/ZURI/host3.route      158.16.13.2/16 ip route'
+ echo 'save ${dirname}/ZURI/host3.route6     158.16.13.2/16 ip -6 route'
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ [[ ! -z N/A ]]
+ [[ N/A == *\r\o\u\t\i\n\a\t\o\r* ]]
+ echo 'if [[ "$device_name" == "ZURI" || $device_name == "all" ]]; then'
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g16/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g16/restore_configs.sh
+ echo '  restore_router_config 158.16.13.1/16 ZURI vtysh'
+ echo '  main 158.16.13.1/16 ZURI vtysh'
+ echo fi
+ tee -a /home/service/tud/mini_internet_project/platform/groups/g16/restart_ospfd.sh /home/service/tud/mini_internet_project/platform/groups/g16/restore_configs.sh
+ (( i++ ))
+ (( i<n_routers ))
+ (( l=0 ))
+ (( l<n_l2_switches ))
+ (( l=0 ))
+ (( l<n_l2_hosts ))
+ echo ''
+ echo 'tar -czf ${dirname}.tar.gz ${dirname}/*'
+ echo ''
+ echo 'echo '\''Saving complete!'\'''
+ echo 'echo '\'''\'''
+ echo 'echo "Download the archive file (run these commands from your own computer):"'
+ echo 'echo "    scp -O -P 2016 root@172.26.123.85:${dirname}.tar.gz ."'
+ echo 'echo '\''Extract the archive:'\'''
+ echo 'echo "    tar -xzf ${dirname}.tar.gz"'
+ echo 'echo "Alternatively, to directly update the "config" folder in the current local directory:"'
+ echo 'echo "    scp -O -r -P 2016 root@172.26.123.85:${dirname} config"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If the scp commands do not work for you, use ssh (also from your own computer):'\'''
+ echo 'echo '\''(Reliable only on UNIX systems. On Windows, you may use WinSCP instead)'\'''
+ echo 'echo "Download the archive:"'
+ echo 'echo "    ssh -q -p 2016 root@172.26.123.85 cat ${dirname}.tar.gz > ${dirname}.tar.gz"'
+ echo 'echo "Download and unpack the archive:"'
+ echo 'echo "    ssh -q -p 2016 root@172.26.123.85 cat ${dirname}.tar.gz | tar -xz"'
+ echo 'echo '\'''\'''
+ echo 'echo '\''If you are using an ssh config file, you may need to update the scp and ssh commands above to match your configuration.'\'''
+ echo 'echo '\''For example, you may need to replace "root@172.26.123.85" with the hostname you have defined in your ssh config file.'\'''
+ echo 'echo '\''Contact the TAs if you are unable to download your files!'\'''
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=80
+ group_as=IXP
+ group_config=Config
+ group_router_config=N/A
+ group_internal_links=N/A
+ group_layer2_switches=N/A
+ group_layer2_hosts=N/A
+ group_layer2_links=N/A
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g80/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g80/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g80/restart_ospfd.sh
+ '[' IXP == IXP ']'
+ continue
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=81
+ group_as=IXP
+ group_config=Config
+ group_router_config=N/A
+ group_internal_links=N/A
+ group_layer2_switches=N/A
+ group_layer2_hosts=N/A
+ group_layer2_links=N/A
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g81/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g81/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g81/restart_ospfd.sh
+ '[' IXP == IXP ']'
+ continue
+ (( k++ ))
+ (( k<n_groups ))
+ group_k=(${groups[$k]})
+ group_number=82
+ group_as=IXP
+ group_config=Config
+ group_router_config=N/A
+ group_internal_links=N/A
+ group_layer2_switches=N/A
+ group_layer2_hosts=N/A
+ group_layer2_links=N/A
+ file_loc=/home/service/tud/mini_internet_project/platform/groups/g82/save_configs.sh
+ restore_loc=/home/service/tud/mini_internet_project/platform/groups/g82/restore_configs.sh
+ restart_ospfd=/home/service/tud/mini_internet_project/platform/groups/g82/restart_ospfd.sh
+ '[' IXP == IXP ']'
+ continue
+ (( k++ ))
+ (( k<n_groups ))

real	0m0.804s
user	0m0.770s
sys	0m0.240s
+ echo ''

+ echo ''

++ date +%s%N
+ echo 'container_setup.sh 1735322398742'
+ echo 'container_setup.sh: '
container_setup.sh: 
+ /home/service/tud/mini_internet_project/platform/setup/container_setup.sh /home/service/tud/mini_internet_project/platform /home/service/tud/mini_internet_project/platform/config
++ readlink -f /home/service/tud/mini_internet_project/platform
+ DIRECTORY=/home/service/tud/mini_internet_project/platform
+ CONFIG_DIRECTORY=/home/service/tud/mini_internet_project/platform/config
+ source /home/service/tud/mini_internet_project/platform/config/variables.sh
++ DOCKERHUB_PREFIX=miniinterneteth/
++ SSH_URL=172.26.123.85
++ WEBSERVER_HOSTNAME=172.26.123.85
++ WEBSERVER_ACME_MAIL=
++ WEBSERVER_PORT_HTTP=80
++ WEBSERVER_PORT_HTTPS=443
++ WEBSERVER_PORT_KRILL=3000
++ WEBSERVER_TZ=Europe/Zurich
++ DEFAULT_THROUGHPUT=10mbit
++ DEFAULT_DELAY=10ms
++ DEFAULT_BUFFER=50ms
++ MATRIX_FREQUENCY=300
++ MATRIX_CONCURRENT_PINGS=500
++ MATRIX_PING_FLAGS='-c 3 -i 0.01'
++ MATRIX_PAUSE_AFTER_START=false
++ HISTORY_ENABLED=true
++ HISTORY_PAUSE_AFTER_START=false
++ HISTORY_UPDATE_FREQUENCY=3600
++ HISTORY_TIMEOUT=300s
++ HISTORY_GIT_USER=
++ HISTORY_GIT_EMAIL=
++ HISTORY_GIT_URL=
++ HISTORY_GIT_BRANCH=main
++ HISTORY_FORGET_BINARIES=true
+ source /home/service/tud/mini_internet_project/platform/config/subnet_config.sh
++ set -o errexit
++ set -o pipefail
++ set -o nounset
+ source /home/service/tud/mini_internet_project/platform/setup/_parallel_helper.sh
++ trap 'exit 1' ERR
++ set -o errexit
++ set -o pipefail
++ set -o nounset
+++ grep -c '^processor' /proc/cpuinfo
++ N_CORES=8
+++ lscpu
+++ grep -E '^Thread\(s\) per core:'
+++ awk '{print $4}'
++ N_THREADS_PER_CORE=1
++ N_TASKS=8
+ touch /home/service/tud/mini_internet_project/platform/groups/rpki/krill_containers.txt
+ readarray groups
+ group_numbers=15
+ rpki_location=/home/service/tud/mini_internet_project/platform/groups/rpki
+ krill_container_list_file=/home/service/tud/mini_internet_project/platform/groups/rpki/krill_containers.txt
+ routinator_container_list_file=/home/service/tud/mini_internet_project/platform/groups/rpki/routinator_containers.txt
+ container_list_file=/home/service/tud/mini_internet_project/platform/groups/docker_containers.txt
+ ssh_to_grp_bname=ssh_bridge
++ subnet_ext_sshContainer -1 docker
++ local n_grp=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 157.0.0.0/24
+ subnet_ssh_to_grp=157.0.0.0/24
+ docker network create --driver bridge --internal --subnet=157.0.0.0/24 ssh_bridge
+ (( k = 0 ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=1
+ group_as=AS
+ group_router_config=l3_routers_krill.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=1_ssh
++ jobs -r -p
++ wc -l
++ subnet_sshContainer_groupContainer 1 -1 -1 docker
++ local n_grp=1 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.1.0.0/16
+ subnet_ssh_to_ctn=158.1.0.0/16
+ docker network create --driver bridge --internal --subnet=158.1.0.0/16 1_ssh
+ [[ 1 -ge 8 ]]
+ (( k++ ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=2
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=2_ssh
++ jobs -r -p
++ wc -l
++ subnet_sshContainer_groupContainer 2 -1 -1 docker
++ local n_grp=2 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.2.0.0/16
+ subnet_ssh_to_ctn=158.2.0.0/16
+ docker network create --driver bridge --internal --subnet=158.2.0.0/16 2_ssh
+ [[ 2 -ge 8 ]]
+ (( k++ ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=3
+ group_as=AS
+ group_router_config=l3_routers.txt
+ group_layer2_switches=l2_switches.txt
+ group_layer2_hosts=l2_hosts.txt
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=3_ssh
++ jobs -r -p
++ subnet_sshContainer_groupContainer 3 -1 -1 docker
++ wc -l
++ local n_grp=3 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.3.0.0/16
+ subnet_ssh_to_ctn=158.3.0.0/16
+ docker network create --driver bridge --internal --subnet=158.3.0.0/16 3_ssh
+ [[ 3 -ge 8 ]]
+ (( k++ ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=4
+ group_as=AS
+ group_router_config=l3_routers.txt
+ group_layer2_switches=l2_switches.txt
+ group_layer2_hosts=l2_hosts.txt
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=4_ssh
++ wc -l
++ subnet_sshContainer_groupContainer 4 -1 -1 docker
++ local n_grp=4 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.4.0.0/16
+ subnet_ssh_to_ctn=158.4.0.0/16
+ docker network create --driver bridge --internal --subnet=158.4.0.0/16 4_ssh
++ jobs -r -p
+ [[ 4 -ge 8 ]]
+ (( k++ ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
++ wc -l
+ group_number=5
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=5_ssh
++ jobs -r -p
+ [[ 5 -ge 8 ]]
+ (( k++ ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
++ jobs -r -p
++ subnet_sshContainer_groupContainer 5 -1 -1 docker
+ group_k=(${groups[$k]})
++ local n_grp=5 n_router=-1 n_layer2=-1 device=docker
+ group_number=6
++ '[' docker = sshContainer ']'
+ group_as=AS
++ '[' docker = MEASUREMENT ']'
+ group_router_config=l3_routers_tier1_and_stub.txt
++ '[' docker = router ']'
+ group_layer2_switches=empty.txt
++ '[' docker = L3-host ']'
+ group_layer2_hosts=empty.txt
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
+ declare -a CONTAINERS
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
+ declare -a KRILL_CONTAINERS
++ echo 158.5.0.0/16
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=6_ssh
++ wc -l
++ subnet_sshContainer_groupContainer 6 -1 -1 docker
++ local n_grp=6 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
+ subnet_ssh_to_ctn=158.5.0.0/16
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
+ docker network create --driver bridge --internal --subnet=158.5.0.0/16 5_ssh
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.6.0.0/16
+ [[ 6 -ge 8 ]]
+ (( k++ ))
+ subnet_ssh_to_ctn=158.6.0.0/16
+ (( k < group_numbers ))
+ docker network create --driver bridge --internal --subnet=158.6.0.0/16 6_ssh
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=11
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
++ jobs -r -p
+ group_layer2_hosts=empty.txt
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=11_ssh
++ wc -l
++ subnet_sshContainer_groupContainer 11 -1 -1 docker
++ local n_grp=11 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.11.0.0/16
+ [[ 7 -ge 8 ]]
+ (( k++ ))
+ (( k < group_numbers ))
+ subnet_ssh_to_ctn=158.11.0.0/16
+ docker network create --driver bridge --internal --subnet=158.11.0.0/16 11_ssh
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=12
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=12_ssh
++ subnet_sshContainer_groupContainer 12 -1 -1 docker
++ local n_grp=12 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.12.0.0/16
+ subnet_ssh_to_ctn=158.12.0.0/16
+ docker network create --driver bridge --internal --subnet=158.12.0.0/16 12_ssh
++ jobs -r -p
++ wc -l
+ [[ 8 -ge 8 ]]
+ echo 'Current number of running tasks exceeds threshold (8). Waiting...'
Current number of running tasks exceeds threshold (8). Waiting...
+ wait -n
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ location=/home/service/tud/mini_internet_project/platform/groups/g1
++ subnet_router_DNS 1 dns-group
++ local n_grp=1 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.1.0.2/24
+ subnet_dns=198.1.0.2/24
++ subnet_ext_sshContainer 1 sshContainer
++ local n_grp=1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 157.0.0.11/24
+ subnet_ssh_to_grp=157.0.0.11/24
++ subnet_sshContainer_groupContainer 1 -1 -1 sshContainer
++ local n_grp=1 n_router=-1 n_layer2=-1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 158.1.0.2/16
+ subnet_ssh_to_ctn=158.1.0.2/16
+ docker run -itd --name=1_ssh --cpus=2 --pids-limit 100 --hostname=g1-proxy --cap-add=NET_ADMIN -v /home/service/tud/mini_internet_project/platform/groups/g1/goto.sh:/root/goto.sh -v /home/service/tud/mini_internet_project/platform/groups/g1/save_configs.sh:/root/save_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g1/restore_configs.sh:/root/restore_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g1/restart_ospfd.sh:/root/restart_ospfd.sh -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/config/ssh_welcome_message.txt:/etc/motd:ro --log-opt max-size=1m --log-opt max-file=3 --network=bridge -p 2001:22 miniinterneteth/d_ssh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ location=/home/service/tud/mini_internet_project/platform/groups/g2
++ subnet_router_DNS 2 dns-group
++ local n_grp=2 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.2.0.2/24
+ subnet_dns=198.2.0.2/24
++ subnet_ext_sshContainer 2 sshContainer
++ local n_grp=2 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 157.0.0.12/24
+ subnet_ssh_to_grp=157.0.0.12/24
++ subnet_sshContainer_groupContainer 2 -1 -1 sshContainer
++ local n_grp=2 n_router=-1 n_layer2=-1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 158.2.0.2/16
+ subnet_ssh_to_ctn=158.2.0.2/16
+ docker run -itd --name=2_ssh --cpus=2 --pids-limit 100 --hostname=g2-proxy --cap-add=NET_ADMIN -v /home/service/tud/mini_internet_project/platform/groups/g2/goto.sh:/root/goto.sh -v /home/service/tud/mini_internet_project/platform/groups/g2/save_configs.sh:/root/save_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g2/restore_configs.sh:/root/restore_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g2/restart_ospfd.sh:/root/restart_ospfd.sh -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/config/ssh_welcome_message.txt:/etc/motd:ro --log-opt max-size=1m --log-opt max-file=3 --network=bridge -p 2002:22 miniinterneteth/d_ssh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ n_routers=8
+ n_l2_switches=4
+ n_l2_hosts=11
+ location=/home/service/tud/mini_internet_project/platform/groups/g3
++ subnet_router_DNS 3 dns-group
++ local n_grp=3 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.3.0.2/24
+ subnet_dns=198.3.0.2/24
++ subnet_ext_sshContainer 3 sshContainer
++ local n_grp=3 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 157.0.0.13/24
+ subnet_ssh_to_grp=157.0.0.13/24
++ subnet_sshContainer_groupContainer 3 -1 -1 sshContainer
++ local n_grp=3 n_router=-1 n_layer2=-1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 158.3.0.2/16
+ subnet_ssh_to_ctn=158.3.0.2/16
+ docker run -itd --name=3_ssh --cpus=2 --pids-limit 100 --hostname=g3-proxy --cap-add=NET_ADMIN -v /home/service/tud/mini_internet_project/platform/groups/g3/goto.sh:/root/goto.sh -v /home/service/tud/mini_internet_project/platform/groups/g3/save_configs.sh:/root/save_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g3/restore_configs.sh:/root/restore_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g3/restart_ospfd.sh:/root/restart_ospfd.sh -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/config/ssh_welcome_message.txt:/etc/motd:ro --log-opt max-size=1m --log-opt max-file=3 --network=bridge -p 2003:22 miniinterneteth/d_ssh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ n_routers=8
+ n_l2_switches=4
+ n_l2_hosts=11
+ location=/home/service/tud/mini_internet_project/platform/groups/g4
++ subnet_router_DNS 4 dns-group
++ local n_grp=4 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.4.0.2/24
+ subnet_dns=198.4.0.2/24
++ subnet_ext_sshContainer 4 sshContainer
++ local n_grp=4 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 157.0.0.14/24
+ subnet_ssh_to_grp=157.0.0.14/24
++ subnet_sshContainer_groupContainer 4 -1 -1 sshContainer
++ local n_grp=4 n_router=-1 n_layer2=-1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 158.4.0.2/16
+ subnet_ssh_to_ctn=158.4.0.2/16
+ docker run -itd --name=4_ssh --cpus=2 --pids-limit 100 --hostname=g4-proxy --cap-add=NET_ADMIN -v /home/service/tud/mini_internet_project/platform/groups/g4/goto.sh:/root/goto.sh -v /home/service/tud/mini_internet_project/platform/groups/g4/save_configs.sh:/root/save_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g4/restore_configs.sh:/root/restore_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g4/restart_ospfd.sh:/root/restart_ospfd.sh -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/config/ssh_welcome_message.txt:/etc/motd:ro --log-opt max-size=1m --log-opt max-file=3 --network=bridge -p 2004:22 miniinterneteth/d_ssh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ location=/home/service/tud/mini_internet_project/platform/groups/g5
++ subnet_router_DNS 5 dns-group
++ local n_grp=5 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.5.0.2/24
+ subnet_dns=198.5.0.2/24
++ subnet_ext_sshContainer 5 sshContainer
++ local n_grp=5 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 157.0.0.15/24
+ subnet_ssh_to_grp=157.0.0.15/24
++ subnet_sshContainer_groupContainer 5 -1 -1 sshContainer
++ local n_grp=5 n_router=-1 n_layer2=-1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 158.5.0.2/16
+ subnet_ssh_to_ctn=158.5.0.2/16
+ docker run -itd --name=5_ssh --cpus=2 --pids-limit 100 --hostname=g5-proxy --cap-add=NET_ADMIN -v /home/service/tud/mini_internet_project/platform/groups/g5/goto.sh:/root/goto.sh -v /home/service/tud/mini_internet_project/platform/groups/g5/save_configs.sh:/root/save_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g5/restore_configs.sh:/root/restore_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g5/restart_ospfd.sh:/root/restart_ospfd.sh -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/config/ssh_welcome_message.txt:/etc/motd:ro --log-opt max-size=1m --log-opt max-file=3 --network=bridge -p 2005:22 miniinterneteth/d_ssh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ location=/home/service/tud/mini_internet_project/platform/groups/g6
++ subnet_router_DNS 6 dns-group
++ local n_grp=6 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.6.0.2/24
+ subnet_dns=198.6.0.2/24
++ subnet_ext_sshContainer 6 sshContainer
++ local n_grp=6 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 157.0.0.16/24
+ subnet_ssh_to_grp=157.0.0.16/24
++ subnet_sshContainer_groupContainer 6 -1 -1 sshContainer
++ local n_grp=6 n_router=-1 n_layer2=-1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 158.6.0.2/16
+ subnet_ssh_to_ctn=158.6.0.2/16
+ docker run -itd --name=6_ssh --cpus=2 --pids-limit 100 --hostname=g6-proxy --cap-add=NET_ADMIN -v /home/service/tud/mini_internet_project/platform/groups/g6/goto.sh:/root/goto.sh -v /home/service/tud/mini_internet_project/platform/groups/g6/save_configs.sh:/root/save_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g6/restore_configs.sh:/root/restore_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g6/restart_ospfd.sh:/root/restart_ospfd.sh -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/config/ssh_welcome_message.txt:/etc/motd:ro --log-opt max-size=1m --log-opt max-file=3 --network=bridge -p 2006:22 miniinterneteth/d_ssh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ location=/home/service/tud/mini_internet_project/platform/groups/g11
++ subnet_router_DNS 11 dns-group
++ local n_grp=11 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.11.0.2/24
+ subnet_dns=198.11.0.2/24
++ subnet_ext_sshContainer 11 sshContainer
++ local n_grp=11 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 157.0.0.21/24
+ subnet_ssh_to_grp=157.0.0.21/24
++ subnet_sshContainer_groupContainer 11 -1 -1 sshContainer
++ local n_grp=11 n_router=-1 n_layer2=-1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 158.11.0.2/16
+ subnet_ssh_to_ctn=158.11.0.2/16
+ docker run -itd --name=11_ssh --cpus=2 --pids-limit 100 --hostname=g11-proxy --cap-add=NET_ADMIN -v /home/service/tud/mini_internet_project/platform/groups/g11/goto.sh:/root/goto.sh -v /home/service/tud/mini_internet_project/platform/groups/g11/save_configs.sh:/root/save_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g11/restore_configs.sh:/root/restore_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g11/restart_ospfd.sh:/root/restart_ospfd.sh -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/config/ssh_welcome_message.txt:/etc/motd:ro --log-opt max-size=1m --log-opt max-file=3 --network=bridge -p 2011:22 miniinterneteth/d_ssh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ location=/home/service/tud/mini_internet_project/platform/groups/g12
++ subnet_router_DNS 12 dns-group
++ local n_grp=12 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.12.0.2/24
+ subnet_dns=198.12.0.2/24
++ subnet_ext_sshContainer 12 sshContainer
++ local n_grp=12 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 157.0.0.22/24
+ subnet_ssh_to_grp=157.0.0.22/24
++ subnet_sshContainer_groupContainer 12 -1 -1 sshContainer
++ local n_grp=12 n_router=-1 n_layer2=-1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 158.12.0.2/16
+ subnet_ssh_to_ctn=158.12.0.2/16
+ docker run -itd --name=12_ssh --cpus=2 --pids-limit 100 --hostname=g12-proxy --cap-add=NET_ADMIN -v /home/service/tud/mini_internet_project/platform/groups/g12/goto.sh:/root/goto.sh -v /home/service/tud/mini_internet_project/platform/groups/g12/save_configs.sh:/root/save_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g12/restore_configs.sh:/root/restore_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g12/restart_ospfd.sh:/root/restart_ospfd.sh -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/config/ssh_welcome_message.txt:/etc/motd:ro --log-opt max-size=1m --log-opt max-file=3 --network=bridge -p 2012:22 miniinterneteth/d_ssh
+ docker network connect --ip=157.0.0.11 ssh_bridge 1_ssh
+ docker network connect --ip=157.0.0.12 ssh_bridge 2_ssh
+ docker exec 1_ssh ip link set dev eth1 down
+ docker exec 1_ssh ip link set dev eth1 name ssh
+ docker network connect --ip=157.0.0.14 ssh_bridge 4_ssh
+ docker exec 2_ssh ip link set dev eth1 down
+ docker exec 1_ssh ip link set dev ssh up
+ docker exec 2_ssh ip link set dev eth1 name ssh
+ docker network connect --ip=158.1.0.2 1_ssh 1_ssh
+ docker network connect --ip=157.0.0.13 ssh_bridge 3_ssh
+ docker exec 2_ssh ip link set dev ssh up
+ docker network connect --ip=158.2.0.2 2_ssh 2_ssh
+ docker network connect --ip=157.0.0.15 ssh_bridge 5_ssh
+ docker network connect --ip=157.0.0.16 ssh_bridge 6_ssh
+ docker exec 4_ssh ip link set dev eth1 down
+ docker network connect --ip=157.0.0.21 ssh_bridge 11_ssh
+ docker exec 1_ssh ip link set dev eth2 down
+ docker exec 4_ssh ip link set dev eth1 name ssh
+ docker exec 1_ssh ip link set dev eth2 name ssh_to_as
+ docker network connect --ip=157.0.0.22 ssh_bridge 12_ssh
+ docker exec 1_ssh ip link set dev ssh_to_as up
+ docker exec 4_ssh ip link set dev ssh up
+ docker exec 3_ssh ip link set dev eth1 down
+ docker exec 3_ssh ip link set dev eth1 name ssh
+ CONTAINERS+=("${group_number}_ssh")
+ (( l = 0 ))
+ (( l < n_l2_switches ))
+ (( l = 0 ))
+ (( l < n_l2_hosts ))
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ docker network connect --ip=158.4.0.2 4_ssh 4_ssh
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 0 -eq 0 ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g1/ZURI
++ subnet_sshContainer_groupContainer 1 0 -1 router
++ local n_grp=1 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.1.10.1/16
+ subnet_ssh_router=158.1.10.1/16
+ docker run -itd --dns=198.1.0.2 --name=1_ZURIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname ZURI_router -v /home/service/tud/mini_internet_project/platform/groups/g1/ZURI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g1/ZURI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g1/ZURI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g1/ZURI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=1_ssh --ip=158.1.10.1 miniinterneteth/d_router
+ docker exec 3_ssh ip link set dev ssh up
+ docker network connect --ip=158.3.0.2 3_ssh 3_ssh
+ docker exec 6_ssh ip link set dev eth1 down
+ docker exec 5_ssh ip link set dev eth1 down
+ docker exec 2_ssh ip link set dev eth2 down
+ docker exec 2_ssh ip link set dev eth2 name ssh_to_as
+ docker exec 6_ssh ip link set dev eth1 name ssh
+ docker exec 5_ssh ip link set dev eth1 name ssh
+ docker exec 4_ssh ip link set dev eth2 down
+ docker exec 6_ssh ip link set dev ssh up
+ docker exec 2_ssh ip link set dev ssh_to_as up
+ docker exec 4_ssh ip link set dev eth2 name ssh_to_as
+ docker exec 5_ssh ip link set dev ssh up
+ docker network connect --ip=158.6.0.2 6_ssh 6_ssh
+ CONTAINERS+=("${group_number}_ssh")
+ (( l = 0 ))
+ (( l < n_l2_switches ))
+ (( l = 0 ))
+ (( l < n_l2_hosts ))
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 0 -eq 0 ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g2/ZURI
++ subnet_sshContainer_groupContainer 2 0 -1 router
++ local n_grp=2 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.2.10.1/16
+ subnet_ssh_router=158.2.10.1/16
+ docker run -itd --dns=198.2.0.2 --name=2_ZURIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname ZURI_router -v /home/service/tud/mini_internet_project/platform/groups/g2/ZURI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g2/ZURI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g2/ZURI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g2/ZURI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=2_ssh --ip=158.2.10.1 miniinterneteth/d_router
+ docker network connect --ip=158.5.0.2 5_ssh 5_ssh
+ docker exec 4_ssh ip link set dev ssh_to_as up
+ docker exec 11_ssh ip link set dev eth1 down
+ docker exec 3_ssh ip link set dev eth2 down
+ docker exec 12_ssh ip link set dev eth1 down
+ CONTAINERS+=("${group_number}_ssh")
+ (( l = 0 ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCN
+ sname=S1
+ docker exec 11_ssh ip link set dev eth1 name ssh
++ subnet_sshContainer_groupContainer 4 -1 0 switch
++ local n_grp=4 n_router=-1 n_layer2=0 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.4.100.3/16
+ subnet_ssh_switch=158.4.100.3/16
+ docker run -itd --dns=198.4.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S1 --name=4_L2_DCN_S1 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.100.3 miniinterneteth/d_switch
+ docker exec 3_ssh ip link set dev eth2 name ssh_to_as
+ docker exec 12_ssh ip link set dev eth1 name ssh
+ docker exec 3_ssh ip link set dev ssh_to_as up
+ docker exec 11_ssh ip link set dev ssh up
+ docker exec 12_ssh ip link set dev ssh up
+ CONTAINERS+=("${group_number}_ssh")
+ (( l = 0 ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 3 -1 0 switch
++ local n_grp=3 n_router=-1 n_layer2=0 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.3.100.3/16
+ subnet_ssh_switch=158.3.100.3/16
+ docker run -itd --dns=198.3.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S1 --name=3_L2_DCN_S1 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.100.3 miniinterneteth/d_switch
+ docker network connect --ip=158.11.0.2 11_ssh 11_ssh
+ docker network connect --ip=158.12.0.2 12_ssh 12_ssh
+ docker exec 5_ssh ip link set dev eth2 down
+ docker exec 1_ZURIrouter ip link set dev eth0 down
+ docker exec 6_ssh ip link set dev eth2 down
+ docker exec 5_ssh ip link set dev eth2 name ssh_to_as
+ docker exec 1_ZURIrouter ip link set dev eth0 name ssh
+ docker exec 6_ssh ip link set dev eth2 name ssh_to_as
+ docker exec 5_ssh ip link set dev ssh_to_as up
+ docker exec 1_ZURIrouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}_ssh")
+ (( l = 0 ))
+ (( l < n_l2_switches ))
+ (( l = 0 ))
+ (( l < n_l2_hosts ))
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ docker exec 6_ssh ip link set dev ssh_to_as up
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 0 -eq 0 ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g5/ZURI
++ subnet_sshContainer_groupContainer 5 0 -1 router
++ local n_grp=5 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.5.10.1/16
+ subnet_ssh_router=158.5.10.1/16
+ docker run -itd --dns=198.5.0.2 --name=5_ZURIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname ZURI_router -v /home/service/tud/mini_internet_project/platform/groups/g5/ZURI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g5/ZURI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g5/ZURI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g5/ZURI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=5_ssh --ip=158.5.10.1 miniinterneteth/d_router
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
++ subnet_sshContainer_groupContainer 1 0 -1 L3-host
++ local n_grp=1 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.1.10.2/16
+ subnet_ssh_host=158.1.10.2/16
+ container_name=1_ZURIhost0
+ additional_args=()
+ net=none
+ [[ routinator == *\k\r\i\l\l* ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ ROUTINATOR_CONTAINERS+=("${group_number} ${container_name}")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${rpki_location}/tals:/root/.rpki-cache/tals:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions.json:/root/rpki_exceptions.json")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json")
+ docker run -itd --dns=198.1.0.2 --name=1_ZURIhost0 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host0 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/root/.rpki-cache/tals:ro -v /home/service/tud/mini_internet_project/platform/groups/g1/rpki_exceptions.json:/root/rpki_exceptions.json -v /home/service/tud/mini_internet_project/platform/groups/g1/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json --network=1_ssh --ip=158.1.10.2 miniinterneteth/d_routinator
+ CONTAINERS+=("${group_number}_ssh")
+ (( l = 0 ))
+ (( l < n_l2_switches ))
+ (( l = 0 ))
+ (( l < n_l2_hosts ))
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 0 -eq 0 ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g6/ZURI
++ subnet_sshContainer_groupContainer 6 0 -1 router
++ local n_grp=6 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.6.10.1/16
+ subnet_ssh_router=158.6.10.1/16
+ docker run -itd --dns=198.6.0.2 --name=6_ZURIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname ZURI_router -v /home/service/tud/mini_internet_project/platform/groups/g6/ZURI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g6/ZURI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g6/ZURI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g6/ZURI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=6_ssh --ip=158.6.10.1 miniinterneteth/d_router
+ docker exec 11_ssh ip link set dev eth2 down
+ docker exec 12_ssh ip link set dev eth2 down
+ docker exec 4_L2_DCN_S1 ip link set dev eth0 down
+ docker exec 12_ssh ip link set dev eth2 name ssh_to_as
+ docker exec 4_L2_DCN_S1 ip link set dev eth0 name ssh
+ docker exec 11_ssh ip link set dev eth2 name ssh_to_as
+ docker exec 2_ZURIrouter ip link set dev eth0 down
+ docker exec 12_ssh ip link set dev ssh_to_as up
+ docker exec 11_ssh ip link set dev ssh_to_as up
+ docker exec 4_L2_DCN_S1 ip link set dev ssh up
+ CONTAINERS+=("${group_number}_ssh")
+ (( l = 0 ))
+ (( l < n_l2_switches ))
+ (( l = 0 ))
+ (( l < n_l2_hosts ))
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ docker exec 2_ZURIrouter ip link set dev eth0 name ssh
+ dname=miniinterneteth/d_routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 0 -eq 0 ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g12/ZURI
++ subnet_sshContainer_groupContainer 12 0 -1 router
++ local n_grp=12 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.12.10.1/16
+ subnet_ssh_router=158.12.10.1/16
+ docker run -itd --dns=198.12.0.2 --name=12_ZURIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname ZURI_router -v /home/service/tud/mini_internet_project/platform/groups/g12/ZURI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g12/ZURI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g12/ZURI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g12/ZURI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=12_ssh --ip=158.12.10.1 miniinterneteth/d_router
+ CONTAINERS+=("${group_number}_ssh")
+ (( l = 0 ))
+ (( l < n_l2_switches ))
+ (( l = 0 ))
+ (( l < n_l2_hosts ))
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ cut -d : -f 2
++ echo routinator:miniinterneteth/d_routinator
+ dname=miniinterneteth/d_routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 0 -eq 0 ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g11/ZURI
++ subnet_sshContainer_groupContainer 11 0 -1 router
++ local n_grp=11 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.11.10.1/16
+ subnet_ssh_router=158.11.10.1/16
+ docker run -itd --dns=198.11.0.2 --name=11_ZURIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname ZURI_router -v /home/service/tud/mini_internet_project/platform/groups/g11/ZURI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g11/ZURI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g11/ZURI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g11/ZURI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=11_ssh --ip=158.11.10.1 miniinterneteth/d_router
+ docker exec 2_ZURIrouter ip link set dev ssh up
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 4 -1 1 switch
++ local n_grp=4 n_router=-1 n_layer2=1 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.4.100.4/16
+ subnet_ssh_switch=158.4.100.4/16
+ docker run -itd --dns=198.4.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S2 --name=4_L2_DCN_S2 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.100.4 miniinterneteth/d_switch
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
++ subnet_sshContainer_groupContainer 2 0 -1 L3-host
++ local n_grp=2 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.2.10.2/16
+ subnet_ssh_host=158.2.10.2/16
+ container_name=2_ZURIhost0
+ additional_args=()
+ net=none
+ [[ routinator == *\k\r\i\l\l* ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ ROUTINATOR_CONTAINERS+=("${group_number} ${container_name}")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${rpki_location}/tals:/root/.rpki-cache/tals:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions.json:/root/rpki_exceptions.json")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json")
+ docker run -itd --dns=198.2.0.2 --name=2_ZURIhost0 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host0 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/root/.rpki-cache/tals:ro -v /home/service/tud/mini_internet_project/platform/groups/g2/rpki_exceptions.json:/root/rpki_exceptions.json -v /home/service/tud/mini_internet_project/platform/groups/g2/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json --network=2_ssh --ip=158.2.10.2 miniinterneteth/d_routinator
+ docker exec 1_ZURIhost0 ip link set dev eth0 down
+ docker exec 1_ZURIhost0 ip link set dev eth0 name ssh
+ docker exec 3_L2_DCN_S1 ip link set dev eth0 down
+ docker exec 3_L2_DCN_S1 ip link set dev eth0 name ssh
+ docker exec 1_ZURIhost0 ip link set dev ssh up
+ docker exec 5_ZURIrouter ip link set dev eth0 down
+ [[ routinator == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=krill:miniinterneteth/d_krill
++ echo krill:miniinterneteth/d_krill
++ cut -d : -f 1
+ htype=krill
++ echo krill:miniinterneteth/d_krill
++ cut -d : -f 2
+ dname=miniinterneteth/d_krill
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 1 -eq 0 ]]
+ [[ krill:miniinterneteth/d_krill != \N\/\A ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=1
++ subnet_sshContainer_groupContainer 1 1 -1 L3-host
++ local n_grp=1 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.1.11.2/16
+ subnet_ssh_host=158.1.11.2/16
+ container_name=1_ZURIhost1
+ additional_args=()
+ net=none
+ [[ krill == *\k\r\i\l\l* ]]
+ KRILL_CONTAINERS+=("${group_number} ${container_name}")
+ krill_auth_token=24b18e58-d703-433c-a1c5-bf938971f18c
+ additional_args+=("--add-host" "rpki-server.group${group_number}:127.0.0.1")
+ additional_args+=("-e" "KRILL_CLI_TOKEN=${krill_auth_token}")
+ additional_args+=("-v" "${rpki_location}/tals:/var/krill/tals")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/krill/data:/var/krill/data")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/krill/krill.includesprivatekey.pem:/etc/ssl/certs/cert.includesprivatekey.pem:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/krill/krill.crt:/var/krill/data/ssl/cert.pem:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/krill/krill.key:/var/krill/data/ssl/key.pem:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/krill/krill.conf:/var/krill/krill.conf:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/krill/setup.sh:/home/setup.sh:ro")
+ additional_args+=("-v" "${CONFIG_DIRECTORY}/roas:/var/krill/roas:ro")
+ additional_args+=("-p" "3080:3080")
+ additional_args+=("-l" "traefik.enable=true")
+ additional_args+=("-l" "traefik.http.routers.krill.entrypoints=krill")
+ docker run -itd --dns=198.1.0.2 --name=1_ZURIhost1 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --add-host rpki-server.group1:127.0.0.1 -e KRILL_CLI_TOKEN=24b18e58-d703-433c-a1c5-bf938971f18c -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/var/krill/tals -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/g1/krill/data:/var/krill/data -v /home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.includesprivatekey.pem:/etc/ssl/certs/cert.includesprivatekey.pem:ro -v /home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.crt:/var/krill/data/ssl/cert.pem:ro -v /home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.key:/var/krill/data/ssl/key.pem:ro -v /home/service/tud/mini_internet_project/platform/groups/g1/krill/krill.conf:/var/krill/krill.conf:ro -v /home/service/tud/mini_internet_project/platform/groups/g1/krill/setup.sh:/home/setup.sh:ro -v /home/service/tud/mini_internet_project/platform/config/roas:/var/krill/roas:ro -p 3080:3080 -l traefik.enable=true -l traefik.http.routers.krill.entrypoints=krill --network=1_ssh --ip=158.1.11.2 miniinterneteth/d_krill
+ docker exec 3_L2_DCN_S1 ip link set dev ssh up
+ docker exec 5_ZURIrouter ip link set dev eth0 name ssh
+ docker exec 6_ZURIrouter ip link set dev eth0 down
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 3 -1 1 switch
++ local n_grp=3 n_router=-1 n_layer2=1 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.3.100.4/16
+ subnet_ssh_switch=158.3.100.4/16
+ docker run -itd --dns=198.3.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S2 --name=3_L2_DCN_S2 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.100.4 miniinterneteth/d_switch
+ docker exec 5_ZURIrouter ip link set dev ssh up
+ docker exec 6_ZURIrouter ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
++ subnet_sshContainer_groupContainer 5 0 -1 L3-host
++ local n_grp=5 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.5.10.2/16
+ subnet_ssh_host=158.5.10.2/16
+ container_name=5_ZURIhost0
+ additional_args=()
+ net=none
+ [[ routinator == *\k\r\i\l\l* ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ ROUTINATOR_CONTAINERS+=("${group_number} ${container_name}")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${rpki_location}/tals:/root/.rpki-cache/tals:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions.json:/root/rpki_exceptions.json")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json")
+ docker run -itd --dns=198.5.0.2 --name=5_ZURIhost0 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host0 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/root/.rpki-cache/tals:ro -v /home/service/tud/mini_internet_project/platform/groups/g5/rpki_exceptions.json:/root/rpki_exceptions.json -v /home/service/tud/mini_internet_project/platform/groups/g5/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json --network=5_ssh --ip=158.5.10.2 miniinterneteth/d_routinator
+ docker exec 6_ZURIrouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
++ subnet_sshContainer_groupContainer 6 0 -1 L3-host
++ local n_grp=6 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.6.10.2/16
+ subnet_ssh_host=158.6.10.2/16
+ container_name=6_ZURIhost0
+ additional_args=()
+ net=none
+ [[ routinator == *\k\r\i\l\l* ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ ROUTINATOR_CONTAINERS+=("${group_number} ${container_name}")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${rpki_location}/tals:/root/.rpki-cache/tals:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions.json:/root/rpki_exceptions.json")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json")
+ docker run -itd --dns=198.6.0.2 --name=6_ZURIhost0 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host0 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/root/.rpki-cache/tals:ro -v /home/service/tud/mini_internet_project/platform/groups/g6/rpki_exceptions.json:/root/rpki_exceptions.json -v /home/service/tud/mini_internet_project/platform/groups/g6/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json --network=6_ssh --ip=158.6.10.2 miniinterneteth/d_routinator
+ docker exec 11_ZURIrouter ip link set dev eth0 down
+ docker exec 4_L2_DCN_S2 ip link set dev eth0 down
+ docker exec 11_ZURIrouter ip link set dev eth0 name ssh
+ docker exec 4_L2_DCN_S2 ip link set dev eth0 name ssh
+ docker exec 12_ZURIrouter ip link set dev eth0 down
+ docker exec 11_ZURIrouter ip link set dev ssh up
+ docker exec 12_ZURIrouter ip link set dev eth0 name ssh
+ docker exec 4_L2_DCN_S2 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
++ subnet_sshContainer_groupContainer 11 0 -1 L3-host
++ local n_grp=11 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.11.10.2/16
+ subnet_ssh_host=158.11.10.2/16
+ container_name=11_ZURIhost0
+ additional_args=()
+ net=none
+ [[ routinator == *\k\r\i\l\l* ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ ROUTINATOR_CONTAINERS+=("${group_number} ${container_name}")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${rpki_location}/tals:/root/.rpki-cache/tals:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions.json:/root/rpki_exceptions.json")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json")
+ docker run -itd --dns=198.11.0.2 --name=11_ZURIhost0 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host0 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/root/.rpki-cache/tals:ro -v /home/service/tud/mini_internet_project/platform/groups/g11/rpki_exceptions.json:/root/rpki_exceptions.json -v /home/service/tud/mini_internet_project/platform/groups/g11/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json --network=11_ssh --ip=158.11.10.2 miniinterneteth/d_routinator
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 4 -1 2 switch
++ local n_grp=4 n_router=-1 n_layer2=2 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.4.100.5/16
+ subnet_ssh_switch=158.4.100.5/16
+ docker run -itd --dns=198.4.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S3 --name=4_L2_DCN_S3 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.100.5 miniinterneteth/d_switch
+ docker exec 12_ZURIrouter ip link set dev ssh up
+ docker exec 2_ZURIhost0 ip link set dev eth0 down
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
++ subnet_sshContainer_groupContainer 12 0 -1 L3-host
++ local n_grp=12 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.12.10.2/16
+ subnet_ssh_host=158.12.10.2/16
+ container_name=12_ZURIhost0
+ additional_args=()
+ net=none
+ [[ routinator == *\k\r\i\l\l* ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ ROUTINATOR_CONTAINERS+=("${group_number} ${container_name}")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${rpki_location}/tals:/root/.rpki-cache/tals:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions.json:/root/rpki_exceptions.json")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json")
+ docker run -itd --dns=198.12.0.2 --name=12_ZURIhost0 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host0 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/root/.rpki-cache/tals:ro -v /home/service/tud/mini_internet_project/platform/groups/g12/rpki_exceptions.json:/root/rpki_exceptions.json -v /home/service/tud/mini_internet_project/platform/groups/g12/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json --network=12_ssh --ip=158.12.10.2 miniinterneteth/d_routinator
+ docker exec 2_ZURIhost0 ip link set dev eth0 name ssh
+ docker exec 2_ZURIhost0 ip link set dev ssh up
+ [[ routinator == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 1 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 2 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 3 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ printf '%b\n' '2 2_ZURIhost0'
+ printf '%b\n'
+ printf '%b\n' 2_ssh 2_ZURIrouter 2_ZURIhost0
+ echo 'Group 2: 3 containers created!'
Group 2: 3 containers created!
+ (( k++ ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=13
+ group_as=AS
+ group_router_config=l3_routers.txt
+ group_layer2_switches=l2_switches.txt
+ group_layer2_hosts=l2_hosts.txt
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
++ jobs -r -p
+ ssh_to_ctn_bname=13_ssh
++ wc -l
++ subnet_sshContainer_groupContainer 13 -1 -1 docker
++ local n_grp=13 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.13.0.0/16
+ subnet_ssh_to_ctn=158.13.0.0/16
+ docker network create --driver bridge --internal --subnet=158.13.0.0/16 13_ssh
+ [[ 8 -ge 8 ]]
+ echo 'Current number of running tasks exceeds threshold (8). Waiting...'
Current number of running tasks exceeds threshold (8). Waiting...
+ wait -n
+ docker exec 3_L2_DCN_S2 ip link set dev eth0 down
+ docker exec 3_L2_DCN_S2 ip link set dev eth0 name ssh
+ docker exec 3_L2_DCN_S2 ip link set dev ssh up
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ n_routers=8
+ n_l2_switches=4
+ n_l2_hosts=11
+ location=/home/service/tud/mini_internet_project/platform/groups/g13
++ subnet_router_DNS 13 dns-group
++ local n_grp=13 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.13.0.2/24
+ subnet_dns=198.13.0.2/24
++ subnet_ext_sshContainer 13 sshContainer
++ local n_grp=13 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 157.0.0.23/24
+ subnet_ssh_to_grp=157.0.0.23/24
++ subnet_sshContainer_groupContainer 13 -1 -1 sshContainer
++ local n_grp=13 n_router=-1 n_layer2=-1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 158.13.0.2/16
+ subnet_ssh_to_ctn=158.13.0.2/16
+ docker run -itd --name=13_ssh --cpus=2 --pids-limit 100 --hostname=g13-proxy --cap-add=NET_ADMIN -v /home/service/tud/mini_internet_project/platform/groups/g13/goto.sh:/root/goto.sh -v /home/service/tud/mini_internet_project/platform/groups/g13/save_configs.sh:/root/save_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g13/restore_configs.sh:/root/restore_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g13/restart_ospfd.sh:/root/restart_ospfd.sh -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/config/ssh_welcome_message.txt:/etc/motd:ro --log-opt max-size=1m --log-opt max-file=3 --network=bridge -p 2013:22 miniinterneteth/d_ssh
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 3 -1 2 switch
++ local n_grp=3 n_router=-1 n_layer2=2 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.3.100.5/16
+ subnet_ssh_switch=158.3.100.5/16
+ docker run -itd --dns=198.3.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S3 --name=3_L2_DCN_S3 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.100.5 miniinterneteth/d_switch
+ docker exec 1_ZURIhost1 ip link set dev eth0 down
+ docker exec 1_ZURIhost1 ip link set dev eth0 name ssh
+ docker exec 1_ZURIhost1 ip link set dev ssh up
+ [[ krill == *\k\r\i\l\l* ]]
+ docker network connect bridge 1_ZURIhost1
+ docker exec 6_ZURIhost0 ip link set dev eth0 down
+ docker exec 6_ZURIhost0 ip link set dev eth0 name ssh
+ docker exec 5_ZURIhost0 ip link set dev eth0 down
+ docker exec 6_ZURIhost0 ip link set dev ssh up
+ docker exec 5_ZURIhost0 ip link set dev eth0 name ssh
+ [[ routinator == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 1 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 2 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 3 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ printf '%b\n' '6 6_ZURIhost0'
+ printf '%b\n'
+ printf '%b\n' 6_ssh 6_ZURIrouter 6_ZURIhost0
+ echo 'Group 6: 3 containers created!'
Group 6: 3 containers created!
+ (( k++ ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=14
+ group_as=AS
+ group_router_config=l3_routers.txt
+ group_layer2_switches=l2_switches.txt
+ group_layer2_hosts=l2_hosts.txt
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=14_ssh
++ jobs -r -p
++ wc -l
++ subnet_sshContainer_groupContainer 14 -1 -1 docker
++ local n_grp=14 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.14.0.0/16
+ subnet_ssh_to_ctn=158.14.0.0/16
+ docker network create --driver bridge --internal --subnet=158.14.0.0/16 14_ssh
+ [[ 8 -ge 8 ]]
+ echo 'Current number of running tasks exceeds threshold (8). Waiting...'
Current number of running tasks exceeds threshold (8). Waiting...
+ wait -n
+ docker exec 5_ZURIhost0 ip link set dev ssh up
+ [[ routinator == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 1 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 2 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 3 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ printf '%b\n' '5 5_ZURIhost0'
+ printf '%b\n'
+ printf '%b\n' 5_ssh 5_ZURIrouter 5_ZURIhost0
+ echo 'Group 5: 3 containers created!'
Group 5: 3 containers created!
+ (( k++ ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=15
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=15_ssh
++ jobs -r -p
++ wc -l
++ subnet_sshContainer_groupContainer 15 -1 -1 docker
++ local n_grp=15 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.15.0.0/16
+ subnet_ssh_to_ctn=158.15.0.0/16
+ docker network create --driver bridge --internal --subnet=158.15.0.0/16 15_ssh
+ [[ 8 -ge 8 ]]
+ echo 'Current number of running tasks exceeds threshold (8). Waiting...'
Current number of running tasks exceeds threshold (8). Waiting...
+ wait -n
+ docker exec 4_L2_DCN_S3 ip link set dev eth0 down
+ docker exec 4_L2_DCN_S3 ip link set dev eth0 name ssh
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ n_routers=8
+ n_l2_switches=4
+ n_l2_hosts=11
+ location=/home/service/tud/mini_internet_project/platform/groups/g14
++ subnet_router_DNS 14 dns-group
++ local n_grp=14 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.14.0.2/24
+ subnet_dns=198.14.0.2/24
++ subnet_ext_sshContainer 14 sshContainer
++ local n_grp=14 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 157.0.0.24/24
+ subnet_ssh_to_grp=157.0.0.24/24
++ subnet_sshContainer_groupContainer 14 -1 -1 sshContainer
++ local n_grp=14 n_router=-1 n_layer2=-1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 158.14.0.2/16
+ subnet_ssh_to_ctn=158.14.0.2/16
+ docker run -itd --name=14_ssh --cpus=2 --pids-limit 100 --hostname=g14-proxy --cap-add=NET_ADMIN -v /home/service/tud/mini_internet_project/platform/groups/g14/goto.sh:/root/goto.sh -v /home/service/tud/mini_internet_project/platform/groups/g14/save_configs.sh:/root/save_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g14/restore_configs.sh:/root/restore_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g14/restart_ospfd.sh:/root/restart_ospfd.sh -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/config/ssh_welcome_message.txt:/etc/motd:ro --log-opt max-size=1m --log-opt max-file=3 --network=bridge -p 2014:22 miniinterneteth/d_ssh
+ docker exec 4_L2_DCN_S3 ip link set dev ssh up
+ docker exec 11_ZURIhost0 ip link set dev eth0 down
+ docker exec 12_ZURIhost0 ip link set dev eth0 down
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCS
+ sname=S4
++ subnet_sshContainer_groupContainer 4 -1 3 switch
++ local n_grp=4 n_router=-1 n_layer2=3 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.4.100.6/16
+ subnet_ssh_switch=158.4.100.6/16
+ docker run -itd --dns=198.4.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S4 --name=4_L2_DCS_S4 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.100.6 miniinterneteth/d_switch
+ docker exec 12_ZURIhost0 ip link set dev eth0 name ssh
+ docker exec 11_ZURIhost0 ip link set dev eth0 name ssh
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ cut -d : -f 2
++ echo N/A
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 2 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 3 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ printf '%b\n' '1 1_ZURIhost0'
+ printf '%b\n' '1 1_ZURIhost1'
+ printf '%b\n' 1_ssh 1_ZURIrouter 1_ZURIhost0 1_ZURIhost1
+ echo 'Group 1: 4 containers created!'
Group 1: 4 containers created!
+ (( k++ ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=16
+ group_as=AS
+ group_router_config=l3_routers_tier1_and_stub.txt
+ group_layer2_switches=empty.txt
+ group_layer2_hosts=empty.txt
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=16_ssh
++ subnet_sshContainer_groupContainer 16 -1 -1 docker
++ local n_grp=16 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.16.0.0/16
+ subnet_ssh_to_ctn=158.16.0.0/16
++ wc -l
+ docker network create --driver bridge --internal --subnet=158.16.0.0/16 16_ssh
++ jobs -r -p
+ [[ 8 -ge 8 ]]
+ echo 'Current number of running tasks exceeds threshold (8). Waiting...'
Current number of running tasks exceeds threshold (8). Waiting...
+ wait -n
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ location=/home/service/tud/mini_internet_project/platform/groups/g15
++ subnet_router_DNS 15 dns-group
++ local n_grp=15 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.15.0.2/24
+ subnet_dns=198.15.0.2/24
++ subnet_ext_sshContainer 15 sshContainer
++ local n_grp=15 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 157.0.0.25/24
+ subnet_ssh_to_grp=157.0.0.25/24
++ subnet_sshContainer_groupContainer 15 -1 -1 sshContainer
++ local n_grp=15 n_router=-1 n_layer2=-1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 158.15.0.2/16
+ subnet_ssh_to_ctn=158.15.0.2/16
+ docker run -itd --name=15_ssh --cpus=2 --pids-limit 100 --hostname=g15-proxy --cap-add=NET_ADMIN -v /home/service/tud/mini_internet_project/platform/groups/g15/goto.sh:/root/goto.sh -v /home/service/tud/mini_internet_project/platform/groups/g15/save_configs.sh:/root/save_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g15/restore_configs.sh:/root/restore_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g15/restart_ospfd.sh:/root/restart_ospfd.sh -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/config/ssh_welcome_message.txt:/etc/motd:ro --log-opt max-size=1m --log-opt max-file=3 --network=bridge -p 2015:22 miniinterneteth/d_ssh
+ docker network connect --ip=157.0.0.23 ssh_bridge 13_ssh
+ docker exec 12_ZURIhost0 ip link set dev ssh up
+ docker exec 11_ZURIhost0 ip link set dev ssh up
+ [[ routinator == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ cut -d : -f 1
++ echo N/A
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 1 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 2 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 3 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ printf '%b\n' '12 12_ZURIhost0'
+ printf '%b\n'
+ printf '%b\n' 12_ssh 12_ZURIrouter 12_ZURIhost0
+ echo 'Group 12: 3 containers created!'
Group 12: 3 containers created!
+ (( k++ ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=80
+ group_as=IXP
+ group_router_config=N/A
+ group_layer2_switches=N/A
+ group_layer2_hosts=N/A
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=80_ssh
++ subnet_sshContainer_groupContainer 80 -1 -1 docker
++ jobs -r -p
++ local n_grp=80 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.80.0.0/16
++ wc -l
+ subnet_ssh_to_ctn=158.80.0.0/16
+ docker network create --driver bridge --internal --subnet=158.80.0.0/16 80_ssh
+ [[ 8 -ge 8 ]]
+ echo 'Current number of running tasks exceeds threshold (8). Waiting...'
Current number of running tasks exceeds threshold (8). Waiting...
+ wait -n
+ docker exec 3_L2_DCN_S3 ip link set dev eth0 down
+ [[ routinator == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 1 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 2 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 3 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ printf '%b\n' '11 11_ZURIhost0'
+ printf '%b\n'
+ printf '%b\n' 11_ssh 11_ZURIrouter 11_ZURIhost0
+ echo 'Group 11: 3 containers created!'
Group 11: 3 containers created!
+ (( k++ ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=81
+ group_as=IXP
+ group_router_config=N/A
+ group_layer2_switches=N/A
+ group_layer2_hosts=N/A
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=81_ssh
++ jobs -r -p
++ wc -l
++ subnet_sshContainer_groupContainer 81 -1 -1 docker
++ local n_grp=81 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.81.0.0/16
+ subnet_ssh_to_ctn=158.81.0.0/16
+ docker network create --driver bridge --internal --subnet=158.81.0.0/16 81_ssh
+ [[ 8 -ge 8 ]]
+ echo 'Current number of running tasks exceeds threshold (8). Waiting...'
Current number of running tasks exceeds threshold (8). Waiting...
+ wait -n
+ docker exec 3_L2_DCN_S3 ip link set dev eth0 name ssh
+ docker exec 3_L2_DCN_S3 ip link set dev ssh up
+ '[' AS '!=' IXP ']'
+ readarray routers
+ readarray l2_switches
+ readarray l2_hosts
+ n_routers=4
+ n_l2_switches=0
+ n_l2_hosts=0
+ location=/home/service/tud/mini_internet_project/platform/groups/g16
++ subnet_router_DNS 16 dns-group
++ local n_grp=16 device=dns-group
++ '[' dns-group = group ']'
++ '[' dns-group = measurement ']'
++ '[' dns-group = dns-group ']'
++ echo 198.16.0.2/24
+ subnet_dns=198.16.0.2/24
++ subnet_ext_sshContainer 16 sshContainer
++ local n_grp=16 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 157.0.0.26/24
+ subnet_ssh_to_grp=157.0.0.26/24
++ subnet_sshContainer_groupContainer 16 -1 -1 sshContainer
++ local n_grp=16 n_router=-1 n_layer2=-1 device=sshContainer
++ '[' sshContainer = sshContainer ']'
++ echo 158.16.0.2/16
+ subnet_ssh_to_ctn=158.16.0.2/16
+ docker run -itd --name=16_ssh --cpus=2 --pids-limit 100 --hostname=g16-proxy --cap-add=NET_ADMIN -v /home/service/tud/mini_internet_project/platform/groups/g16/goto.sh:/root/goto.sh -v /home/service/tud/mini_internet_project/platform/groups/g16/save_configs.sh:/root/save_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g16/restore_configs.sh:/root/restore_configs.sh -v /home/service/tud/mini_internet_project/platform/groups/g16/restart_ospfd.sh:/root/restart_ospfd.sh -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/config/ssh_welcome_message.txt:/etc/motd:ro --log-opt max-size=1m --log-opt max-file=3 --network=bridge -p 2016:22 miniinterneteth/d_ssh
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCS
+ sname=S4
++ subnet_sshContainer_groupContainer 3 -1 3 switch
++ local n_grp=3 n_router=-1 n_layer2=3 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.3.100.6/16
+ subnet_ssh_switch=158.3.100.6/16
+ docker run -itd --dns=198.3.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S4 --name=3_L2_DCS_S4 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.100.6 miniinterneteth/d_switch
+ '[' IXP '!=' IXP ']'
+ '[' IXP = IXP ']'
+ location=/home/service/tud/mini_internet_project/platform/groups/g80
+ docker run -itd --net=none --name=80_IXP --pids-limit 200 --hostname 80_IXP -v /home/service/tud/mini_internet_project/platform/groups/g80/daemons:/etc/quagga/daemons --privileged --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/groups/g80/looking_glass.txt:/home/looking_glass.txt --log-opt max-size=1m --log-opt max-file=3 miniinterneteth/d_ixp
+ '[' IXP '!=' IXP ']'
+ '[' IXP = IXP ']'
+ location=/home/service/tud/mini_internet_project/platform/groups/g81
+ docker run -itd --net=none --name=81_IXP --pids-limit 200 --hostname 81_IXP -v /home/service/tud/mini_internet_project/platform/groups/g81/daemons:/etc/quagga/daemons --privileged --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/groups/g81/looking_glass.txt:/home/looking_glass.txt --log-opt max-size=1m --log-opt max-file=3 miniinterneteth/d_ixp
+ docker exec 13_ssh ip link set dev eth1 down
+ docker exec 13_ssh ip link set dev eth1 name ssh
+ docker exec 13_ssh ip link set dev ssh up
+ docker network connect --ip=158.13.0.2 13_ssh 13_ssh
+ docker network connect --ip=157.0.0.24 ssh_bridge 14_ssh
+ CONTAINERS+=("${group_number}""_IXP")
+ printf '%b\n'
+ printf '%b\n'
+ printf '%b\n' 80_IXP
+ echo 'Group 80: 1 containers created!'
Group 80: 1 containers created!
+ (( k++ ))
+ (( k < group_numbers ))
+ wait_if_n_tasks_are_running
+ group_k=(${groups[$k]})
+ group_number=82
+ group_as=IXP
+ group_router_config=N/A
+ group_layer2_switches=N/A
+ group_layer2_hosts=N/A
+ declare -a CONTAINERS
+ declare -a KRILL_CONTAINERS
+ declare -a ROUTINATOR_CONTAINERS
+ ssh_to_ctn_bname=82_ssh
++ jobs -r -p
++ subnet_sshContainer_groupContainer 82 -1 -1 docker
++ local n_grp=82 n_router=-1 n_layer2=-1 device=docker
++ '[' docker = sshContainer ']'
++ '[' docker = MEASUREMENT ']'
++ '[' docker = router ']'
++ wc -l
++ '[' docker = L3-host ']'
++ '[' docker = switch ']'
++ '[' docker = L2-host ']'
++ '[' docker = bridge ']'
++ '[' docker = docker ']'
++ echo 158.82.0.0/16
+ subnet_ssh_to_ctn=158.82.0.0/16
+ docker network create --driver bridge --internal --subnet=158.82.0.0/16 82_ssh
+ [[ 8 -ge 8 ]]
+ echo 'Current number of running tasks exceeds threshold (8). Waiting...'
Current number of running tasks exceeds threshold (8). Waiting...
+ wait -n
+ docker exec 13_ssh ip link set dev eth2 down
+ docker exec 13_ssh ip link set dev eth2 name ssh_to_as
+ '[' IXP '!=' IXP ']'
+ docker network connect --ip=157.0.0.25 ssh_bridge 15_ssh
+ '[' IXP = IXP ']'
+ location=/home/service/tud/mini_internet_project/platform/groups/g82
+ docker run -itd --net=none --name=82_IXP --pids-limit 200 --hostname 82_IXP -v /home/service/tud/mini_internet_project/platform/groups/g82/daemons:/etc/quagga/daemons --privileged --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /home/service/tud/mini_internet_project/platform/groups/g82/looking_glass.txt:/home/looking_glass.txt --log-opt max-size=1m --log-opt max-file=3 miniinterneteth/d_ixp
+ docker exec 14_ssh ip link set dev eth1 down
+ docker exec 4_L2_DCS_S4 ip link set dev eth0 down
+ docker exec 13_ssh ip link set dev ssh_to_as up
+ docker exec 14_ssh ip link set dev eth1 name ssh
+ docker exec 4_L2_DCS_S4 ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}_ssh")
+ (( l = 0 ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 13 -1 0 switch
++ local n_grp=13 n_router=-1 n_layer2=0 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.13.100.3/16
+ subnet_ssh_switch=158.13.100.3/16
+ docker run -itd --dns=198.13.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S1 --name=13_L2_DCN_S1 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.100.3 miniinterneteth/d_switch
+ docker exec 14_ssh ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_IXP")
+ printf '%b\n'
+ printf '%b\n'
+ printf '%b\n' 81_IXP
+ echo 'Group 81: 1 containers created!'
Group 81: 1 containers created!
+ (( k++ ))
+ (( k < group_numbers ))
+ wait
+ docker exec 4_L2_DCS_S4 ip link set dev ssh up
+ docker network connect --ip=158.14.0.2 14_ssh 14_ssh
+ docker network connect --ip=157.0.0.26 ssh_bridge 16_ssh
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ (( l = 0 ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_1
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 4 -1 0 L2-host
++ local n_grp=4 n_router=-1 n_layer2=0 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.3/16
+ subnet_ssh_host=158.4.200.3/16
+ [[ FIFA_1 != vpn* ]]
+ docker run -itd --dns=198.4.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_1 --name=4_L2_DCN_FIFA_1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.200.3 miniinterneteth/d_host
+ docker exec 3_L2_DCS_S4 ip link set dev eth0 down
+ docker exec 3_L2_DCS_S4 ip link set dev eth0 name ssh
+ docker exec 15_ssh ip link set dev eth1 down
+ docker exec 3_L2_DCS_S4 ip link set dev ssh up
+ docker exec 15_ssh ip link set dev eth1 name ssh
+ docker exec 15_ssh ip link set dev ssh up
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ (( l = 0 ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_1
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 3 -1 0 L2-host
++ local n_grp=3 n_router=-1 n_layer2=0 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.3/16
+ subnet_ssh_host=158.3.200.3/16
+ [[ FIFA_1 != vpn* ]]
+ docker run -itd --dns=198.3.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_1 --name=3_L2_DCN_FIFA_1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.200.3 miniinterneteth/d_host
+ docker network connect --ip=158.15.0.2 15_ssh 15_ssh
+ docker exec 14_ssh ip link set dev eth2 down
+ docker exec 14_ssh ip link set dev eth2 name ssh_to_as
+ docker exec 16_ssh ip link set dev eth1 down
+ docker exec 14_ssh ip link set dev ssh_to_as up
+ CONTAINERS+=("${group_number}""_IXP")
+ printf '%b\n'
+ printf '%b\n'
+ printf '%b\n' 82_IXP
+ echo 'Group 82: 1 containers created!'
Group 82: 1 containers created!
+ CONTAINERS+=("${group_number}_ssh")
+ (( l = 0 ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 14 -1 0 switch
++ local n_grp=14 n_router=-1 n_layer2=0 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.14.100.3/16
+ subnet_ssh_switch=158.14.100.3/16
+ docker run -itd --dns=198.14.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S1 --name=14_L2_DCN_S1 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.100.3 miniinterneteth/d_switch
+ docker exec 16_ssh ip link set dev eth1 name ssh
+ docker exec 16_ssh ip link set dev ssh up
+ docker network connect --ip=158.16.0.2 16_ssh 16_ssh
+ docker exec 15_ssh ip link set dev eth2 down
+ docker exec 15_ssh ip link set dev eth2 name ssh_to_as
+ docker exec 15_ssh ip link set dev ssh_to_as up
+ CONTAINERS+=("${group_number}_ssh")
+ (( l = 0 ))
+ (( l < n_l2_switches ))
+ (( l = 0 ))
+ (( l < n_l2_hosts ))
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 0 -eq 0 ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g15/ZURI
++ subnet_sshContainer_groupContainer 15 0 -1 router
++ local n_grp=15 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.15.10.1/16
+ subnet_ssh_router=158.15.10.1/16
+ docker run -itd --dns=198.15.0.2 --name=15_ZURIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname ZURI_router -v /home/service/tud/mini_internet_project/platform/groups/g15/ZURI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g15/ZURI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g15/ZURI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g15/ZURI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=15_ssh --ip=158.15.10.1 miniinterneteth/d_router
+ docker exec 13_L2_DCN_S1 ip link set dev eth0 down
+ docker exec 4_L2_DCN_FIFA_1 ip link set dev eth0 down
+ docker exec 13_L2_DCN_S1 ip link set dev eth0 name ssh
+ docker exec 16_ssh ip link set dev eth2 down
+ docker exec 4_L2_DCN_FIFA_1 ip link set dev eth0 name ssh
+ docker exec 13_L2_DCN_S1 ip link set dev ssh up
+ docker exec 16_ssh ip link set dev eth2 name ssh_to_as
+ docker exec 4_L2_DCN_FIFA_1 ip link set dev ssh up
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 13 -1 1 switch
++ local n_grp=13 n_router=-1 n_layer2=1 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.13.100.4/16
+ subnet_ssh_switch=158.13.100.4/16
+ docker run -itd --dns=198.13.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S2 --name=13_L2_DCN_S2 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.100.4 miniinterneteth/d_switch
+ docker exec 16_ssh ip link set dev ssh_to_as up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_1
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 4 -1 1 L2-host
++ local n_grp=4 n_router=-1 n_layer2=1 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.4/16
+ subnet_ssh_host=158.4.200.4/16
+ [[ UEFA_1 != vpn* ]]
+ docker run -itd --dns=198.4.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_1 --name=4_L2_DCN_UEFA_1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.200.4 miniinterneteth/d_host
+ docker exec 3_L2_DCN_FIFA_1 ip link set dev eth0 down
+ CONTAINERS+=("${group_number}_ssh")
+ (( l = 0 ))
+ (( l < n_l2_switches ))
+ (( l = 0 ))
+ (( l < n_l2_hosts ))
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX_TARGET
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 0 -eq 0 ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g16/ZURI
++ subnet_sshContainer_groupContainer 16 0 -1 router
++ local n_grp=16 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.16.10.1/16
+ subnet_ssh_router=158.16.10.1/16
+ docker run -itd --dns=198.16.0.2 --name=16_ZURIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname ZURI_router -v /home/service/tud/mini_internet_project/platform/groups/g16/ZURI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g16/ZURI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g16/ZURI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g16/ZURI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=16_ssh --ip=158.16.10.1 miniinterneteth/d_router
+ docker exec 3_L2_DCN_FIFA_1 ip link set dev eth0 name ssh
+ docker exec 3_L2_DCN_FIFA_1 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_1
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 3 -1 1 L2-host
++ local n_grp=3 n_router=-1 n_layer2=1 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.4/16
+ subnet_ssh_host=158.3.200.4/16
+ [[ UEFA_1 != vpn* ]]
+ docker run -itd --dns=198.3.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_1 --name=3_L2_DCN_UEFA_1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.200.4 miniinterneteth/d_host
+ docker exec 14_L2_DCN_S1 ip link set dev eth0 down
+ docker exec 14_L2_DCN_S1 ip link set dev eth0 name ssh
+ docker exec 14_L2_DCN_S1 ip link set dev ssh up
+ docker exec 15_ZURIrouter ip link set dev eth0 down
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 14 -1 1 switch
++ local n_grp=14 n_router=-1 n_layer2=1 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.14.100.4/16
+ subnet_ssh_switch=158.14.100.4/16
+ docker run -itd --dns=198.14.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S2 --name=14_L2_DCN_S2 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.100.4 miniinterneteth/d_switch
+ docker exec 15_ZURIrouter ip link set dev eth0 name ssh
+ docker exec 15_ZURIrouter ip link set dev ssh up
+ docker exec 13_L2_DCN_S2 ip link set dev eth0 down
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
++ subnet_sshContainer_groupContainer 15 0 -1 L3-host
++ local n_grp=15 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.15.10.2/16
+ subnet_ssh_host=158.15.10.2/16
+ container_name=15_ZURIhost0
+ additional_args=()
+ net=none
+ [[ routinator == *\k\r\i\l\l* ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ ROUTINATOR_CONTAINERS+=("${group_number} ${container_name}")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${rpki_location}/tals:/root/.rpki-cache/tals:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions.json:/root/rpki_exceptions.json")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json")
+ docker run -itd --dns=198.15.0.2 --name=15_ZURIhost0 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host0 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/root/.rpki-cache/tals:ro -v /home/service/tud/mini_internet_project/platform/groups/g15/rpki_exceptions.json:/root/rpki_exceptions.json -v /home/service/tud/mini_internet_project/platform/groups/g15/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json --network=15_ssh --ip=158.15.10.2 miniinterneteth/d_routinator
+ docker exec 13_L2_DCN_S2 ip link set dev eth0 name ssh
+ docker exec 4_L2_DCN_UEFA_1 ip link set dev eth0 down
+ docker exec 13_L2_DCN_S2 ip link set dev ssh up
+ docker exec 4_L2_DCN_UEFA_1 ip link set dev eth0 name ssh
+ docker exec 4_L2_DCN_UEFA_1 ip link set dev ssh up
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 13 -1 2 switch
++ local n_grp=13 n_router=-1 n_layer2=2 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.13.100.5/16
+ subnet_ssh_switch=158.13.100.5/16
+ docker run -itd --dns=198.13.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S3 --name=13_L2_DCN_S3 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.100.5 miniinterneteth/d_switch
+ docker exec 3_L2_DCN_UEFA_1 ip link set dev eth0 down
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_1
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 4 -1 2 L2-host
++ local n_grp=4 n_router=-1 n_layer2=2 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.5/16
+ subnet_ssh_host=158.4.200.5/16
+ [[ vpn_1 != vpn* ]]
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_2
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 4 -1 3 L2-host
++ local n_grp=4 n_router=-1 n_layer2=3 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.6/16
+ subnet_ssh_host=158.4.200.6/16
+ [[ FIFA_2 != vpn* ]]
+ docker run -itd --dns=198.4.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_2 --name=4_L2_DCN_FIFA_2 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.200.6 miniinterneteth/d_host
+ docker exec 3_L2_DCN_UEFA_1 ip link set dev eth0 name ssh
+ docker exec 16_ZURIrouter ip link set dev eth0 down
+ docker exec 3_L2_DCN_UEFA_1 ip link set dev ssh up
+ docker exec 16_ZURIrouter ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_1
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 3 -1 2 L2-host
++ local n_grp=3 n_router=-1 n_layer2=2 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.5/16
+ subnet_ssh_host=158.3.200.5/16
+ [[ vpn_1 != vpn* ]]
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_2
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 3 -1 3 L2-host
++ local n_grp=3 n_router=-1 n_layer2=3 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.6/16
+ subnet_ssh_host=158.3.200.6/16
+ [[ FIFA_2 != vpn* ]]
+ docker run -itd --dns=198.3.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_2 --name=3_L2_DCN_FIFA_2 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.200.6 miniinterneteth/d_host
+ docker exec 16_ZURIrouter ip link set dev ssh up
+ docker exec 14_L2_DCN_S2 ip link set dev eth0 down
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ extra=
+ [[ true == \t\r\u\e ]]
+ extra=0
++ subnet_sshContainer_groupContainer 16 0 -1 L3-host
++ local n_grp=16 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.16.10.2/16
+ subnet_ssh_host=158.16.10.2/16
+ container_name=16_ZURIhost0
+ additional_args=()
+ net=none
+ [[ routinator == *\k\r\i\l\l* ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ ROUTINATOR_CONTAINERS+=("${group_number} ${container_name}")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${rpki_location}/tals:/root/.rpki-cache/tals:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions.json:/root/rpki_exceptions.json")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json")
+ docker run -itd --dns=198.16.0.2 --name=16_ZURIhost0 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host0 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/root/.rpki-cache/tals:ro -v /home/service/tud/mini_internet_project/platform/groups/g16/rpki_exceptions.json:/root/rpki_exceptions.json -v /home/service/tud/mini_internet_project/platform/groups/g16/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json --network=16_ssh --ip=158.16.10.2 miniinterneteth/d_routinator
+ docker exec 14_L2_DCN_S2 ip link set dev eth0 name ssh
+ docker exec 14_L2_DCN_S2 ip link set dev ssh up
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 14 -1 2 switch
++ local n_grp=14 n_router=-1 n_layer2=2 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.14.100.5/16
+ subnet_ssh_switch=158.14.100.5/16
+ docker run -itd --dns=198.14.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S3 --name=14_L2_DCN_S3 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.100.5 miniinterneteth/d_switch
+ docker exec 15_ZURIhost0 ip link set dev eth0 down
+ docker exec 15_ZURIhost0 ip link set dev eth0 name ssh
+ docker exec 15_ZURIhost0 ip link set dev ssh up
+ [[ routinator == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 1 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 2 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 3 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ printf '%b\n' '15 15_ZURIhost0'
+ printf '%b\n'
+ printf '%b\n' 15_ssh 15_ZURIrouter 15_ZURIhost0
+ echo 'Group 15: 3 containers created!'
Group 15: 3 containers created!
+ docker exec 13_L2_DCN_S3 ip link set dev eth0 down
+ docker exec 13_L2_DCN_S3 ip link set dev eth0 name ssh
+ docker exec 4_L2_DCN_FIFA_2 ip link set dev eth0 down
+ docker exec 4_L2_DCN_FIFA_2 ip link set dev eth0 name ssh
+ docker exec 13_L2_DCN_S3 ip link set dev ssh up
+ docker exec 3_L2_DCN_FIFA_2 ip link set dev eth0 down
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCS
+ sname=S4
++ subnet_sshContainer_groupContainer 13 -1 3 switch
++ local n_grp=13 n_router=-1 n_layer2=3 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.13.100.6/16
+ subnet_ssh_switch=158.13.100.6/16
+ docker run -itd --dns=198.13.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S4 --name=13_L2_DCS_S4 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.100.6 miniinterneteth/d_switch
+ docker exec 4_L2_DCN_FIFA_2 ip link set dev ssh up
+ docker exec 3_L2_DCN_FIFA_2 ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_2
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 4 -1 4 L2-host
++ local n_grp=4 n_router=-1 n_layer2=4 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.7/16
+ subnet_ssh_host=158.4.200.7/16
+ [[ UEFA_2 != vpn* ]]
+ docker run -itd --dns=198.4.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_2 --name=4_L2_DCN_UEFA_2 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.200.7 miniinterneteth/d_host
+ docker exec 3_L2_DCN_FIFA_2 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_2
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 3 -1 4 L2-host
++ local n_grp=3 n_router=-1 n_layer2=4 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.7/16
+ subnet_ssh_host=158.3.200.7/16
+ [[ UEFA_2 != vpn* ]]
+ docker run -itd --dns=198.3.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_2 --name=3_L2_DCN_UEFA_2 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.200.7 miniinterneteth/d_host
+ docker exec 14_L2_DCN_S3 ip link set dev eth0 down
+ docker exec 16_ZURIhost0 ip link set dev eth0 down
+ docker exec 16_ZURIhost0 ip link set dev eth0 name ssh
+ docker exec 14_L2_DCN_S3 ip link set dev eth0 name ssh
+ docker exec 16_ZURIhost0 ip link set dev ssh up
+ docker exec 14_L2_DCN_S3 ip link set dev ssh up
+ [[ routinator == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 1 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MATRIX
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 2 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=MEASUREMENT
+ property2=N/A
++ echo N/A
++ cut -d : -f 1
+ htype=N/A
++ echo N/A
++ cut -d : -f 2
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ switch_l=(${l2_switches[$l]})
+ l2name=DCS
+ sname=S4
+ dname=N/A
+ all_in_one=false
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ all_in_one=true
+ [[ true == \f\a\l\s\e ]]
+ [[ 3 -eq 0 ]]
+ [[ N/A != \N\/\A ]]
+ (( i++ ))
+ (( i < n_routers ))
+ printf '%b\n' '16 16_ZURIhost0'
+ printf '%b\n'
+ printf '%b\n' 16_ssh 16_ZURIrouter 16_ZURIhost0
+ echo 'Group 16: 3 containers created!'
Group 16: 3 containers created!
++ subnet_sshContainer_groupContainer 14 -1 3 switch
++ local n_grp=14 n_router=-1 n_layer2=3 device=switch
++ '[' switch = sshContainer ']'
++ '[' switch = MEASUREMENT ']'
++ '[' switch = router ']'
++ '[' switch = L3-host ']'
++ '[' switch = switch ']'
++ echo 158.14.100.6/16
+ subnet_ssh_switch=158.14.100.6/16
+ docker run -itd --dns=198.14.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 1024 --hostname S4 --name=14_L2_DCS_S4 --cap-add=ALL --cap-drop=SYS_RESOURCE --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.100.6 miniinterneteth/d_switch
+ docker exec 13_L2_DCS_S4 ip link set dev eth0 down
+ docker exec 4_L2_DCN_UEFA_2 ip link set dev eth0 down
+ docker exec 13_L2_DCS_S4 ip link set dev eth0 name ssh
+ docker exec 4_L2_DCN_UEFA_2 ip link set dev eth0 name ssh
+ docker exec 3_L2_DCN_UEFA_2 ip link set dev eth0 down
+ docker exec 3_L2_DCN_UEFA_2 ip link set dev eth0 name ssh
+ docker exec 4_L2_DCN_UEFA_2 ip link set dev ssh up
+ docker exec 13_L2_DCS_S4 ip link set dev ssh up
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ docker exec 3_L2_DCN_UEFA_2 ip link set dev ssh up
+ (( l < n_l2_switches ))
+ (( l = 0 ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_1
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 13 -1 0 L2-host
++ local n_grp=13 n_router=-1 n_layer2=0 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.3/16
+ subnet_ssh_host=158.13.200.3/16
+ [[ FIFA_1 != vpn* ]]
+ docker run -itd --dns=198.13.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_1 --name=13_L2_DCN_FIFA_1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.200.3 miniinterneteth/d_host
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_2
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 4 -1 5 L2-host
++ local n_grp=4 n_router=-1 n_layer2=5 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.8/16
+ subnet_ssh_host=158.4.200.8/16
+ [[ vpn_2 != vpn* ]]
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_3
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 4 -1 6 L2-host
++ local n_grp=4 n_router=-1 n_layer2=6 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.9/16
+ subnet_ssh_host=158.4.200.9/16
+ [[ FIFA_3 != vpn* ]]
+ docker run -itd --dns=198.4.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_3 --name=4_L2_DCN_FIFA_3 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.200.9 miniinterneteth/d_host
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_2
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 3 -1 5 L2-host
++ local n_grp=3 n_router=-1 n_layer2=5 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.8/16
+ subnet_ssh_host=158.3.200.8/16
+ [[ vpn_2 != vpn* ]]
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_3
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 3 -1 6 L2-host
++ local n_grp=3 n_router=-1 n_layer2=6 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.9/16
+ subnet_ssh_host=158.3.200.9/16
+ [[ FIFA_3 != vpn* ]]
+ docker run -itd --dns=198.3.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_3 --name=3_L2_DCN_FIFA_3 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.200.9 miniinterneteth/d_host
+ docker exec 14_L2_DCS_S4 ip link set dev eth0 down
+ docker exec 14_L2_DCS_S4 ip link set dev eth0 name ssh
+ docker exec 14_L2_DCS_S4 ip link set dev ssh up
+ CONTAINERS+=(${group_number}_L2_${l2name}_${sname})
+ (( l++ ))
+ (( l < n_l2_switches ))
+ (( l = 0 ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_1
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 14 -1 0 L2-host
++ local n_grp=14 n_router=-1 n_layer2=0 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.3/16
+ subnet_ssh_host=158.14.200.3/16
+ [[ FIFA_1 != vpn* ]]
+ docker run -itd --dns=198.14.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_1 --name=14_L2_DCN_FIFA_1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.200.3 miniinterneteth/d_host
+ docker exec 3_L2_DCN_FIFA_3 ip link set dev eth0 down
+ docker exec 3_L2_DCN_FIFA_3 ip link set dev eth0 name ssh
+ docker exec 4_L2_DCN_FIFA_3 ip link set dev eth0 down
+ docker exec 13_L2_DCN_FIFA_1 ip link set dev eth0 down
+ docker exec 14_L2_DCN_FIFA_1 ip link set dev eth0 down
+ docker exec 13_L2_DCN_FIFA_1 ip link set dev eth0 name ssh
+ docker exec 3_L2_DCN_FIFA_3 ip link set dev ssh up
+ docker exec 4_L2_DCN_FIFA_3 ip link set dev eth0 name ssh
+ docker exec 14_L2_DCN_FIFA_1 ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_3
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 3 -1 7 L2-host
++ local n_grp=3 n_router=-1 n_layer2=7 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.10/16
+ subnet_ssh_host=158.3.200.10/16
+ [[ UEFA_3 != vpn* ]]
+ docker run -itd --dns=198.3.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_3 --name=3_L2_DCN_UEFA_3 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.200.10 miniinterneteth/d_host
+ docker exec 13_L2_DCN_FIFA_1 ip link set dev ssh up
+ docker exec 4_L2_DCN_FIFA_3 ip link set dev ssh up
+ docker exec 14_L2_DCN_FIFA_1 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_3
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S3
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
++ subnet_sshContainer_groupContainer 4 -1 7 L2-host
+ hname=UEFA_1
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S1
++ local n_grp=4 n_router=-1 n_layer2=7 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.10/16
++ subnet_sshContainer_groupContainer 13 -1 1 L2-host
+ subnet_ssh_host=158.4.200.10/16
+ [[ UEFA_3 != vpn* ]]
++ local n_grp=13 n_router=-1 n_layer2=1 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
+ docker run -itd --dns=198.4.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_3 --name=4_L2_DCN_UEFA_3 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.200.10 miniinterneteth/d_host
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.4/16
+ subnet_ssh_host=158.13.200.4/16
+ [[ UEFA_1 != vpn* ]]
+ docker run -itd --dns=198.13.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_1 --name=13_L2_DCN_UEFA_1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.200.4 miniinterneteth/d_host
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_1
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 14 -1 1 L2-host
++ local n_grp=14 n_router=-1 n_layer2=1 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.4/16
+ subnet_ssh_host=158.14.200.4/16
+ [[ UEFA_1 != vpn* ]]
+ docker run -itd --dns=198.14.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_1 --name=14_L2_DCN_UEFA_1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.200.4 miniinterneteth/d_host
+ docker exec 3_L2_DCN_UEFA_3 ip link set dev eth0 down
+ docker exec 3_L2_DCN_UEFA_3 ip link set dev eth0 name ssh
+ docker exec 3_L2_DCN_UEFA_3 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_3
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 3 -1 8 L2-host
++ local n_grp=3 n_router=-1 n_layer2=8 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.11/16
+ subnet_ssh_host=158.3.200.11/16
+ [[ vpn_3 != vpn* ]]
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_4
+ dname=miniinterneteth/d_host
+ l2name=DCS
+ sname=S4
++ subnet_sshContainer_groupContainer 3 -1 9 L2-host
++ local n_grp=3 n_router=-1 n_layer2=9 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.12/16
+ subnet_ssh_host=158.3.200.12/16
+ [[ FIFA_4 != vpn* ]]
+ docker run -itd --dns=198.3.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_4 --name=3_L2_DCS_FIFA_4 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.200.12 miniinterneteth/d_host
+ docker exec 4_L2_DCN_UEFA_3 ip link set dev eth0 down
+ docker exec 13_L2_DCN_UEFA_1 ip link set dev eth0 down
+ docker exec 14_L2_DCN_UEFA_1 ip link set dev eth0 down
+ docker exec 4_L2_DCN_UEFA_3 ip link set dev eth0 name ssh
+ docker exec 13_L2_DCN_UEFA_1 ip link set dev eth0 name ssh
+ docker exec 14_L2_DCN_UEFA_1 ip link set dev eth0 name ssh
+ docker exec 13_L2_DCN_UEFA_1 ip link set dev ssh up
+ docker exec 4_L2_DCN_UEFA_3 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_1
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 13 -1 2 L2-host
++ local n_grp=13 n_router=-1 n_layer2=2 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.5/16
+ subnet_ssh_host=158.13.200.5/16
+ [[ vpn_1 != vpn* ]]
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_2
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 13 -1 3 L2-host
++ local n_grp=13 n_router=-1 n_layer2=3 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.6/16
+ subnet_ssh_host=158.13.200.6/16
+ [[ FIFA_2 != vpn* ]]
+ docker run -itd --dns=198.13.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_2 --name=13_L2_DCN_FIFA_2 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.200.6 miniinterneteth/d_host
+ docker exec 14_L2_DCN_UEFA_1 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_3
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 4 -1 8 L2-host
++ local n_grp=4 n_router=-1 n_layer2=8 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.11/16
+ subnet_ssh_host=158.4.200.11/16
+ [[ vpn_3 != vpn* ]]
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_4
+ dname=miniinterneteth/d_host
+ l2name=DCS
+ sname=S4
++ subnet_sshContainer_groupContainer 4 -1 9 L2-host
++ local n_grp=4 n_router=-1 n_layer2=9 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.12/16
+ subnet_ssh_host=158.4.200.12/16
+ [[ FIFA_4 != vpn* ]]
+ docker run -itd --dns=198.4.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_4 --name=4_L2_DCS_FIFA_4 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.200.12 miniinterneteth/d_host
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_1
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S1
++ subnet_sshContainer_groupContainer 14 -1 2 L2-host
++ local n_grp=14 n_router=-1 n_layer2=2 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.5/16
+ subnet_ssh_host=158.14.200.5/16
+ [[ vpn_1 != vpn* ]]
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_2
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 14 -1 3 L2-host
++ local n_grp=14 n_router=-1 n_layer2=3 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.6/16
+ subnet_ssh_host=158.14.200.6/16
+ [[ FIFA_2 != vpn* ]]
+ docker run -itd --dns=198.14.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_2 --name=14_L2_DCN_FIFA_2 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.200.6 miniinterneteth/d_host
+ docker exec 3_L2_DCS_FIFA_4 ip link set dev eth0 down
+ docker exec 3_L2_DCS_FIFA_4 ip link set dev eth0 name ssh
+ docker exec 3_L2_DCS_FIFA_4 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_4
+ dname=miniinterneteth/d_host
+ l2name=DCS
+ sname=S4
++ subnet_sshContainer_groupContainer 3 -1 10 L2-host
++ local n_grp=3 n_router=-1 n_layer2=10 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.3.200.13/16
+ subnet_ssh_host=158.3.200.13/16
+ [[ UEFA_4 != vpn* ]]
+ docker run -itd --dns=198.3.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_4 --name=3_L2_DCS_UEFA_4 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.200.13 miniinterneteth/d_host
+ docker exec 4_L2_DCS_FIFA_4 ip link set dev eth0 down
+ docker exec 4_L2_DCS_FIFA_4 ip link set dev eth0 name ssh
+ docker exec 14_L2_DCN_FIFA_2 ip link set dev eth0 down
+ docker exec 13_L2_DCN_FIFA_2 ip link set dev eth0 down
+ docker exec 3_L2_DCS_UEFA_4 ip link set dev eth0 down
+ docker exec 4_L2_DCS_FIFA_4 ip link set dev ssh up
+ docker exec 14_L2_DCN_FIFA_2 ip link set dev eth0 name ssh
+ docker exec 13_L2_DCN_FIFA_2 ip link set dev eth0 name ssh
+ docker exec 3_L2_DCS_UEFA_4 ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_4
+ dname=miniinterneteth/d_host
+ l2name=DCS
+ sname=S4
++ subnet_sshContainer_groupContainer 4 -1 10 L2-host
++ local n_grp=4 n_router=-1 n_layer2=10 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.4.200.13/16
+ subnet_ssh_host=158.4.200.13/16
+ [[ UEFA_4 != vpn* ]]
+ docker run -itd --dns=198.4.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_4 --name=4_L2_DCS_UEFA_4 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.200.13 miniinterneteth/d_host
+ docker exec 13_L2_DCN_FIFA_2 ip link set dev ssh up
+ docker exec 14_L2_DCN_FIFA_2 ip link set dev ssh up
+ docker exec 3_L2_DCS_UEFA_4 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_2
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 13 -1 4 L2-host
++ local n_grp=13 n_router=-1 n_layer2=4 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.7/16
+ subnet_ssh_host=158.13.200.7/16
+ [[ UEFA_2 != vpn* ]]
+ docker run -itd --dns=198.13.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_2 --name=13_L2_DCN_UEFA_2 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.200.7 miniinterneteth/d_host
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_2
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 14 -1 4 L2-host
++ local n_grp=14 n_router=-1 n_layer2=4 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.7/16
+ subnet_ssh_host=158.14.200.7/16
+ [[ UEFA_2 != vpn* ]]
+ docker run -itd --dns=198.14.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_2 --name=14_L2_DCN_UEFA_2 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.200.7 miniinterneteth/d_host
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g3/ZURI
++ subnet_sshContainer_groupContainer 3 0 -1 router
++ local n_grp=3 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.10.1/16
+ subnet_ssh_router=158.3.10.1/16
+ docker run -itd --dns=198.3.0.2 --name=3_ZURIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname ZURI_router -v /home/service/tud/mini_internet_project/platform/groups/g3/ZURI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/ZURI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/ZURI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g3/ZURI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.10.1 miniinterneteth/d_router
+ docker exec 13_L2_DCN_UEFA_2 ip link set dev eth0 down
+ docker exec 4_L2_DCS_UEFA_4 ip link set dev eth0 down
+ docker exec 13_L2_DCN_UEFA_2 ip link set dev eth0 name ssh
+ docker exec 4_L2_DCS_UEFA_4 ip link set dev eth0 name ssh
+ docker exec 4_L2_DCS_UEFA_4 ip link set dev ssh up
+ docker exec 13_L2_DCN_UEFA_2 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ docker exec 14_L2_DCN_UEFA_2 ip link set dev eth0 down
+ htype=L2-DCN
++ cut -d : -f 2
++ echo L2-DCN:miniinterneteth/d_host
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g4/ZURI
++ subnet_sshContainer_groupContainer 4 0 -1 router
++ local n_grp=4 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.10.1/16
+ subnet_ssh_router=158.4.10.1/16
+ docker run -itd --dns=198.4.0.2 --name=4_ZURIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname ZURI_router -v /home/service/tud/mini_internet_project/platform/groups/g4/ZURI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/ZURI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/ZURI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g4/ZURI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.10.1 miniinterneteth/d_router
+ docker exec 3_ZURIrouter ip link set dev eth0 down
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_2
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 13 -1 5 L2-host
++ local n_grp=13 n_router=-1 n_layer2=5 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.8/16
+ subnet_ssh_host=158.13.200.8/16
+ [[ vpn_2 != vpn* ]]
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_3
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 13 -1 6 L2-host
++ local n_grp=13 n_router=-1 n_layer2=6 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.9/16
+ subnet_ssh_host=158.13.200.9/16
+ [[ FIFA_3 != vpn* ]]
+ docker run -itd --dns=198.13.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_3 --name=13_L2_DCN_FIFA_3 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.200.9 miniinterneteth/d_host
+ docker exec 14_L2_DCN_UEFA_2 ip link set dev eth0 name ssh
+ docker exec 3_ZURIrouter ip link set dev eth0 name ssh
+ docker exec 14_L2_DCN_UEFA_2 ip link set dev ssh up
+ docker exec 3_ZURIrouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_2
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S2
++ subnet_sshContainer_groupContainer 14 -1 5 L2-host
++ local n_grp=14 n_router=-1 n_layer2=5 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.8/16
+ subnet_ssh_host=158.14.200.8/16
+ [[ vpn_2 != vpn* ]]
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_3
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 14 -1 6 L2-host
++ local n_grp=14 n_router=-1 n_layer2=6 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.9/16
+ subnet_ssh_host=158.14.200.9/16
+ [[ FIFA_3 != vpn* ]]
+ docker run -itd --dns=198.14.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_3 --name=14_L2_DCN_FIFA_3 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.200.9 miniinterneteth/d_host
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ L2-DCN:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 3 0 -1 L3-host
++ local n_grp=3 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.10.2/16
+ subnet_ssh_host=158.3.10.2/16
+ container_name=3_ZURIhost
+ additional_args=()
+ net=none
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.3.0.2 --name=3_ZURIhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.10.2 miniinterneteth/d_host
+ docker exec 13_L2_DCN_FIFA_3 ip link set dev eth0 down
+ docker exec 4_ZURIrouter ip link set dev eth0 down
+ docker exec 13_L2_DCN_FIFA_3 ip link set dev eth0 name ssh
+ docker exec 4_ZURIrouter ip link set dev eth0 name ssh
+ docker exec 14_L2_DCN_FIFA_3 ip link set dev eth0 down
+ docker exec 13_L2_DCN_FIFA_3 ip link set dev ssh up
+ docker exec 3_ZURIhost ip link set dev eth0 down
+ docker exec 4_ZURIrouter ip link set dev ssh up
+ docker exec 14_L2_DCN_FIFA_3 ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_3
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 13 -1 7 L2-host
++ local n_grp=13 n_router=-1 n_layer2=7 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.10/16
+ subnet_ssh_host=158.13.200.10/16
+ [[ UEFA_3 != vpn* ]]
+ docker run -itd --dns=198.13.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_3 --name=13_L2_DCN_UEFA_3 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.200.10 miniinterneteth/d_host
+ docker exec 3_ZURIhost ip link set dev eth0 name ssh
+ docker exec 14_L2_DCN_FIFA_3 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ L2-DCN:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 4 0 -1 L3-host
++ local n_grp=4 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.10.2/16
+ subnet_ssh_host=158.4.10.2/16
+ container_name=4_ZURIhost
+ additional_args=()
+ net=none
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.4.0.2 --name=4_ZURIhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.10.2 miniinterneteth/d_host
+ docker exec 3_ZURIhost ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_3
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 14 -1 7 L2-host
++ local n_grp=14 n_router=-1 n_layer2=7 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.10/16
+ subnet_ssh_host=158.14.200.10/16
+ [[ UEFA_3 != vpn* ]]
+ docker run -itd --dns=198.14.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_3 --name=14_L2_DCN_UEFA_3 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.200.10 miniinterneteth/d_host
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g3/BASE
++ subnet_sshContainer_groupContainer 3 1 -1 router
++ local n_grp=3 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.11.1/16
+ subnet_ssh_router=158.3.11.1/16
+ docker run -itd --dns=198.3.0.2 --name=3_BASErouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname BASE_router -v /home/service/tud/mini_internet_project/platform/groups/g3/BASE/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/BASE/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/BASE/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g3/BASE/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.11.1 miniinterneteth/d_router
+ docker exec 13_L2_DCN_UEFA_3 ip link set dev eth0 down
+ docker exec 4_ZURIhost ip link set dev eth0 down
+ docker exec 4_ZURIhost ip link set dev eth0 name ssh
+ docker exec 13_L2_DCN_UEFA_3 ip link set dev eth0 name ssh
+ docker exec 3_BASErouter ip link set dev eth0 down
+ docker exec 14_L2_DCN_UEFA_3 ip link set dev eth0 down
+ docker exec 13_L2_DCN_UEFA_3 ip link set dev ssh up
+ docker exec 4_ZURIhost ip link set dev ssh up
+ docker exec 3_BASErouter ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_3
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 13 -1 8 L2-host
++ local n_grp=13 n_router=-1 n_layer2=8 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.11/16
+ subnet_ssh_host=158.13.200.11/16
+ [[ vpn_3 != vpn* ]]
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_4
+ dname=miniinterneteth/d_host
+ l2name=DCS
+ sname=S4
++ subnet_sshContainer_groupContainer 13 -1 9 L2-host
++ local n_grp=13 n_router=-1 n_layer2=9 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.12/16
+ subnet_ssh_host=158.13.200.12/16
+ [[ FIFA_4 != vpn* ]]
+ docker run -itd --dns=198.13.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_4 --name=13_L2_DCS_FIFA_4 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.200.12 miniinterneteth/d_host
+ docker exec 14_L2_DCN_UEFA_3 ip link set dev eth0 name ssh
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g4/BASE
++ subnet_sshContainer_groupContainer 4 1 -1 router
++ local n_grp=4 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.11.1/16
+ subnet_ssh_router=158.4.11.1/16
+ docker run -itd --dns=198.4.0.2 --name=4_BASErouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname BASE_router -v /home/service/tud/mini_internet_project/platform/groups/g4/BASE/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/BASE/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/BASE/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g4/BASE/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.11.1 miniinterneteth/d_router
+ docker exec 3_BASErouter ip link set dev ssh up
+ docker exec 14_L2_DCN_UEFA_3 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ L2-DCN:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 3 1 -1 L3-host
++ local n_grp=3 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.11.2/16
+ subnet_ssh_host=158.3.11.2/16
+ container_name=3_BASEhost
+ additional_args=()
+ net=none
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.3.0.2 --name=3_BASEhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname BASE_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.11.2 miniinterneteth/d_host
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=vpn_3
+ dname=miniinterneteth/d_host
+ l2name=DCN
+ sname=S3
++ subnet_sshContainer_groupContainer 14 -1 8 L2-host
++ local n_grp=14 n_router=-1 n_layer2=8 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.11/16
+ subnet_ssh_host=158.14.200.11/16
+ [[ vpn_3 != vpn* ]]
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=FIFA_4
+ dname=miniinterneteth/d_host
+ l2name=DCS
+ sname=S4
++ subnet_sshContainer_groupContainer 14 -1 9 L2-host
++ local n_grp=14 n_router=-1 n_layer2=9 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.12/16
+ subnet_ssh_host=158.14.200.12/16
+ [[ FIFA_4 != vpn* ]]
+ docker run -itd --dns=198.14.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname FIFA_4 --name=14_L2_DCS_FIFA_4 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.200.12 miniinterneteth/d_host
+ docker exec 13_L2_DCS_FIFA_4 ip link set dev eth0 down
+ docker exec 13_L2_DCS_FIFA_4 ip link set dev eth0 name ssh
+ docker exec 13_L2_DCS_FIFA_4 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_4
+ dname=miniinterneteth/d_host
+ l2name=DCS
+ sname=S4
++ subnet_sshContainer_groupContainer 13 -1 10 L2-host
++ local n_grp=13 n_router=-1 n_layer2=10 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.13.200.13/16
+ subnet_ssh_host=158.13.200.13/16
+ [[ UEFA_4 != vpn* ]]
+ docker run -itd --dns=198.13.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_4 --name=13_L2_DCS_UEFA_4 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.200.13 miniinterneteth/d_host
+ docker exec 14_L2_DCS_FIFA_4 ip link set dev eth0 down
+ docker exec 4_BASErouter ip link set dev eth0 down
+ docker exec 3_BASEhost ip link set dev eth0 down
+ docker exec 14_L2_DCS_FIFA_4 ip link set dev eth0 name ssh
+ docker exec 4_BASErouter ip link set dev eth0 name ssh
+ docker exec 3_BASEhost ip link set dev eth0 name ssh
+ docker exec 14_L2_DCS_FIFA_4 ip link set dev ssh up
+ docker exec 3_BASEhost ip link set dev ssh up
+ docker exec 4_BASErouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ host_l=(${l2_hosts[$l]})
+ hname=UEFA_4
+ dname=miniinterneteth/d_host
+ l2name=DCS
+ sname=S4
++ subnet_sshContainer_groupContainer 14 -1 10 L2-host
++ local n_grp=14 n_router=-1 n_layer2=10 device=L2-host
++ '[' L2-host = sshContainer ']'
++ '[' L2-host = MEASUREMENT ']'
++ '[' L2-host = router ']'
++ '[' L2-host = L3-host ']'
++ '[' L2-host = switch ']'
++ '[' L2-host = L2-host ']'
++ echo 158.14.200.13/16
+ subnet_ssh_host=158.14.200.13/16
+ [[ UEFA_4 != vpn* ]]
+ docker run -itd --dns=198.14.0.2 --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname UEFA_4 --name=14_L2_DCS_UEFA_4 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.200.13 miniinterneteth/d_host
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCS
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g3/GENE
++ subnet_sshContainer_groupContainer 3 2 -1 router
++ local n_grp=3 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.12.1/16
+ subnet_ssh_router=158.3.12.1/16
+ docker run -itd --dns=198.3.0.2 --name=3_GENErouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname GENE_router -v /home/service/tud/mini_internet_project/platform/groups/g3/GENE/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/GENE/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/GENE/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g3/GENE/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.12.1 miniinterneteth/d_router
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ L2-DCN:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 4 1 -1 L3-host
++ local n_grp=4 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.11.2/16
+ subnet_ssh_host=158.4.11.2/16
+ container_name=4_BASEhost
+ additional_args=()
+ net=none
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.4.0.2 --name=4_BASEhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname BASE_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.11.2 miniinterneteth/d_host
+ docker exec 13_L2_DCS_UEFA_4 ip link set dev eth0 down
+ docker exec 13_L2_DCS_UEFA_4 ip link set dev eth0 name ssh
+ docker exec 13_L2_DCS_UEFA_4 ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g13/ZURI
++ subnet_sshContainer_groupContainer 13 0 -1 router
++ local n_grp=13 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.10.1/16
+ subnet_ssh_router=158.13.10.1/16
+ docker run -itd --dns=198.13.0.2 --name=13_ZURIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname ZURI_router -v /home/service/tud/mini_internet_project/platform/groups/g13/ZURI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/ZURI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/ZURI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g13/ZURI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.10.1 miniinterneteth/d_router
+ docker exec 14_L2_DCS_UEFA_4 ip link set dev eth0 down
+ docker exec 14_L2_DCS_UEFA_4 ip link set dev eth0 name ssh
+ docker exec 3_GENErouter ip link set dev eth0 down
+ docker exec 4_BASEhost ip link set dev eth0 down
+ docker exec 14_L2_DCS_UEFA_4 ip link set dev ssh up
+ docker exec 3_GENErouter ip link set dev eth0 name ssh
+ docker exec 4_BASEhost ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}""_L2_""${l2name}""_""${hname}")
+ (( l++ ))
+ (( l < n_l2_hosts ))
+ (( i = 0 ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=ZURI
+ property1=DNS
+ property2=L2-DCN:miniinterneteth/d_host
+ docker exec 13_ZURIrouter ip link set dev eth0 down
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g14/ZURI
++ subnet_sshContainer_groupContainer 14 0 -1 router
++ local n_grp=14 n_router=0 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.10.1/16
+ subnet_ssh_router=158.14.10.1/16
+ docker run -itd --dns=198.14.0.2 --name=14_ZURIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname ZURI_router -v /home/service/tud/mini_internet_project/platform/groups/g14/ZURI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/ZURI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/ZURI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g14/ZURI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.10.1 miniinterneteth/d_router
+ docker exec 3_GENErouter ip link set dev ssh up
+ docker exec 4_BASEhost ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ L2-DCS:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 3 2 -1 L3-host
++ local n_grp=3 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.12.2/16
+ subnet_ssh_host=158.3.12.2/16
+ container_name=3_GENEhost
+ additional_args=()
+ net=none
+ [[ L2-DCS == *\k\r\i\l\l* ]]
+ [[ L2-DCS == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.3.0.2 --name=3_GENEhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname GENE_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.12.2 miniinterneteth/d_host
+ docker exec 13_ZURIrouter ip link set dev eth0 name ssh
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCS
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g4/GENE
++ subnet_sshContainer_groupContainer 4 2 -1 router
++ local n_grp=4 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.12.1/16
+ subnet_ssh_router=158.4.12.1/16
+ docker run -itd --dns=198.4.0.2 --name=4_GENErouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname GENE_router -v /home/service/tud/mini_internet_project/platform/groups/g4/GENE/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/GENE/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/GENE/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g4/GENE/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.12.1 miniinterneteth/d_router
+ docker exec 13_ZURIrouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ L2-DCN:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 13 0 -1 L3-host
++ local n_grp=13 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.10.2/16
+ subnet_ssh_host=158.13.10.2/16
+ container_name=13_ZURIhost
+ additional_args=()
+ net=none
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.13.0.2 --name=13_ZURIhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.10.2 miniinterneteth/d_host
+ docker exec 3_GENEhost ip link set dev eth0 down
+ docker exec 3_GENEhost ip link set dev eth0 name ssh
+ docker exec 3_GENEhost ip link set dev ssh up
+ [[ L2-DCS == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g3/LUGA
++ subnet_sshContainer_groupContainer 3 3 -1 router
++ local n_grp=3 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.13.1/16
+ subnet_ssh_router=158.3.13.1/16
+ docker run -itd --dns=198.3.0.2 --name=3_LUGArouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname LUGA_router -v /home/service/tud/mini_internet_project/platform/groups/g3/LUGA/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/LUGA/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/LUGA/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g3/LUGA/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.13.1 miniinterneteth/d_router
+ docker exec 14_ZURIrouter ip link set dev eth0 down
+ docker exec 4_GENErouter ip link set dev eth0 down
+ docker exec 13_ZURIhost ip link set dev eth0 down
+ docker exec 13_ZURIhost ip link set dev eth0 name ssh
+ docker exec 4_GENErouter ip link set dev eth0 name ssh
+ docker exec 14_ZURIrouter ip link set dev eth0 name ssh
+ docker exec 13_ZURIhost ip link set dev ssh up
+ docker exec 14_ZURIrouter ip link set dev ssh up
+ docker exec 4_GENErouter ip link set dev ssh up
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ L2-DCN:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 14 0 -1 L3-host
++ local n_grp=14 n_router=0 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.10.2/16
+ subnet_ssh_host=158.14.10.2/16
+ container_name=14_ZURIhost
+ additional_args=()
+ net=none
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.14.0.2 --name=14_ZURIhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname ZURI_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.10.2 miniinterneteth/d_host
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g13/BASE
++ subnet_sshContainer_groupContainer 13 1 -1 router
++ local n_grp=13 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.11.1/16
+ subnet_ssh_router=158.13.11.1/16
+ docker run -itd --dns=198.13.0.2 --name=13_BASErouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname BASE_router -v /home/service/tud/mini_internet_project/platform/groups/g13/BASE/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/BASE/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/BASE/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g13/BASE/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.11.1 miniinterneteth/d_router
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ L2-DCS:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 4 2 -1 L3-host
++ local n_grp=4 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.12.2/16
+ subnet_ssh_host=158.4.12.2/16
+ container_name=4_GENEhost
+ additional_args=()
+ net=none
+ [[ L2-DCS == *\k\r\i\l\l* ]]
+ [[ L2-DCS == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.4.0.2 --name=4_GENEhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname GENE_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.12.2 miniinterneteth/d_host
+ docker exec 3_LUGArouter ip link set dev eth0 down
+ docker exec 3_LUGArouter ip link set dev eth0 name ssh
+ docker exec 3_LUGArouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 3 3 -1 L3-host
++ local n_grp=3 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.13.2/16
+ subnet_ssh_host=158.3.13.2/16
+ container_name=3_LUGAhost
+ additional_args=()
+ net=none
+ [[ routinator == *\k\r\i\l\l* ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ ROUTINATOR_CONTAINERS+=("${group_number} ${container_name}")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${rpki_location}/tals:/root/.rpki-cache/tals:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions.json:/root/rpki_exceptions.json")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json")
+ docker run -itd --dns=198.3.0.2 --name=3_LUGAhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname LUGA_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/root/.rpki-cache/tals:ro -v /home/service/tud/mini_internet_project/platform/groups/g3/rpki_exceptions.json:/root/rpki_exceptions.json -v /home/service/tud/mini_internet_project/platform/groups/g3/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json --network=3_ssh --ip=158.3.13.2 miniinterneteth/d_routinator
+ docker exec 4_GENEhost ip link set dev eth0 down
+ docker exec 14_ZURIhost ip link set dev eth0 down
+ docker exec 4_GENEhost ip link set dev eth0 name ssh
+ docker exec 13_BASErouter ip link set dev eth0 down
+ docker exec 14_ZURIhost ip link set dev eth0 name ssh
+ docker exec 4_GENEhost ip link set dev ssh up
+ docker exec 3_LUGAhost ip link set dev eth0 down
+ docker exec 13_BASErouter ip link set dev eth0 name ssh
+ [[ L2-DCS == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g4/LUGA
++ subnet_sshContainer_groupContainer 4 3 -1 router
++ local n_grp=4 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.13.1/16
+ subnet_ssh_router=158.4.13.1/16
+ docker run -itd --dns=198.4.0.2 --name=4_LUGArouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname LUGA_router -v /home/service/tud/mini_internet_project/platform/groups/g4/LUGA/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/LUGA/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/LUGA/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g4/LUGA/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.13.1 miniinterneteth/d_router
+ docker exec 14_ZURIhost ip link set dev ssh up
+ docker exec 3_LUGAhost ip link set dev eth0 name ssh
+ docker exec 13_BASErouter ip link set dev ssh up
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=BASE
+ property1=N/A
+ property2=L2-DCN:miniinterneteth/d_host
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCN
++ echo L2-DCN:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g14/BASE
++ subnet_sshContainer_groupContainer 14 1 -1 router
++ local n_grp=14 n_router=1 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.11.1/16
+ subnet_ssh_router=158.14.11.1/16
+ docker run -itd --dns=198.14.0.2 --name=14_BASErouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname BASE_router -v /home/service/tud/mini_internet_project/platform/groups/g14/BASE/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/BASE/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/BASE/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g14/BASE/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.11.1 miniinterneteth/d_router
+ docker exec 3_LUGAhost ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ L2-DCN:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 13 1 -1 L3-host
++ local n_grp=13 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.11.2/16
+ subnet_ssh_host=158.13.11.2/16
+ container_name=13_BASEhost
+ additional_args=()
+ net=none
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.13.0.2 --name=13_BASEhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname BASE_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.11.2 miniinterneteth/d_host
+ [[ routinator == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g3/MUNI
++ subnet_sshContainer_groupContainer 3 4 -1 router
++ local n_grp=3 n_router=4 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.14.1/16
+ subnet_ssh_router=158.3.14.1/16
+ docker run -itd --dns=198.3.0.2 --name=3_MUNIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname MUNI_router -v /home/service/tud/mini_internet_project/platform/groups/g3/MUNI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/MUNI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/MUNI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g3/MUNI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.14.1 miniinterneteth/d_router
+ docker exec 4_LUGArouter ip link set dev eth0 down
+ docker exec 14_BASErouter ip link set dev eth0 down
+ docker exec 4_LUGArouter ip link set dev eth0 name ssh
+ docker exec 14_BASErouter ip link set dev eth0 name ssh
+ docker exec 13_BASEhost ip link set dev eth0 down
+ docker exec 3_MUNIrouter ip link set dev eth0 down
+ docker exec 14_BASErouter ip link set dev ssh up
+ docker exec 13_BASEhost ip link set dev eth0 name ssh
+ docker exec 4_LUGArouter ip link set dev ssh up
+ docker exec 3_MUNIrouter ip link set dev eth0 name ssh
+ docker exec 13_BASEhost ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ L2-DCN:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 14 1 -1 L3-host
++ local n_grp=14 n_router=1 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.11.2/16
+ subnet_ssh_host=158.14.11.2/16
+ container_name=14_BASEhost
+ additional_args=()
+ net=none
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ [[ L2-DCN == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.14.0.2 --name=14_BASEhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname BASE_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.11.2 miniinterneteth/d_host
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 4 3 -1 L3-host
++ local n_grp=4 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.13.2/16
+ subnet_ssh_host=158.4.13.2/16
+ container_name=4_LUGAhost
+ additional_args=()
+ net=none
+ [[ routinator == *\k\r\i\l\l* ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ ROUTINATOR_CONTAINERS+=("${group_number} ${container_name}")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${rpki_location}/tals:/root/.rpki-cache/tals:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions.json:/root/rpki_exceptions.json")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json")
+ docker run -itd --dns=198.4.0.2 --name=4_LUGAhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname LUGA_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/root/.rpki-cache/tals:ro -v /home/service/tud/mini_internet_project/platform/groups/g4/rpki_exceptions.json:/root/rpki_exceptions.json -v /home/service/tud/mini_internet_project/platform/groups/g4/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json --network=4_ssh --ip=158.4.13.2 miniinterneteth/d_routinator
+ docker exec 3_MUNIrouter ip link set dev ssh up
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=L2-DCS
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g13/GENE
++ subnet_sshContainer_groupContainer 13 2 -1 router
++ local n_grp=13 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.12.1/16
+ subnet_ssh_router=158.13.12.1/16
+ docker run -itd --dns=198.13.0.2 --name=13_GENErouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname GENE_router -v /home/service/tud/mini_internet_project/platform/groups/g13/GENE/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/GENE/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/GENE/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g13/GENE/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.12.1 miniinterneteth/d_router
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 3 4 -1 L3-host
++ local n_grp=3 n_router=4 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.14.2/16
+ subnet_ssh_host=158.3.14.2/16
+ container_name=3_MUNIhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.3.0.2 --name=3_MUNIhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname MUNI_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.14.2 miniinterneteth/d_host
+ docker exec 14_BASEhost ip link set dev eth0 down
+ docker exec 14_BASEhost ip link set dev eth0 name ssh
+ docker exec 4_LUGAhost ip link set dev eth0 down
+ docker exec 14_BASEhost ip link set dev ssh up
+ docker exec 13_GENErouter ip link set dev eth0 down
+ docker exec 3_MUNIhost ip link set dev eth0 down
+ docker exec 4_LUGAhost ip link set dev eth0 name ssh
+ [[ L2-DCN == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=GENE
+ property1=N/A
+ property2=L2-DCS:miniinterneteth/d_host
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 1
+ docker exec 13_GENErouter ip link set dev eth0 name ssh
+ htype=L2-DCS
++ echo L2-DCS:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g14/GENE
++ subnet_sshContainer_groupContainer 14 2 -1 router
++ local n_grp=14 n_router=2 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.12.1/16
+ subnet_ssh_router=158.14.12.1/16
+ docker run -itd --dns=198.14.0.2 --name=14_GENErouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname GENE_router -v /home/service/tud/mini_internet_project/platform/groups/g14/GENE/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/GENE/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/GENE/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g14/GENE/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.12.1 miniinterneteth/d_router
+ docker exec 3_MUNIhost ip link set dev eth0 name ssh
+ docker exec 4_LUGAhost ip link set dev ssh up
+ docker exec 3_MUNIhost ip link set dev ssh up
+ [[ routinator == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g4/MUNI
++ subnet_sshContainer_groupContainer 4 4 -1 router
++ local n_grp=4 n_router=4 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.14.1/16
+ subnet_ssh_router=158.4.14.1/16
+ docker run -itd --dns=198.4.0.2 --name=4_MUNIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname MUNI_router -v /home/service/tud/mini_internet_project/platform/groups/g4/MUNI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/MUNI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/MUNI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g4/MUNI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.14.1 miniinterneteth/d_router
+ docker exec 13_GENErouter ip link set dev ssh up
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ L2-DCS:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 13 2 -1 L3-host
++ local n_grp=13 n_router=2 n_layer2=-1 device=L3-host
+ htype=host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.12.2/16
+ subnet_ssh_host=158.13.12.2/16
+ container_name=13_GENEhost
+ additional_args=()
+ net=none
+ [[ L2-DCS == *\k\r\i\l\l* ]]
+ [[ L2-DCS == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.13.0.2 --name=13_GENEhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname GENE_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.12.2 miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g3/LYON
++ subnet_sshContainer_groupContainer 3 5 -1 router
++ local n_grp=3 n_router=5 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.15.1/16
+ subnet_ssh_router=158.3.15.1/16
+ docker run -itd --dns=198.3.0.2 --name=3_LYONrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname LYON_router -v /home/service/tud/mini_internet_project/platform/groups/g3/LYON/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/LYON/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/LYON/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g3/LYON/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.15.1 miniinterneteth/d_router
+ docker exec 14_GENErouter ip link set dev eth0 down
+ docker exec 14_GENErouter ip link set dev eth0 name ssh
+ docker exec 4_MUNIrouter ip link set dev eth0 down
+ docker exec 14_GENErouter ip link set dev ssh up
+ docker exec 4_MUNIrouter ip link set dev eth0 name ssh
+ docker exec 13_GENEhost ip link set dev eth0 down
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ L2-DCS:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 14 2 -1 L3-host
++ local n_grp=14 n_router=2 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.12.2/16
+ subnet_ssh_host=158.14.12.2/16
+ container_name=14_GENEhost
+ additional_args=()
+ net=none
+ [[ L2-DCS == *\k\r\i\l\l* ]]
+ [[ L2-DCS == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.14.0.2 --name=14_GENEhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname GENE_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.12.2 miniinterneteth/d_host
+ docker exec 4_MUNIrouter ip link set dev ssh up
+ docker exec 13_GENEhost ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 4 4 -1 L3-host
++ local n_grp=4 n_router=4 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.14.2/16
+ subnet_ssh_host=158.4.14.2/16
+ container_name=4_MUNIhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.4.0.2 --name=4_MUNIhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname MUNI_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.14.2 miniinterneteth/d_host
+ docker exec 3_LYONrouter ip link set dev eth0 down
+ docker exec 13_GENEhost ip link set dev ssh up
+ docker exec 3_LYONrouter ip link set dev eth0 name ssh
+ [[ L2-DCS == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g13/LUGA
++ subnet_sshContainer_groupContainer 13 3 -1 router
++ local n_grp=13 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.13.1/16
+ subnet_ssh_router=158.13.13.1/16
+ docker run -itd --dns=198.13.0.2 --name=13_LUGArouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname LUGA_router -v /home/service/tud/mini_internet_project/platform/groups/g13/LUGA/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/LUGA/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/LUGA/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g13/LUGA/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.13.1 miniinterneteth/d_router
+ docker exec 3_LYONrouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 3 5 -1 L3-host
++ local n_grp=3 n_router=5 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.15.2/16
+ subnet_ssh_host=158.3.15.2/16
+ container_name=3_LYONhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.3.0.2 --name=3_LYONhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname LYON_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.15.2 miniinterneteth/d_host
+ docker exec 14_GENEhost ip link set dev eth0 down
+ docker exec 4_MUNIhost ip link set dev eth0 down
+ docker exec 14_GENEhost ip link set dev eth0 name ssh
+ docker exec 4_MUNIhost ip link set dev eth0 name ssh
+ docker exec 3_LYONhost ip link set dev eth0 down
+ docker exec 4_MUNIhost ip link set dev ssh up
+ docker exec 13_LUGArouter ip link set dev eth0 down
+ docker exec 14_GENEhost ip link set dev ssh up
+ docker exec 3_LYONhost ip link set dev eth0 name ssh
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g4/LYON
++ subnet_sshContainer_groupContainer 4 5 -1 router
++ local n_grp=4 n_router=5 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.15.1/16
+ subnet_ssh_router=158.4.15.1/16
+ docker run -itd --dns=198.4.0.2 --name=4_LYONrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname LYON_router -v /home/service/tud/mini_internet_project/platform/groups/g4/LYON/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/LYON/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/LYON/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g4/LYON/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.15.1 miniinterneteth/d_router
+ docker exec 13_LUGArouter ip link set dev eth0 name ssh
+ [[ L2-DCS == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LUGA
+ property1=N/A
+ property2=routinator:miniinterneteth/d_routinator
++ cut -d : -f 1
++ echo routinator:miniinterneteth/d_routinator
+ htype=routinator
++ echo routinator:miniinterneteth/d_routinator
++ cut -d : -f 2
+ dname=miniinterneteth/d_routinator
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g14/LUGA
++ subnet_sshContainer_groupContainer 14 3 -1 router
++ local n_grp=14 n_router=3 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.13.1/16
+ subnet_ssh_router=158.14.13.1/16
+ docker run -itd --dns=198.14.0.2 --name=14_LUGArouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname LUGA_router -v /home/service/tud/mini_internet_project/platform/groups/g14/LUGA/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/LUGA/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/LUGA/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g14/LUGA/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.13.1 miniinterneteth/d_router
+ docker exec 3_LYONhost ip link set dev ssh up
+ docker exec 13_LUGArouter ip link set dev ssh up
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g3/VIEN
++ subnet_sshContainer_groupContainer 3 6 -1 router
++ local n_grp=3 n_router=6 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.16.1/16
+ subnet_ssh_router=158.3.16.1/16
+ docker run -itd --dns=198.3.0.2 --name=3_VIENrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname VIEN_router -v /home/service/tud/mini_internet_project/platform/groups/g3/VIEN/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/VIEN/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/VIEN/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g3/VIEN/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.16.1 miniinterneteth/d_router
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 13 3 -1 L3-host
++ local n_grp=13 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.13.2/16
+ subnet_ssh_host=158.13.13.2/16
+ container_name=13_LUGAhost
+ additional_args=()
+ net=none
+ [[ routinator == *\k\r\i\l\l* ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ ROUTINATOR_CONTAINERS+=("${group_number} ${container_name}")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${rpki_location}/tals:/root/.rpki-cache/tals:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions.json:/root/rpki_exceptions.json")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json")
+ docker run -itd --dns=198.13.0.2 --name=13_LUGAhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname LUGA_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/root/.rpki-cache/tals:ro -v /home/service/tud/mini_internet_project/platform/groups/g13/rpki_exceptions.json:/root/rpki_exceptions.json -v /home/service/tud/mini_internet_project/platform/groups/g13/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json --network=13_ssh --ip=158.13.13.2 miniinterneteth/d_routinator
+ docker exec 4_LYONrouter ip link set dev eth0 down
+ docker exec 4_LYONrouter ip link set dev eth0 name ssh
+ docker exec 14_LUGArouter ip link set dev eth0 down
+ docker exec 4_LYONrouter ip link set dev ssh up
+ docker exec 3_VIENrouter ip link set dev eth0 down
+ docker exec 13_LUGAhost ip link set dev eth0 down
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 4 5 -1 L3-host
++ local n_grp=4 n_router=5 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.15.2/16
+ subnet_ssh_host=158.4.15.2/16
+ container_name=4_LYONhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.4.0.2 --name=4_LYONhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname LYON_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.15.2 miniinterneteth/d_host
+ docker exec 14_LUGArouter ip link set dev eth0 name ssh
+ docker exec 3_VIENrouter ip link set dev eth0 name ssh
+ docker exec 13_LUGAhost ip link set dev eth0 name ssh
+ docker exec 13_LUGAhost ip link set dev ssh up
+ docker exec 3_VIENrouter ip link set dev ssh up
+ docker exec 14_LUGArouter ip link set dev ssh up
+ [[ routinator == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g13/MUNI
++ subnet_sshContainer_groupContainer 13 4 -1 router
++ local n_grp=13 n_router=4 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.14.1/16
+ subnet_ssh_router=158.13.14.1/16
+ docker run -itd --dns=198.13.0.2 --name=13_MUNIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname MUNI_router -v /home/service/tud/mini_internet_project/platform/groups/g13/MUNI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/MUNI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/MUNI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g13/MUNI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.14.1 miniinterneteth/d_router
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 3 6 -1 L3-host
++ local n_grp=3 n_router=6 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.16.2/16
+ subnet_ssh_host=158.3.16.2/16
+ container_name=3_VIENhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.3.0.2 --name=3_VIENhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname VIEN_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.16.2 miniinterneteth/d_host
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 14 3 -1 L3-host
++ local n_grp=14 n_router=3 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.13.2/16
+ subnet_ssh_host=158.14.13.2/16
+ container_name=14_LUGAhost
+ additional_args=()
+ net=none
+ [[ routinator == *\k\r\i\l\l* ]]
+ [[ routinator == *\r\o\u\t\i\n\a\t\o\r* ]]
+ ROUTINATOR_CONTAINERS+=("${group_number} ${container_name}")
+ additional_args+=("-v" "${rpki_location}/root.crt:/usr/local/share/ca-certificates/root.crt:ro")
+ additional_args+=("-v" "${rpki_location}/tals:/root/.rpki-cache/tals:ro")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions.json:/root/rpki_exceptions.json")
+ additional_args+=("-v" "${DIRECTORY}/groups/g${group_number}/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json")
+ docker run -itd --dns=198.14.0.2 --name=14_LUGAhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname LUGA_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 -v /home/service/tud/mini_internet_project/platform/groups/rpki/root.crt:/usr/local/share/ca-certificates/root.crt:ro -v /home/service/tud/mini_internet_project/platform/groups/rpki/tals:/root/.rpki-cache/tals:ro -v /home/service/tud/mini_internet_project/platform/groups/g14/rpki_exceptions.json:/root/rpki_exceptions.json -v /home/service/tud/mini_internet_project/platform/groups/g14/rpki_exceptions_autograder.json:/root/rpki_exceptions_autograder.json --network=14_ssh --ip=158.14.13.2 miniinterneteth/d_routinator
+ docker exec 4_LYONhost ip link set dev eth0 down
+ docker exec 4_LYONhost ip link set dev eth0 name ssh
+ docker exec 4_LYONhost ip link set dev ssh up
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g4/VIEN
++ subnet_sshContainer_groupContainer 4 6 -1 router
++ local n_grp=4 n_router=6 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.16.1/16
+ subnet_ssh_router=158.4.16.1/16
+ docker run -itd --dns=198.4.0.2 --name=4_VIENrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname VIEN_router -v /home/service/tud/mini_internet_project/platform/groups/g4/VIEN/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/VIEN/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/VIEN/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g4/VIEN/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.16.1 miniinterneteth/d_router
+ docker exec 13_MUNIrouter ip link set dev eth0 down
+ docker exec 3_VIENhost ip link set dev eth0 down
+ docker exec 14_LUGAhost ip link set dev eth0 down
+ docker exec 3_VIENhost ip link set dev eth0 name ssh
+ docker exec 14_LUGAhost ip link set dev eth0 name ssh
+ docker exec 13_MUNIrouter ip link set dev eth0 name ssh
+ docker exec 3_VIENhost ip link set dev ssh up
+ docker exec 13_MUNIrouter ip link set dev ssh up
+ docker exec 14_LUGAhost ip link set dev ssh up
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g3/MILA
++ subnet_sshContainer_groupContainer 3 7 -1 router
++ local n_grp=3 n_router=7 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.3.17.1/16
+ subnet_ssh_router=158.3.17.1/16
+ docker run -itd --dns=198.3.0.2 --name=3_MILArouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname MILA_router -v /home/service/tud/mini_internet_project/platform/groups/g3/MILA/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/MILA/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g3/MILA/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g3/MILA/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.17.1 miniinterneteth/d_router
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 13 4 -1 L3-host
++ local n_grp=13 n_router=4 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.14.2/16
+ subnet_ssh_host=158.13.14.2/16
+ container_name=13_MUNIhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.13.0.2 --name=13_MUNIhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname MUNI_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.14.2 miniinterneteth/d_host
+ [[ routinator == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MUNI
+ property1=N/A
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g14/MUNI
++ subnet_sshContainer_groupContainer 14 4 -1 router
++ local n_grp=14 n_router=4 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.14.1/16
+ subnet_ssh_router=158.14.14.1/16
+ docker run -itd --dns=198.14.0.2 --name=14_MUNIrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname MUNI_router -v /home/service/tud/mini_internet_project/platform/groups/g14/MUNI/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/MUNI/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/MUNI/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g14/MUNI/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.14.1 miniinterneteth/d_router
+ docker exec 4_VIENrouter ip link set dev eth0 down
+ docker exec 4_VIENrouter ip link set dev eth0 name ssh
+ docker exec 4_VIENrouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 4 6 -1 L3-host
++ local n_grp=4 n_router=6 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.16.2/16
+ subnet_ssh_host=158.4.16.2/16
+ container_name=4_VIENhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.4.0.2 --name=4_VIENhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname VIEN_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.16.2 miniinterneteth/d_host
+ docker exec 3_MILArouter ip link set dev eth0 down
+ docker exec 3_MILArouter ip link set dev eth0 name ssh
+ docker exec 13_MUNIhost ip link set dev eth0 down
+ docker exec 3_MILArouter ip link set dev ssh up
+ docker exec 13_MUNIhost ip link set dev eth0 name ssh
+ docker exec 14_MUNIrouter ip link set dev eth0 down
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 3 7 -1 L3-host
++ local n_grp=3 n_router=7 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.3.17.2/16
+ subnet_ssh_host=158.3.17.2/16
+ container_name=3_MILAhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.3.0.2 --name=3_MILAhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname MILA_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=3_ssh --ip=158.3.17.2 miniinterneteth/d_host
+ docker exec 13_MUNIhost ip link set dev ssh up
+ docker exec 14_MUNIrouter ip link set dev eth0 name ssh
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g13/LYON
++ subnet_sshContainer_groupContainer 13 5 -1 router
++ local n_grp=13 n_router=5 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.15.1/16
+ subnet_ssh_router=158.13.15.1/16
+ docker run -itd --dns=198.13.0.2 --name=13_LYONrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname LYON_router -v /home/service/tud/mini_internet_project/platform/groups/g13/LYON/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/LYON/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/LYON/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g13/LYON/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.15.1 miniinterneteth/d_router
+ docker exec 14_MUNIrouter ip link set dev ssh up
+ docker exec 4_VIENhost ip link set dev eth0 down
+ docker exec 4_VIENhost ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 14 4 -1 L3-host
++ local n_grp=14 n_router=4 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.14.2/16
+ subnet_ssh_host=158.14.14.2/16
+ container_name=14_MUNIhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.14.0.2 --name=14_MUNIhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname MUNI_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.14.2 miniinterneteth/d_host
+ docker exec 4_VIENhost ip link set dev ssh up
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g4/MILA
++ subnet_sshContainer_groupContainer 4 7 -1 router
++ local n_grp=4 n_router=7 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.4.17.1/16
+ subnet_ssh_router=158.4.17.1/16
+ docker run -itd --dns=198.4.0.2 --name=4_MILArouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname MILA_router -v /home/service/tud/mini_internet_project/platform/groups/g4/MILA/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/MILA/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g4/MILA/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g4/MILA/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.17.1 miniinterneteth/d_router
+ docker exec 3_MILAhost ip link set dev eth0 down
+ docker exec 3_MILAhost ip link set dev eth0 name ssh
+ docker exec 13_LYONrouter ip link set dev eth0 down
+ docker exec 3_MILAhost ip link set dev ssh up
+ docker exec 14_MUNIhost ip link set dev eth0 down
+ docker exec 13_LYONrouter ip link set dev eth0 name ssh
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ printf '%b\n' '3 3_LUGAhost'
+ printf '%b\n'
+ printf '%b\n' 3_ssh 3_L2_DCN_S1 3_L2_DCN_S2 3_L2_DCN_S3 3_L2_DCS_S4 3_L2_DCN_FIFA_1 3_L2_DCN_UEFA_1 3_L2_DCN_FIFA_2 3_L2_DCN_UEFA_2 3_L2_DCN_FIFA_3 3_L2_DCN_UEFA_3 3_L2_DCS_FIFA_4 3_L2_DCS_UEFA_4 3_ZURIrouter 3_ZURIhost 3_BASErouter 3_BASEhost 3_GENErouter 3_GENEhost 3_LUGArouter 3_LUGAhost 3_MUNIrouter 3_MUNIhost 3_LYONrouter 3_LYONhost 3_VIENrouter 3_VIENhost 3_MILArouter 3_MILAhost
+ echo 'Group 3: 29 containers created!'
Group 3: 29 containers created!
+ docker exec 14_MUNIhost ip link set dev eth0 name ssh
+ docker exec 4_MILArouter ip link set dev eth0 down
+ docker exec 13_LYONrouter ip link set dev ssh up
+ docker exec 14_MUNIhost ip link set dev ssh up
+ docker exec 4_MILArouter ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 13 5 -1 L3-host
++ local n_grp=13 n_router=5 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.15.2/16
+ subnet_ssh_host=158.13.15.2/16
+ container_name=13_LYONhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.13.0.2 --name=13_LYONhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname LYON_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.15.2 miniinterneteth/d_host
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=LYON
+ property1=MATRIX
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g14/LYON
++ subnet_sshContainer_groupContainer 14 5 -1 router
++ local n_grp=14 n_router=5 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.15.1/16
+ subnet_ssh_router=158.14.15.1/16
+ docker run -itd --dns=198.14.0.2 --name=14_LYONrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname LYON_router -v /home/service/tud/mini_internet_project/platform/groups/g14/LYON/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/LYON/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/LYON/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g14/LYON/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.15.1 miniinterneteth/d_router
+ docker exec 4_MILArouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 4 7 -1 L3-host
++ local n_grp=4 n_router=7 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.4.17.2/16
+ subnet_ssh_host=158.4.17.2/16
+ container_name=4_MILAhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.4.0.2 --name=4_MILAhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname MILA_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=4_ssh --ip=158.4.17.2 miniinterneteth/d_host
+ docker exec 13_LYONhost ip link set dev eth0 down
+ docker exec 13_LYONhost ip link set dev eth0 name ssh
+ docker exec 4_MILAhost ip link set dev eth0 down
+ docker exec 13_LYONhost ip link set dev ssh up
+ docker exec 4_MILAhost ip link set dev eth0 name ssh
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g13/VIEN
++ subnet_sshContainer_groupContainer 13 6 -1 router
++ local n_grp=13 n_router=6 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.16.1/16
+ subnet_ssh_router=158.13.16.1/16
+ docker run -itd --dns=198.13.0.2 --name=13_VIENrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname VIEN_router -v /home/service/tud/mini_internet_project/platform/groups/g13/VIEN/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/VIEN/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/VIEN/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g13/VIEN/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.16.1 miniinterneteth/d_router
+ docker exec 14_LYONrouter ip link set dev eth0 down
+ docker exec 4_MILAhost ip link set dev ssh up
+ docker exec 14_LYONrouter ip link set dev eth0 name ssh
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ printf '%b\n' '4 4_LUGAhost'
+ printf '%b\n'
+ printf '%b\n' 4_ssh 4_L2_DCN_S1 4_L2_DCN_S2 4_L2_DCN_S3 4_L2_DCS_S4 4_L2_DCN_FIFA_1 4_L2_DCN_UEFA_1 4_L2_DCN_FIFA_2 4_L2_DCN_UEFA_2 4_L2_DCN_FIFA_3 4_L2_DCN_UEFA_3 4_L2_DCS_FIFA_4 4_L2_DCS_UEFA_4 4_ZURIrouter 4_ZURIhost 4_BASErouter 4_BASEhost 4_GENErouter 4_GENEhost 4_LUGArouter 4_LUGAhost 4_MUNIrouter 4_MUNIhost 4_LYONrouter 4_LYONhost 4_VIENrouter 4_VIENhost 4_MILArouter 4_MILAhost
+ echo 'Group 4: 29 containers created!'
Group 4: 29 containers created!
+ docker exec 14_LYONrouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 14 5 -1 L3-host
++ local n_grp=14 n_router=5 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.15.2/16
+ subnet_ssh_host=158.14.15.2/16
+ container_name=14_LYONhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.14.0.2 --name=14_LYONhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname LYON_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.15.2 miniinterneteth/d_host
+ docker exec 13_VIENrouter ip link set dev eth0 down
+ docker exec 13_VIENrouter ip link set dev eth0 name ssh
+ docker exec 13_VIENrouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 13 6 -1 L3-host
++ local n_grp=13 n_router=6 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.16.2/16
+ subnet_ssh_host=158.13.16.2/16
+ container_name=13_VIENhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.13.0.2 --name=13_VIENhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname VIEN_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.16.2 miniinterneteth/d_host
+ docker exec 14_LYONhost ip link set dev eth0 down
+ docker exec 14_LYONhost ip link set dev eth0 name ssh
+ docker exec 14_LYONhost ip link set dev ssh up
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=VIEN
+ property1=MATRIX_TARGET
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g14/VIEN
++ subnet_sshContainer_groupContainer 14 6 -1 router
++ local n_grp=14 n_router=6 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.16.1/16
+ subnet_ssh_router=158.14.16.1/16
+ docker run -itd --dns=198.14.0.2 --name=14_VIENrouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname VIEN_router -v /home/service/tud/mini_internet_project/platform/groups/g14/VIEN/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/VIEN/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/VIEN/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g14/VIEN/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.16.1 miniinterneteth/d_router
+ docker exec 13_VIENhost ip link set dev eth0 down
+ docker exec 13_VIENhost ip link set dev eth0 name ssh
+ docker exec 14_VIENrouter ip link set dev eth0 down
+ docker exec 13_VIENhost ip link set dev ssh up
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ docker exec 14_VIENrouter ip link set dev eth0 name ssh
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g13/MILA
++ subnet_sshContainer_groupContainer 13 7 -1 router
++ local n_grp=13 n_router=7 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.13.17.1/16
+ subnet_ssh_router=158.13.17.1/16
+ docker run -itd --dns=198.13.0.2 --name=13_MILArouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname MILA_router -v /home/service/tud/mini_internet_project/platform/groups/g13/MILA/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/MILA/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g13/MILA/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g13/MILA/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.17.1 miniinterneteth/d_router
+ docker exec 14_VIENrouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 14 6 -1 L3-host
++ local n_grp=14 n_router=6 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.16.2/16
+ subnet_ssh_host=158.14.16.2/16
+ container_name=14_VIENhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.14.0.2 --name=14_VIENhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname VIEN_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.16.2 miniinterneteth/d_host
+ docker exec 13_MILArouter ip link set dev eth0 down
+ docker exec 13_MILArouter ip link set dev eth0 name ssh
+ docker exec 14_VIENhost ip link set dev eth0 down
+ docker exec 13_MILArouter ip link set dev ssh up
+ docker exec 14_VIENhost ip link set dev eth0 name ssh
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 13 7 -1 L3-host
++ local n_grp=13 n_router=7 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.13.17.2/16
+ subnet_ssh_host=158.13.17.2/16
+ container_name=13_MILAhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.13.0.2 --name=13_MILAhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname MILA_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=13_ssh --ip=158.13.17.2 miniinterneteth/d_host
+ docker exec 14_VIENhost ip link set dev ssh up
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ router_i=(${routers[$i]})
+ rname=MILA
+ property1=MEASUREMENT
+ property2=host:miniinterneteth/d_host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 1
+ htype=host
++ echo host:miniinterneteth/d_host
++ cut -d : -f 2
+ dname=miniinterneteth/d_host
+ all_in_one=false
+ [[ 4 -gt 4 ]]
+ [[ false == \f\a\l\s\e ]]
+ location=/home/service/tud/mini_internet_project/platform/groups/g14/MILA
++ subnet_sshContainer_groupContainer 14 7 -1 router
++ local n_grp=14 n_router=7 n_layer2=-1 device=router
++ '[' router = sshContainer ']'
++ '[' router = MEASUREMENT ']'
++ '[' router = router ']'
++ echo 158.14.17.1/16
+ subnet_ssh_router=158.14.17.1/16
+ docker run -itd --dns=198.14.0.2 --name=14_MILArouter --sysctl net.ipv4.ip_forward=1 --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.fib_multipath_hash_policy=1 --sysctl net.ipv4.conf.all.rp_filter=0 --sysctl net.ipv4.conf.default.rp_filter=0 --sysctl net.ipv4.conf.lo.rp_filter=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv4.tcp_l3mdev_accept=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.all.forwarding=1 --sysctl net.ipv6.icmp.ratelimit=0 --sysctl net.mpls.conf.lo.input=1 --sysctl net.mpls.platform_labels=1048575 --cap-add=ALL --cap-drop=SYS_RESOURCE --cpus=2 --pids-limit 100 --hostname MILA_router -v /home/service/tud/mini_internet_project/platform/groups/g14/MILA/looking_glass.txt:/home/looking_glass.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/MILA/looking_glass_json.txt:/home/looking_glass_json.txt -v /home/service/tud/mini_internet_project/platform/groups/g14/MILA/daemons:/etc/frr/daemons -v /home/service/tud/mini_internet_project/platform/groups/g14/MILA/frr.conf:/etc/frr/frr.conf -v /etc/timezone:/etc/timezone:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.17.1 miniinterneteth/d_router
+ docker exec 13_MILAhost ip link set dev eth0 down
+ docker exec 13_MILAhost ip link set dev eth0 name ssh
+ docker exec 14_MILArouter ip link set dev eth0 down
+ docker exec 13_MILAhost ip link set dev ssh up
+ docker exec 14_MILArouter ip link set dev eth0 name ssh
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ printf '%b\n' '13 13_LUGAhost'
+ printf '%b\n'
+ printf '%b\n' 13_ssh 13_L2_DCN_S1 13_L2_DCN_S2 13_L2_DCN_S3 13_L2_DCS_S4 13_L2_DCN_FIFA_1 13_L2_DCN_UEFA_1 13_L2_DCN_FIFA_2 13_L2_DCN_UEFA_2 13_L2_DCN_FIFA_3 13_L2_DCN_UEFA_3 13_L2_DCS_FIFA_4 13_L2_DCS_UEFA_4 13_ZURIrouter 13_ZURIhost 13_BASErouter 13_BASEhost 13_GENErouter 13_GENEhost 13_LUGArouter 13_LUGAhost 13_MUNIrouter 13_MUNIhost 13_LYONrouter 13_LYONhost 13_VIENrouter 13_VIENhost 13_MILArouter 13_MILAhost
+ echo 'Group 13: 29 containers created!'
Group 13: 29 containers created!
+ docker exec 14_MILArouter ip link set dev ssh up
+ CONTAINERS+=("${group_number}""_""${rname}""router")
+ [[ host:miniinterneteth/d_host != \N\/\A ]]
+ extra=
+ [[ false == \t\r\u\e ]]
++ subnet_sshContainer_groupContainer 14 7 -1 L3-host
++ local n_grp=14 n_router=7 n_layer2=-1 device=L3-host
++ '[' L3-host = sshContainer ']'
++ '[' L3-host = MEASUREMENT ']'
++ '[' L3-host = router ']'
++ '[' L3-host = L3-host ']'
++ echo 158.14.17.2/16
+ subnet_ssh_host=158.14.17.2/16
+ container_name=14_MILAhost
+ additional_args=()
+ net=none
+ [[ host == *\k\r\i\l\l* ]]
+ [[ host == *\r\o\u\t\i\n\a\t\o\r* ]]
+ docker run -itd --dns=198.14.0.2 --name=14_MILAhost --cap-add=NET_ADMIN --cpus=2 --pids-limit 100 --hostname MILA_host --sysctl net.ipv4.icmp_ratelimit=0 --sysctl net.ipv4.icmp_echo_ignore_broadcasts=0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.icmp.ratelimit=0 -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro --log-opt max-size=1m --log-opt max-file=3 --network=14_ssh --ip=158.14.17.2 miniinterneteth/d_host
+ docker exec 14_MILAhost ip link set dev eth0 down
+ docker exec 14_MILAhost ip link set dev eth0 name ssh
+ docker exec 14_MILAhost ip link set dev ssh up
+ [[ host == *\k\r\i\l\l* ]]
+ CONTAINERS+=("${container_name}")
+ (( i++ ))
+ (( i < n_routers ))
+ printf '%b\n' '14 14_LUGAhost'
+ printf '%b\n'
+ printf '%b\n' 14_ssh 14_L2_DCN_S1 14_L2_DCN_S2 14_L2_DCN_S3 14_L2_DCS_S4 14_L2_DCN_FIFA_1 14_L2_DCN_UEFA_1 14_L2_DCN_FIFA_2 14_L2_DCN_UEFA_2 14_L2_DCN_FIFA_3 14_L2_DCN_UEFA_3 14_L2_DCS_FIFA_4 14_L2_DCS_UEFA_4 14_ZURIrouter 14_ZURIhost 14_BASErouter 14_BASEhost 14_GENErouter 14_GENEhost 14_LUGArouter 14_LUGAhost 14_MUNIrouter 14_MUNIhost 14_LYONrouter 14_LYONhost 14_VIENrouter 14_VIENhost 14_MILArouter 14_MILAhost
+ echo 'Group 14: 29 containers created!'
Group 14: 29 containers created!
+ readarray -t CONTAINERS
+ readarray -t PIDS
++ docker inspect -f '{{.State.Pid}}' 2_ssh 2_ZURIrouter 2_ZURIhost0 6_ssh 6_ZURIrouter 6_ZURIhost0 5_ssh 5_ZURIrouter 5_ZURIhost0 1_ssh 1_ZURIrouter 1_ZURIhost0 1_ZURIhost1 12_ssh 12_ZURIrouter 12_ZURIhost0 11_ssh 11_ZURIrouter 11_ZURIhost0 80_IXP 81_IXP 82_IXP 15_ssh 15_ZURIrouter 15_ZURIhost0 16_ssh 16_ZURIrouter 16_ZURIhost0 3_ssh 3_L2_DCN_S1 3_L2_DCN_S2 3_L2_DCN_S3 3_L2_DCS_S4 3_L2_DCN_FIFA_1 3_L2_DCN_UEFA_1 3_L2_DCN_FIFA_2 3_L2_DCN_UEFA_2 3_L2_DCN_FIFA_3 3_L2_DCN_UEFA_3 3_L2_DCS_FIFA_4 3_L2_DCS_UEFA_4 3_ZURIrouter 3_ZURIhost 3_BASErouter 3_BASEhost 3_GENErouter 3_GENEhost 3_LUGArouter 3_LUGAhost 3_MUNIrouter 3_MUNIhost 3_LYONrouter 3_LYONhost 3_VIENrouter 3_VIENhost 3_MILArouter 3_MILAhost 4_ssh 4_L2_DCN_S1 4_L2_DCN_S2 4_L2_DCN_S3 4_L2_DCS_S4 4_L2_DCN_FIFA_1 4_L2_DCN_UEFA_1 4_L2_DCN_FIFA_2 4_L2_DCN_UEFA_2 4_L2_DCN_FIFA_3 4_L2_DCN_UEFA_3 4_L2_DCS_FIFA_4 4_L2_DCS_UEFA_4 4_ZURIrouter 4_ZURIhost 4_BASErouter 4_BASEhost 4_GENErouter 4_GENEhost 4_LUGArouter 4_LUGAhost 4_MUNIrouter 4_MUNIhost 4_LYONrouter 4_LYONhost 4_VIENrouter 4_VIENhost 4_MILArouter 4_MILAhost 13_ssh 13_L2_DCN_S1 13_L2_DCN_S2 13_L2_DCN_S3 13_L2_DCS_S4 13_L2_DCN_FIFA_1 13_L2_DCN_UEFA_1 13_L2_DCN_FIFA_2 13_L2_DCN_UEFA_2 13_L2_DCN_FIFA_3 13_L2_DCN_UEFA_3 13_L2_DCS_FIFA_4 13_L2_DCS_UEFA_4 13_ZURIrouter 13_ZURIhost 13_BASErouter 13_BASEhost 13_GENErouter 13_GENEhost 13_LUGArouter 13_LUGAhost 13_MUNIrouter 13_MUNIhost 13_LYONrouter 13_LYONhost 13_VIENrouter 13_VIENhost 13_MILArouter 13_MILAhost 14_ssh 14_L2_DCN_S1 14_L2_DCN_S2 14_L2_DCN_S3 14_L2_DCS_S4 14_L2_DCN_FIFA_1 14_L2_DCN_UEFA_1 14_L2_DCN_FIFA_2 14_L2_DCN_UEFA_2 14_L2_DCN_FIFA_3 14_L2_DCN_UEFA_3 14_L2_DCS_FIFA_4 14_L2_DCS_UEFA_4 14_ZURIrouter 14_ZURIhost 14_BASErouter 14_BASEhost 14_GENErouter 14_GENEhost 14_LUGArouter 14_LUGAhost 14_MUNIrouter 14_MUNIhost 14_LYONrouter 14_LYONhost 14_VIENrouter 14_VIENhost 14_MILArouter 14_MILAhost
+ declare -A DOCKER_TO_PID
+ (( i = 0 ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4097333
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4099813
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4101377
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4097945
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4100577
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4102243
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4097673
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4100451
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4102421
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4097230
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4098946
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4100323
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4101974
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4098147
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4101254
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4103061
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4098055
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4101032
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4103069
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4104581
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4105136
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4106076
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4104755
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4107668
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4109007
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4105031
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4108448
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4109992
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4097672
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4100438
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4101744
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4103373
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4105135
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4107039
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4108215
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4109797
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4111006
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4112102
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4113192
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4114154
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4114846
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4115983
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4117216
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4118428
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4119627
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4121111
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4122271
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4123262
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4124193
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4125672
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4127210
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4128857
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4130232
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4131815
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4133510
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4135231
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4137056
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4097497
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4099776
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4101176
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4102803
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4104797
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4106706
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4107910
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4109644
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4110872
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4112141
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4113462
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4114657
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4115815
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4117018
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4118229
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4119581
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4121094
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4122413
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4124099
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4125476
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4127042
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4128672
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4130060
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4131611
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4133139
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4134628
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4136005
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4137571
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4138940
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4103214
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4106606
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4107829
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4109471
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4110864
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4112133
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4113455
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4114686
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4115832
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4117007
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4118223
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4119408
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4120432
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4121324
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4122408
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4124117
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4125645
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4127211
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4128855
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4130225
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4131801
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4133290
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4135470
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4137190
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4138798
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4140066
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4141199
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4142430
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4143499
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4104394
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4107280
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4108672
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4110024
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4111182
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4112202
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4113526
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4114751
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4115982
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4117146
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4118429
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4119660
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4120958
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4122400
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4124092
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4125484
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4127031
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4128530
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4129942
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4131723
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4133292
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4135630
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4137222
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4138938
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4140420
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4141510
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4142590
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4143657
+ (( ++i ))
+ (( i < 144 ))
++ lsb_release -rs
+ [[ 12 == 16* ]]
+ DOCKER_TO_PID["${CONTAINERS[$i]}"]=4144728
+ (( ++i ))
+ (( i < 144 ))
+ declare -p DOCKER_TO_PID

real	0m43.039s
user	0m5.421s
sys	0m5.854s
+ echo ''

+ echo ''

++ date +%s%N
+ echo 'connect_l3_host_router.sh 1735322441783'
+ echo 'connect_l3_host_router.sh: '
connect_l3_host_router.sh: 
+ /home/service/tud/mini_internet_project/platform/setup/connect_l3_host_router.sh /home/service/tud/mini_internet_project/platform /home/service/tud/mini_internet_project/platform/config
+ trap 'exit 1' ERR
+ set -o errexit
+ set -o pipefail
+ set -o nounset
+ (( 0 != 0 ))
+ '[' 2 -ne 2 ']'
+ DIRECTORY=/home/service/tud/mini_internet_project/platform
+ CONFIG_DIRECTORY=/home/service/tud/mini_internet_project/platform/config
+ source /home/service/tud/mini_internet_project/platform/config/subnet_config.sh
++ set -o errexit
++ set -o pipefail
++ set -o nounset
+ source /home/service/tud/mini_internet_project/platform/setup/_parallel_helper.sh
++ trap 'exit 1' ERR
++ set -o errexit
++ set -o pipefail
++ set -o nounset
+++ grep -c '^processor' /proc/cpuinfo
++ N_CORES=8
+++ lscpu
+++ grep -E '^Thread\(s\) per core:'
+++ awk '{print $4}'
++ N_THREADS_PER_CORE=1
++ N_TASKS=8
+ source /home/service/tud/mini_internet_project/platform/groups/docker_pid.map
++ DOCKER_TO_PID=(['14_L2_DCN_S1']='4107280' ['14_L2_DCN_S3']='4110024' ['14_L2_DCN_S2']='4108672' ['11_ZURIrouter']='4101032' ['4_GENEhost']='4124099' ['14_MILArouter']='4143657' ['11_ssh']='4098055' ['3_GENErouter']='4121111' ['13_L2_DCN_FIFA_2']='4114686' ['13_L2_DCN_FIFA_3']='4117007' ['13_L2_DCN_FIFA_1']='4112133' ['3_L2_DCN_S3']='4103373' ['3_L2_DCN_S2']='4101744' ['3_L2_DCN_S1']='4100438' ['13_LUGArouter']='4130225' ['4_MILArouter']='4137571' ['3_BASErouter']='4118428' ['2_ssh']='4097333' ['4_ssh']='4097497' ['3_ZURIrouter']='4115983' ['14_L2_DCN_FIFA_1']='4112202' ['14_L2_DCN_FIFA_3']='4117146' ['14_L2_DCN_FIFA_2']='4114751' ['13_MILArouter']='4142430' ['4_VIENhost']='4136005' ['4_L2_DCS_S4']='4104797' ['16_ZURIhost0']='4109992' ['13_VIENrouter']='4140066' ['5_ssh']='4097673' ['3_GENEhost']='4122271' ['4_MUNIhost']='4130060' ['4_LYONrouter']='4131611' ['13_L2_DCN_S2']='4107829' ['13_L2_DCN_S3']='4109471' ['3_L2_DCS_UEFA_4']='4114846' ['13_L2_DCN_S1']='4106606' ['4_LYONhost']='4133139' ['13_ZURIrouter']='4121324' ['13_L2_DCS_S4']='4110864' ['4_L2_DCS_FIFA_4']='4114657' ['13_GENEhost']='4128855' ['14_L2_DCN_UEFA_1']='4113526' ['14_L2_DCN_UEFA_2']='4115982' ['14_L2_DCN_UEFA_3']='4118429' ['14_MUNIrouter']='4135630' ['4_GENErouter']='4122413' ['14_BASErouter']='4125484' ['13_BASEhost']='4125645' ['13_MUNIhost']='4135470' ['5_ZURIrouter']='4100451' ['12_ZURIhost0']='4103061' ['1_ZURIrouter']='4098946' ['2_ZURIrouter']='4099813' ['15_ZURIhost0']='4109007' ['13_L2_DCN_UEFA_3']='4118223' ['12_ZURIrouter']='4101254' ['13_L2_DCN_UEFA_2']='4115832' ['5_ZURIhost0']='4102421' ['13_L2_DCN_UEFA_1']='4113455' ['14_MILAhost']='4144728' ['3_L2_DCN_UEFA_2']='4111006' ['1_ZURIhost1']='4101974' ['14_LYONhost']='4140420' ['3_L2_DCN_UEFA_3']='4113192' ['1_ZURIhost0']='4100323' ['3_LYONrouter']='4128857' ['3_L2_DCN_UEFA_1']='4108215' ['13_LUGAhost']='4131801' ['4_MILAhost']='4138940' ['4_BASEhost']='4121094' ['4_VIENrouter']='4134628' ['13_BASErouter']='4124117' ['14_LUGAhost']='4133292' ['4_L2_DCS_UEFA_4']='4115815' ['3_ZURIhost']='4117216' ['2_ZURIhost0']='4101377' ['3_LYONhost']='4130232' ['15_ZURIrouter']='4107668' ['4_LUGArouter']='4125476' ['14_ZURIrouter']='4122400' ['14_LYONrouter']='4138938' ['13_MUNIrouter']='4133290' ['6_ZURIhost0']='4102243' ['16_ssh']='4105031' ['1_ssh']='4097230' ['4_L2_DCN_FIFA_1']='4106706' ['4_L2_DCN_FIFA_2']='4109644' ['4_L2_DCN_FIFA_3']='4112141' ['3_LUGAhost']='4124193' ['81_IXP']='4105136' ['14_GENErouter']='4128530' ['14_GENEhost']='4129942' ['6_ssh']='4097945' ['3_MILAhost']='4137056' ['15_ssh']='4104755' ['4_L2_DCN_S1']='4099776' ['4_L2_DCN_S2']='4101176' ['3_VIENrouter']='4131815' ['4_L2_DCN_S3']='4102803' ['13_L2_DCS_UEFA_4']='4120432' ['14_ssh']='4104394' ['4_BASErouter']='4119581' ['3_L2_DCS_S4']='4105135' ['3_BASEhost']='4119627' ['4_L2_DCN_UEFA_1']='4107910' ['4_L2_DCN_UEFA_3']='4113462' ['4_L2_DCN_UEFA_2']='4110872' ['80_IXP']='4104581' ['14_LUGArouter']='4131723' ['14_MUNIhost']='4137222' ['14_L2_DCS_UEFA_4']='4120958' ['3_MUNIrouter']='4125672' ['3_MUNIhost']='4127210' ['13_ZURIhost']='4122408' ['14_L2_DCS_S4']='4111182' ['3_LUGArouter']='4123262' ['4_ZURIrouter']='4117018' ['4_ZURIhost']='4118229' ['14_L2_DCS_FIFA_4']='4119660' ['13_MILAhost']='4143499' ['3_ssh']='4097672' ['14_ZURIhost']='4124092' ['14_VIENrouter']='4141510' ['3_L2_DCS_FIFA_4']='4114154' ['3_L2_DCN_FIFA_3']='4112102' ['3_L2_DCN_FIFA_2']='4109797' ['3_L2_DCN_FIFA_1']='4107039' ['13_LYONrouter']='4137190' ['13_L2_DCS_FIFA_4']='4119408' ['3_MILArouter']='4135231' ['14_BASEhost']='4127031' ['14_VIENhost']='4142590' ['82_IXP']='4106076' ['11_ZURIhost0']='4103069' ['4_MUNIrouter']='4128672' ['16_ZURIrouter']='4108448' ['6_ZURIrouter']='4100577' ['3_VIENhost']='4133510' ['13_LYONhost']='4138798' ['13_ssh']='4103214' ['4_LUGAhost']='4127042' ['13_GENErouter']='4127211' ['12_ssh']='4098147' ['13_VIENhost']='4141199')
++ declare -A DOCKER_TO_PID
+ source /home/service/tud/mini_internet_project/platform/setup/_connect_utils.sh
++ trap 'exit 1' ERR
++ set -o errexit
++ set -o pipefail
++ set -o nounset
++ UTIL=connect_l3_host_router.sh
+ readarray ASConfig
+ GroupNumber=15
+ (( k = 0 ))
+ (( k < GroupNumber ))
+ GroupK=(${ASConfig[$k]})
+ GroupAS=1
+ GroupType=AS
+ GroupHasConfig=Config
+ GroupRouterConfig=l3_routers_krill.txt
+ '[' AS '!=' IXP ']'
+ readarray Routers
+ RouterNumber=4
+ AccessSameRouter=false
+ (( i = 0 ))
+ (( i < RouterNumber ))
+ RouterI=(${Routers[$i]})
+ RouterRegion=ZURI
+ (( j = i + 1 ))
+ (( j < RouterNumber ))
+ RouterJ=(${Routers[$j]})
+ RouterRegionJ=ZURI
+ [[ ZURI == \Z\U\R\I ]]
+ AccessSameRouter=true
+ break
+ [[ true == true ]]
+ break
+ [[ true == true ]]
+ (( i = 0 ))
+ (( i < RouterNumber ))
+ RouterI=(${Routers[$i]})
+ RouterRegion=ZURI
+ HostImage=routinator:miniinterneteth/d_routinator
+ HostSuffix=
+ [[ 5 -gt 4 ]]
+ [[ ALL == \A\L\L ]]
+ HostSuffix=0
+ [[ routinator:miniinterneteth/d_routinator != \N\/\A ]]
+ read -r HostPID RouterPID HostInterface RouterInterface
++ connect_one_l3_host_router 1 ZURI 0
++ (( 0 != 0 ))
++ '[' 3 -ne 3 ']'
++ local CurrentAS=1
++ local CurrentRegion=ZURI
++ local CurrentHostSuffix=0
++ local HostCtnName=1_ZURIhost0
++ local HostInterface=ZURIrouter
++ local RouterCtnName=1_ZURIrouter
++ local RouterInterface=host0
++ local Identifier=1_ZURIhost0_ZURIrouter
++ local PortName
+++ create_unique_port_name 1_ZURIhost0_ZURIrouter
+++ '[' 1 -ne 2 ']'
+++ echo 'Usage: create_unique_port_name <Identifier>'
+++ exit 1
++ PortName='Usage: create_unique_port_name <Identifier>'
++ exit 1

real	0m0.016s
user	0m0.009s
sys	0m0.010s
